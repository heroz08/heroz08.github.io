{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/vexo/source/img/github.png","path":"img/github.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/blogfavicon.png","path":"css/images/blogfavicon.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"b0de21601f379c74517bd50ddeb7a0091ae5b283","modified":1617983392935},{"_id":"themes/vexo/_config.yml","hash":"99ff881729fb7600fde520c07263cfff3dfdc0b7","modified":1617985888307},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1617983392992},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1617983392993},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1617983392993},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1617983392996},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1617983392996},{"_id":"source/_posts/FormData使用方法详解.md","hash":"89661f20ca9a6f57fa031862f30ecf53176600fb","modified":1617986310265},{"_id":"source/_posts/Git命令.md","hash":"5fa49bbf134a678cb1efa5520350e32c2f4c3ba1","modified":1617986316503},{"_id":"source/_posts/Moment-js-输出明天、今天和昨天.md","hash":"77e2e2e2f519366003c18e043c589acee6b83961","modified":1617986347513},{"_id":"source/_posts/CSS之img图片居中.md","hash":"ad957fb921a699a5ce36ebadf094a62a56ed51f2","modified":1617983392935},{"_id":"source/_posts/HTML怎么多行显示三个点.md","hash":"71c4fd865c82680918eccda0e4a5ac684067bd3d","modified":1617983392936},{"_id":"source/_posts/antd之如何通过url生成upload的filelist.md","hash":"4f793a88cc8d47d8a95f2015dd66a646151d5941","modified":1617986172419},{"_id":"source/_posts/JS如何通用判断数据类型.md","hash":"06f0e08df627aeaba847a9d2a801b35871fc0079","modified":1617983392936},{"_id":"source/_posts/antd的table列表分页删除时要注意的page,current.md","hash":"31d487a982ce17a6824f17836037fb5c5afb948b","modified":1617986297497},{"_id":"source/_posts/antd之Alert警告提示框如何给内容添加链接.md","hash":"5bd85eb47640ea94573116e99643617b3cda34ba","modified":1617983392937},{"_id":"source/_posts/antd之table组件的columns属性filter.md","hash":"f3b5f4f1199ec99a47a7ed371e19332b45aaec9e","modified":1617983392937},{"_id":"source/_posts/antd的坑之table的scroll和fixed列重叠.md","hash":"4263b0c05834b1c893b71fc2bdf835c30a080922","modified":1617986281539},{"_id":"source/_posts/antd之鼠标放上去提示修改.md","hash":"b4be6b798e1168b661dcf227473e4bc1e4ddb643","modified":1617983392937},{"_id":"source/_posts/a标签实现下载文件.md","hash":"591b7e0576093284a78abd6dfeb57ada4cdea698","modified":1617986272515},{"_id":"source/_posts/antd的坑之checkbox的冒泡和捕获问题.md","hash":"5173f0ebdaeff7907d9cba2f6adacde11393f69f","modified":1617983392937},{"_id":"source/_posts/hooksAndTs.md","hash":"13cef244f1af1d397369f2f296f7e10a50551276","modified":1617986326995},{"_id":"source/_posts/mac去除系统更新小红点.md","hash":"a284ba08d20570fa19e274b346d48f1f00ad94a2","modified":1617986342141},{"_id":"source/_posts/mysql的增删改查.md","hash":"73e53184511e1978fd776e24385410937a6ea50c","modified":1617986353893},{"_id":"source/_posts/react-native-ios保存图片到相册.md","hash":"d16c9b7ae0f221d863c9441fecdd1030f645eda0","modified":1617986369782},{"_id":"source/_posts/antd的坑之menu默认选中和当前选中.md","hash":"9b47714b3addaa7b0f6da3fc342f56a1ae46c2f2","modified":1617983392937},{"_id":"source/_posts/react-native-webview的坑.md","hash":"d2cc36d18317f6d7e38b4e247d9122e20f36d6b8","modified":1617986382081},{"_id":"source/_posts/antd的走马灯carousel的next和prv及go的method用法.md","hash":"0a1cbcdde8fc39afab338c99837ac734d2369b2f","modified":1617983392937},{"_id":"source/_posts/hashHistory和browserHistory的区别.md","hash":"ea4a3786b2545738aa276f949993bad088662417","modified":1617983392938},{"_id":"source/_posts/react-native-ios环境搭建.md","hash":"d0b5b2abc5e5418a8da6a069411fdb8e986585c4","modified":1617983392939},{"_id":"source/_posts/react-native-顶部和底部bar的高度.md","hash":"3d62a4fcbed6be2dcf79f5feca6de8662806e9b3","modified":1617983392939},{"_id":"source/_posts/react-router通过js导航.md","hash":"7493888b6864074ceb779cd8d8b287cd1be54e73","modified":1617983392939},{"_id":"source/_posts/react中getDefaultProps和getInitialState的区别是什么.md","hash":"98935acc7c24303b6e57487f36cf2165effda837","modified":1617983392939},{"_id":"source/_posts/react中将html字符串渲染到页面.md","hash":"cc28cf64ef3b34821e1810098f9467ac5f465a28","modified":1617983392939},{"_id":"source/_posts/webpack创建项目.md","hash":"41007910f36415af3497e460d3768740a972c901","modified":1617986402128},{"_id":"source/_posts/webpack新建项目流程.md","hash":"03c5ca4ffd18252e76784aa52121f0c566d59287","modified":1617986419257},{"_id":"source/_posts/react的context.md","hash":"3fddd3dc771cc7e8ef6c6cf1e1e988b76b201ed6","modified":1617983392940},{"_id":"source/_posts/上传中的file类型文件生成url的两种方式.md","hash":"ef1b481f09d54cb9811be11d3eb0c1d24b718fea","modified":1617986250817},{"_id":"source/_posts/react的displayName、defaultProps、proptype、static到底是什么.md","hash":"8068ef635a68e2a9d8a386074566364536fec057","modified":1617983392940},{"_id":"source/_posts/如何获取图片的尺寸？.md","hash":"0617d05a9909a7da4a704b6dc572a15960092569","modified":1617986192092},{"_id":"source/_posts/react的高阶组件.md","hash":"b98f5c539b9e8754f0682bf96c5a61d40dfb126d","modified":1617983392941},{"_id":"source/_posts/数组对象去重.md","hash":"53618a02e785e804ab3fb42cf71997f6304835a7","modified":1617986052044},{"_id":"source/_posts/webpack构建react开发环境.md","hash":"2bb7b56f20e137705e9cc46816ce7d5911490c74","modified":1617983392941},{"_id":"source/_posts/给Icon添加ToolTip的坑.md","hash":"9ff24ed1869791d70392873db61cd831347ecb2e","modified":1617986237476},{"_id":"source/_posts/图片在父级里面填充铺满.md","hash":"6fa3f8cfe559fc6922e5db2c83edd058f808b8da","modified":1617983392942},{"_id":"source/_posts/对于async和await的理解.md","hash":"7c2b409c0c2bc4fc167f3dc621d5792841d53b71","modified":1617983392942},{"_id":"source/_posts/通过Form.create创建的form域.md","hash":"983fbde21ca7ff9ef1e454efda28c5e9ce1c684d","modified":1617986261309},{"_id":"source/_posts/纯CSS画的基本图形.md","hash":"8c40cb9b19b2ae699d0d4f30a1039f10e6d3fb1b","modified":1617983392942},{"_id":"source/_posts/联通电视盒子软破解安装应用.md","hash":"741a1140e74d4f7917a792d1801ec8d7d426adb7","modified":1617983392943},{"_id":"source/_posts/通过Form-create创建的form域.md","hash":"7a19501488cb6b14b4aa7b8a91f865a6c01c13bf","modified":1617983392943},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1617983939421},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1617983392943},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1617983392995},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1617983392995},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1617983392995},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1617983392995},{"_id":"themes/vexo/layout/page.ejs","hash":"d113582d826bdb038141e6668cb1c2d2af0a6b4c","modified":1617983392996},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1617983392996},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1617983392996},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1617983392943},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1617983392993},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1617983392993},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1617983392994},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1617983392994},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"46e20d836f9ed97147078776f58a44a32fe7ceeb","modified":1617983392994},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"5c2f6b052737802b7adf87498c1706028847daef","modified":1617983392994},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"5ec50c3a590e8063f78b07a8d61018290e11a5b5","modified":1617983392994},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1617983392994},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1617983941067},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1617983392994},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1617983392995},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1617983392995},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1617983392995},{"_id":"themes/vexo/source/css/_config.styl","hash":"9421564a8c5a0e2d3ecc1e0293789b9ba824e264","modified":1617983392996},{"_id":"themes/vexo/source/css/style.styl","hash":"68521b4b1ec5bc0343f7dd21b3b7476f7aad92ea","modified":1617983393002},{"_id":"themes/vexo/source/img/github.png","hash":"71e8a747ec3763e3de52f5369aec64e050bf1568","modified":1617983393010},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1617983393013},{"_id":"themes/vexo/source/js/script.js","hash":"d2c81a503b75055cfe48509576f00c22e5737311","modified":1617983393013},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"8a428687f74f33426bf0c7de3fdd1f7654c26587","modified":1617983392996},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"3ec22606f9548681389158384dc29ddf59c8ceea","modified":1617983392997},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1617983392997},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1617983393000},{"_id":"themes/vexo/source/css/images/blogfavicon.png","hash":"4e05b82d7bde6a6f27575fd1afcfab2fd63176c1","modified":1617983392999},{"_id":"themes/vexo/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1617983393000},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1617983393000},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1617983393000},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1617983393000}],"Category":[],"Data":[],"Page":[],"Post":[{"title":"FormData使用方法详解","date":"2019-09-08T07:08:38.000Z","_content":"\n##### FormData的主要用途有两个：\n\n\n\n###### 1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\n\n\n\n###### 2、异步上传文件\n\n\n\n#### 一、创建formData对象\n\n\n\n###### 1、创建一个空对象：\n\n\n\n```js\n//通过FormData构造函数创建一个空对象\n\nvar formdata=new FormData();\n\n//可以通过append()方法来追加数据\n\nformdata.append(\"name\",\"laotie\");\n\n//通过get方法对值进行读取\n\nconsole.log(formdata.get(\"name\"));//laotie\n\n//通过set方法对值进行设置\n\nformdata.set(\"name\",\"laoliu\");\n\nconsole.log(formdata.get(\"name\"));//laoliu\n```\n\n\n\n\n\n###### 2、通过表单对formData进行初始化\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n通过表单元素作为参数，实现对formData的初始化：\n\n\n\n\n\n```js\n//获得表单按钮元素\nvar btn=document.querySelector(\"#btn\");\n//为按钮添加点击事件\nbtn.onclick=function(){\n//根据ID获得页面当中的form表单元素\nvar form=document.querySelector(\"#advForm\");\n//将获得的表单元素作为参数，对formData进行初始化\nvar formdata=new FormData(form);\n//通过get方法获得name为advName元素的value值\nconsole.log(formdata.get(\"advName\"));//xixi\n//通过get方法获得name为advType元素的value值\nconsole.log(formdata.get(\"advType\"));//1\n}\n```\n\n\n\n#### 二、操作方法\n\n\n\n```js\n1、通过get(key)与getAll(key)来获取相对应的值\n// 获取key为age的第一个值\nformdata.get(\"age\"); \n// 获取key为age的所有值，返回值为数组类型\nformdata.getAll(\"age\");\n2、通过append(key,value)在数据末尾追加数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoli的数据\nformdata.append(\"name\",\"laoli\");\n//通过append()方法在末尾追加key为name值为laotie的数据\nformdata.append(\"name\",\"laotie\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoli\", \"laotie\"]\n3、通过set(key, value)来设置修改数据\nkey的值不存在，会添加一条数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//如果key的值不存在会为数据添加一个key为name值为laoliu的数据\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\nkey的值存在，会修改对应的value值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoliu2的数据\nformdata.append(\"name\",\"laoliu2\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoliu2\"]\n//将存在的key为name的值修改为laoli\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoli\"]\n4、通过has(key)来判断是否存在对应的key值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//判断是否包含key为name的数据\nconsole.log(formdata.has(\"name\"));//true\n//判断是否包含key为age的数据\nconsole.log(formdata.has(\"age\"));//false\n5、通过delete(key)可以删除数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\nconsole.log(formdata.get(\"name\"));//laoliu\n//删除key为name的值\nformdata.delete(\"name\");\nconsole.log(formdata.get(\"name\"));//null\n```\n\n\n\n#### 三、通过XMLHttpRequest发送数据\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p>广告图片：<input type=\"file\" name=\"advPic\"></p>\n<p>广告地址：<input type=\"text\" name=\"advUrl\"></p>\n<p>广告排序：<input type=\"text\" name=\"orderBy\"></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n发送数据：\n\n\n\n```js\nvar btn=document.querySelector(\"#btn\");\nbtn.onclick=function(){\n  var formdata=new FormData(document.getElementById(\"advForm\"));\n  var xhr=new XMLHttpRequest();\n  xhr.open(\"post\",\"http://127.0.0.1/adv\");\n  xhr.send(formdata);\n  xhr.onload=function(){\n    if(xhr.status==200){\n    //...\n    }\n  }\n}\n```","source":"_posts/FormData使用方法详解.md","raw":"---\ntitle: FormData使用方法详解\ndate: 2019-09-08 15:08:38\ntags: [formData]\n---\n\n##### FormData的主要用途有两个：\n\n\n\n###### 1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\n\n\n\n###### 2、异步上传文件\n\n\n\n#### 一、创建formData对象\n\n\n\n###### 1、创建一个空对象：\n\n\n\n```js\n//通过FormData构造函数创建一个空对象\n\nvar formdata=new FormData();\n\n//可以通过append()方法来追加数据\n\nformdata.append(\"name\",\"laotie\");\n\n//通过get方法对值进行读取\n\nconsole.log(formdata.get(\"name\"));//laotie\n\n//通过set方法对值进行设置\n\nformdata.set(\"name\",\"laoliu\");\n\nconsole.log(formdata.get(\"name\"));//laoliu\n```\n\n\n\n\n\n###### 2、通过表单对formData进行初始化\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n通过表单元素作为参数，实现对formData的初始化：\n\n\n\n\n\n```js\n//获得表单按钮元素\nvar btn=document.querySelector(\"#btn\");\n//为按钮添加点击事件\nbtn.onclick=function(){\n//根据ID获得页面当中的form表单元素\nvar form=document.querySelector(\"#advForm\");\n//将获得的表单元素作为参数，对formData进行初始化\nvar formdata=new FormData(form);\n//通过get方法获得name为advName元素的value值\nconsole.log(formdata.get(\"advName\"));//xixi\n//通过get方法获得name为advType元素的value值\nconsole.log(formdata.get(\"advType\"));//1\n}\n```\n\n\n\n#### 二、操作方法\n\n\n\n```js\n1、通过get(key)与getAll(key)来获取相对应的值\n// 获取key为age的第一个值\nformdata.get(\"age\"); \n// 获取key为age的所有值，返回值为数组类型\nformdata.getAll(\"age\");\n2、通过append(key,value)在数据末尾追加数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoli的数据\nformdata.append(\"name\",\"laoli\");\n//通过append()方法在末尾追加key为name值为laotie的数据\nformdata.append(\"name\",\"laotie\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoli\", \"laotie\"]\n3、通过set(key, value)来设置修改数据\nkey的值不存在，会添加一条数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//如果key的值不存在会为数据添加一个key为name值为laoliu的数据\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\nkey的值存在，会修改对应的value值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoliu2的数据\nformdata.append(\"name\",\"laoliu2\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoliu2\"]\n//将存在的key为name的值修改为laoli\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoli\"]\n4、通过has(key)来判断是否存在对应的key值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//判断是否包含key为name的数据\nconsole.log(formdata.has(\"name\"));//true\n//判断是否包含key为age的数据\nconsole.log(formdata.has(\"age\"));//false\n5、通过delete(key)可以删除数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\nconsole.log(formdata.get(\"name\"));//laoliu\n//删除key为name的值\nformdata.delete(\"name\");\nconsole.log(formdata.get(\"name\"));//null\n```\n\n\n\n#### 三、通过XMLHttpRequest发送数据\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p>广告图片：<input type=\"file\" name=\"advPic\"></p>\n<p>广告地址：<input type=\"text\" name=\"advUrl\"></p>\n<p>广告排序：<input type=\"text\" name=\"orderBy\"></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n发送数据：\n\n\n\n```js\nvar btn=document.querySelector(\"#btn\");\nbtn.onclick=function(){\n  var formdata=new FormData(document.getElementById(\"advForm\"));\n  var xhr=new XMLHttpRequest();\n  xhr.open(\"post\",\"http://127.0.0.1/adv\");\n  xhr.send(formdata);\n  xhr.onload=function(){\n    if(xhr.status==200){\n    //...\n    }\n  }\n}\n```","slug":"FormData使用方法详解","published":1,"updated":"2021-04-09T16:38:30.265Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3cq00001a35dx0slwbg"},{"title":"Git 命令","date":"2021-03-30T16:00:00.000Z","_content":"\n\n我每天使用 Git ，但是很多命令记不住。\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n![](https://cdn.nlark.com/lark/0/2018/png/163037/1542352926798-44d8cdd3-1d6a-4112-95ec-7258c693a9b2.png#width=827)\nWorkspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库\n## **一、新建代码库**\n\n# 在当前目录新建一个Git代码库\n\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n\n$ git clone [url]\n## 二、配置\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的Git配置\n\n$ git config --list\n\n# 编辑Git配置文件\n\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n\n$ git config [--global] [user.name](http://user.name/) \"[name]\"$ git config [--global] user.email \"[email address]\"\n## 三、增加/删除文件\n\n# 添加指定文件到暂存区\n\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n\n$ git add .\n\n# 添加每个变化前，都会要求确认\n\n# 对于同一个文件的多处变化，可以实现分次提交\n\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n\n$ git mv [file-original] [file-renamed]\n## 四、代码提交\n\n# 提交暂存区到仓库区\n\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n\n$ git commit -a\n\n# 提交时显示所有diff信息\n\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n\n$ git commit --amend [file1] [file2] ...\n## 五、分支\n\n# 列出所有本地分支\n\n$ git branch\n\n# 列出所有远程分支\n\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n\n$ git cherry-pick [commit]\n\n# 删除分支\n\n$ git branch -d [branch-name]\n\n# 删除远程分支\n\n$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]\n## 六、标签\n\n# 列出所有tag\n\n$ git tag\n\n# 新建一个tag在当前commit\n\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n\n$ git tag [tag] [commit]\n\n# 删除本地tag\n\n$ git tag -d [tag]\n\n# 删除远程tag\n\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n\n$ git show [tag]\n\n# 提交指定tag\n\n$ git push [remote] [tag]\n\n# 提交所有tag\n\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n\n$ git checkout -b [branch] [tag]\n## 七、查看信息\n\n# 显示有变更的文件\n\n$ git status\n\n# 显示当前分支的版本历史\n\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n\n$ git log --follow [file]$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n\n$ git log -p [file]\n\n# 显示过去5次提交\n\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n\n$ git reflog\n## 八、远程同步\n\n# 下载远程仓库的所有变动\n\n$ git fetch [remote]\n\n# 显示所有远程仓库\n\n$ git remote -v\n\n# 显示某个远程仓库的信息\n\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n\n$ git push [remote] --all\n\n## 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n\n$ git stash$ git stash pop\n## 十、其他\n\n# 生成一个可供发布的压缩包\n\n$ git archive\n","source":"_posts/Git命令.md","raw":"---\ntitle: Git 命令\ndate: 2021-03-31 00:00:00\ntags: [git]\n---\n\n\n我每天使用 Git ，但是很多命令记不住。\n\n一般来说，日常使用只要记住下图6个命令，就可以了。但是熟练使用，恐怕要记住60～100个命令。\n\n下面是我整理的常用 Git 命令清单。几个专用名词的译名如下。\n![](https://cdn.nlark.com/lark/0/2018/png/163037/1542352926798-44d8cdd3-1d6a-4112-95ec-7258c693a9b2.png#width=827)\nWorkspace：工作区Index / Stage：暂存区Repository：仓库区（或本地仓库）Remote：远程仓库\n## **一、新建代码库**\n\n# 在当前目录新建一个Git代码库\n\n$ git init\n\n# 新建一个目录，将其初始化为Git代码库\n\n$ git init [project-name]\n\n# 下载一个项目和它的整个代码历史\n\n$ git clone [url]\n## 二、配置\nGit的设置文件为.gitconfig，它可以在用户主目录下（全局配置），也可以在项目目录下（项目配置）。\n\n# 显示当前的Git配置\n\n$ git config --list\n\n# 编辑Git配置文件\n\n$ git config -e [--global]\n\n# 设置提交代码时的用户信息\n\n$ git config [--global] [user.name](http://user.name/) \"[name]\"$ git config [--global] user.email \"[email address]\"\n## 三、增加/删除文件\n\n# 添加指定文件到暂存区\n\n$ git add [file1] [file2] ...\n\n# 添加指定目录到暂存区，包括子目录\n\n$ git add [dir]\n\n# 添加当前目录的所有文件到暂存区\n\n$ git add .\n\n# 添加每个变化前，都会要求确认\n\n# 对于同一个文件的多处变化，可以实现分次提交\n\n$ git add -p\n\n# 删除工作区文件，并且将这次删除放入暂存区\n\n$ git rm [file1] [file2] ...\n\n# 停止追踪指定文件，但该文件会保留在工作区\n\n$ git rm --cached [file]\n\n# 改名文件，并且将这个改名放入暂存区\n\n$ git mv [file-original] [file-renamed]\n## 四、代码提交\n\n# 提交暂存区到仓库区\n\n$ git commit -m [message]\n\n# 提交暂存区的指定文件到仓库区\n\n$ git commit [file1] [file2] ... -m [message]\n\n# 提交工作区自上次commit之后的变化，直接到仓库区\n\n$ git commit -a\n\n# 提交时显示所有diff信息\n\n$ git commit -v\n\n# 使用一次新的commit，替代上一次提交\n\n# 如果代码没有任何新变化，则用来改写上一次commit的提交信息\n\n$ git commit --amend -m [message]\n\n# 重做上一次commit，并包括指定文件的新变化\n\n$ git commit --amend [file1] [file2] ...\n## 五、分支\n\n# 列出所有本地分支\n\n$ git branch\n\n# 列出所有远程分支\n\n$ git branch -r\n\n# 列出所有本地分支和远程分支\n\n$ git branch -a\n\n# 新建一个分支，但依然停留在当前分支\n\n$ git branch [branch-name]\n\n# 新建一个分支，并切换到该分支\n\n$ git checkout -b [branch]\n\n# 新建一个分支，指向指定commit\n\n$ git branch [branch] [commit]\n\n# 新建一个分支，与指定的远程分支建立追踪关系\n\n$ git branch --track [branch] [remote-branch]\n\n# 切换到指定分支，并更新工作区\n\n$ git checkout [branch-name]\n\n# 切换到上一个分支\n\n$ git checkout -\n\n# 建立追踪关系，在现有分支与指定的远程分支之间\n\n$ git branch --set-upstream [branch] [remote-branch]\n\n# 合并指定分支到当前分支\n\n$ git merge [branch]\n\n# 选择一个commit，合并进当前分支\n\n$ git cherry-pick [commit]\n\n# 删除分支\n\n$ git branch -d [branch-name]\n\n# 删除远程分支\n\n$ git push origin --delete [branch-name]$ git branch -dr [remote/branch]\n## 六、标签\n\n# 列出所有tag\n\n$ git tag\n\n# 新建一个tag在当前commit\n\n$ git tag [tag]\n\n# 新建一个tag在指定commit\n\n$ git tag [tag] [commit]\n\n# 删除本地tag\n\n$ git tag -d [tag]\n\n# 删除远程tag\n\n$ git push origin :refs/tags/[tagName]\n\n# 查看tag信息\n\n$ git show [tag]\n\n# 提交指定tag\n\n$ git push [remote] [tag]\n\n# 提交所有tag\n\n$ git push [remote] --tags\n\n# 新建一个分支，指向某个tag\n\n$ git checkout -b [branch] [tag]\n## 七、查看信息\n\n# 显示有变更的文件\n\n$ git status\n\n# 显示当前分支的版本历史\n\n$ git log\n\n# 显示commit历史，以及每次commit发生变更的文件\n\n$ git log --stat\n\n# 搜索提交历史，根据关键词\n\n$ git log -S [keyword]\n\n# 显示某个commit之后的所有变动，每个commit占据一行\n\n$ git log [tag] HEAD --pretty=format:%s\n\n# 显示某个commit之后的所有变动，其\"提交说明\"必须符合搜索条件\n\n$ git log [tag] HEAD --grep feature\n\n# 显示某个文件的版本历史，包括文件改名\n\n$ git log --follow [file]$ git whatchanged [file]\n\n# 显示指定文件相关的每一次diff\n\n$ git log -p [file]\n\n# 显示过去5次提交\n\n$ git log -5 --pretty --oneline\n\n# 显示所有提交过的用户，按提交次数排序\n\n$ git shortlog -sn\n\n# 显示指定文件是什么人在什么时间修改过\n\n$ git blame [file]\n\n# 显示暂存区和工作区的差异\n\n$ git diff\n\n# 显示暂存区和上一个commit的差异\n\n$ git diff --cached [file]\n\n# 显示工作区与当前分支最新commit之间的差异\n\n$ git diff HEAD\n\n# 显示两次提交之间的差异\n\n$ git diff [first-branch]...[second-branch]\n\n# 显示今天你写了多少行代码\n\n$ git diff --shortstat \"@{0 day ago}\"\n\n# 显示某次提交的元数据和内容变化\n\n$ git show [commit]\n\n# 显示某次提交发生变化的文件\n\n$ git show --name-only [commit]\n\n# 显示某次提交时，某个文件的内容\n\n$ git show [commit]:[filename]\n\n# 显示当前分支的最近几次提交\n\n$ git reflog\n## 八、远程同步\n\n# 下载远程仓库的所有变动\n\n$ git fetch [remote]\n\n# 显示所有远程仓库\n\n$ git remote -v\n\n# 显示某个远程仓库的信息\n\n$ git remote show [remote]\n\n# 增加一个新的远程仓库，并命名\n\n$ git remote add [shortname] [url]\n\n# 取回远程仓库的变化，并与本地分支合并\n\n$ git pull [remote] [branch]\n\n# 上传本地指定分支到远程仓库\n\n$ git push [remote] [branch]\n\n# 强行推送当前分支到远程仓库，即使有冲突\n\n$ git push [remote] --force\n\n# 推送所有分支到远程仓库\n\n$ git push [remote] --all\n\n## 九、撤销\n\n# 恢复暂存区的指定文件到工作区\n\n$ git checkout [file]\n\n# 恢复某个commit的指定文件到暂存区和工作区\n\n$ git checkout [commit] [file]\n\n# 恢复暂存区的所有文件到工作区\n\n$ git checkout .\n\n# 重置暂存区的指定文件，与上一次commit保持一致，但工作区不变\n\n$ git reset [file]\n\n# 重置暂存区与工作区，与上一次commit保持一致\n\n$ git reset --hard\n\n# 重置当前分支的指针为指定commit，同时重置暂存区，但工作区不变\n\n$ git reset [commit]\n\n# 重置当前分支的HEAD为指定commit，同时重置暂存区和工作区，与指定commit一致\n\n$ git reset --hard [commit]\n\n# 重置当前HEAD为指定commit，但保持暂存区和工作区不变\n\n$ git reset --keep [commit]\n\n# 新建一个commit，用来撤销指定commit\n\n# 后者的所有变化都将被前者抵消，并且应用到当前分支\n\n$ git revert [commit]\n\n# 暂时将未提交的变化移除，稍后再移入\n\n$ git stash$ git stash pop\n## 十、其他\n\n# 生成一个可供发布的压缩包\n\n$ git archive\n","slug":"Git命令","published":1,"updated":"2021-04-09T16:38:36.503Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3dc00011a35wdhy4bfl"},{"title":"Moment.js-输出明天、今天和昨天","date":"2019-09-08T07:23:25.000Z","_content":"\n\n\n```js\nlet today     = moment(new Date());\n\nlet tomorrow  = moment(new Date()).add(1,'days');\n\nlet yesterday = moment(new Date()).add(-1, 'days');\n```\n\n\n\n\n\n```js\nimport moment from '@src/plugins/moment';\n\nfunction rangeDays(start, end, current) {\n  return current && (moment().subtract(start, 'days').valueOf() > current.valueOf() || moment().add(end, 'days').valueOf() < current.valueOf());\n}\n\n// 今天之前不可用\nexport const beforeToday = current => current && moment().subtract(1, 'days').valueOf() > current.valueOf();\n\n// 今天之前可用\nexport const afterToday = current => current && moment().subtract(1, 'days').valueOf() < current.valueOf();\n\n// 明天之前不可用\nexport const beforeTomorrow = current => current && current.valueOf() < Date.now();\n\n// 今天至6天后可用\nexport const fromTodayTo6Days = current => rangeDays(1, 6, current);\n\n// 今天至30天后可用\nexport const fromTodayTo30Days = current => rangeDays(1, 30, current);\n\n// 今天以后的一年可用\nexport const fromTodayTo1Year = current => rangeDays(1, 365, current);\n\n// 今天以后的两年可用\nexport const fromTodayTo2Years = current => rangeDays(1, 730, current);\n\n// 明天至30天后可用\nexport const fromTomorrowTo30Days = current => rangeDays(0, 30, current);\n\n// 禁用时间区域 从指定日期到昨天\n(current && current.valueOf() < moment(this.startDate)).valueOf() || current.valueOf() > moment().subtract(1, 'days').valueOf()\n```","source":"_posts/Moment-js-输出明天、今天和昨天.md","raw":"---\ntitle: Moment.js-输出明天、今天和昨天\ndate: 2019-09-08 15:23:25\ntags: [moment] \n---\n\n\n\n```js\nlet today     = moment(new Date());\n\nlet tomorrow  = moment(new Date()).add(1,'days');\n\nlet yesterday = moment(new Date()).add(-1, 'days');\n```\n\n\n\n\n\n```js\nimport moment from '@src/plugins/moment';\n\nfunction rangeDays(start, end, current) {\n  return current && (moment().subtract(start, 'days').valueOf() > current.valueOf() || moment().add(end, 'days').valueOf() < current.valueOf());\n}\n\n// 今天之前不可用\nexport const beforeToday = current => current && moment().subtract(1, 'days').valueOf() > current.valueOf();\n\n// 今天之前可用\nexport const afterToday = current => current && moment().subtract(1, 'days').valueOf() < current.valueOf();\n\n// 明天之前不可用\nexport const beforeTomorrow = current => current && current.valueOf() < Date.now();\n\n// 今天至6天后可用\nexport const fromTodayTo6Days = current => rangeDays(1, 6, current);\n\n// 今天至30天后可用\nexport const fromTodayTo30Days = current => rangeDays(1, 30, current);\n\n// 今天以后的一年可用\nexport const fromTodayTo1Year = current => rangeDays(1, 365, current);\n\n// 今天以后的两年可用\nexport const fromTodayTo2Years = current => rangeDays(1, 730, current);\n\n// 明天至30天后可用\nexport const fromTomorrowTo30Days = current => rangeDays(0, 30, current);\n\n// 禁用时间区域 从指定日期到昨天\n(current && current.valueOf() < moment(this.startDate)).valueOf() || current.valueOf() > moment().subtract(1, 'days').valueOf()\n```","slug":"Moment-js-输出明天、今天和昨天","published":1,"updated":"2021-04-09T16:39:07.513Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3dt00031a353ua4wc2k"},{"title":"CSS之img图片居中","date":"2019-09-08T07:26:12.000Z","_content":"\n\n\n原文链接：http://caibaojian.com/img-vertical-middle.html\n\n\n\n在[前端开发](http://caibaojian.com/)制作中，图片[垂直居中](http://caibaojian.com/t/垂直居中)对齐是很常见的，有些是固定高度，有些没有固定高度，本文分享我用的四种方法，希望对你有所启发。\n\n\n\n以下说的做法暂不考虑IE浏览器的兼容性，适用于移动端，对兼容性感兴趣的可以看之前的文章：[图片垂直居中对齐的3种方法](http://caibaojian.com/vertical-centering-with-css.html)\n\n\n\n以下的做法中假定外层的高度和宽度已经固定。通用[HTML](http://caibaojian.com/t/html)和[CSS](http://caibaojian.com/css3/)代码：\n\n\n\n```html\n<div class=\"img\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img {\n  width:300px;\n  height:300px;\n  margin:20px auto;\n  background:#00f;\n}\n```\n\n\n\n### 1.绝对定位+margin:auto\n\n\n\n利用图片相对于外层浮动，加上margin:auto.\n\n\n\n```html\n<div class=\"img img1\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n//code from http://caibaojian.com/img-vertical-middle.html\n.img1 {\n  position:relative;\n}\n.img1 img {\n  position:absolute;\n  top:0;\n  bottom:0;\n  left:0;\n  right:0;\n  margin:auto;\n}\n```\n\n\n\n[演示1](http://caibaojian.com/demo/2017/07/img1.html#demo1)\n\n\n\n### 2.flexbox\n\n\n\n利用flexbox里面的[垂直居中](http://caibaojian.com/t/垂直居中)属性：align-items:center(垂直居中)和justify-content:center(水平居中);[·](http://caibaojian.com/img-vertical-middle.html)\n\n\n\n```html\n<div class=\"img img2\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img2 {\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex-box;\n  display:flex;\n  -webkit-box-align:center;\n  -ms-flex-align:center;\n  align-items:center;\n  -webkit-box-pack:center;\n  -ms-flex-pack:center;\n  justify-content:center;\n  text-align:center;\n}\n```\n\n\n\n[演示2](http://caibaojian.com/demo/2017/07/img1.html#demo2)\n\n\n\n### 3.table-cell\n\n\n\n利用display:table-cell+图片vertical-align:middle\n\n\n\n```html\n<div class=\"img img3\">\n  <span class=\"icenter\"><img src=\"http://dummyimage.com/200x200/f66/\"/></span>\n</div>\n```\n\n\n\n```css\n.img3 .icenter {\n  display:table-cell;\n  vertical-align:middle;\n  text-align:center;\n  height:300px;\n  width:300px\n}\n.img3 img {\n  vertical-align:middle;\n  display:inline-block\n}\n```\n\n\n\n[演示3](http://caibaojian.com/demo/2017/07/img1.html#demo3)\n\n\n\n### 4.增加一个空白标签\n\n\n\n兼容性较好，支持IE浏览器\n\n\n\n```html\n<div class=\"img img4\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n  <i class=\"iblock\"></i>\n</div>\n```\n\n\n\n```css\n.img4 {\n  text-align:center\n}\n.img4 img {\n  vertical-align:middle\n}\n.img4 .iblock {\n  display:inline-block;\n  height:100%;\n  width:0;\n  vertical-align:middle\n}\n```\n\n","source":"_posts/CSS之img图片居中.md","raw":"---\ntitle: CSS之img图片居中\ndate: 2019-09-08 15:26:12\ntags: [css, img, 居中]\n---\n\n\n\n原文链接：http://caibaojian.com/img-vertical-middle.html\n\n\n\n在[前端开发](http://caibaojian.com/)制作中，图片[垂直居中](http://caibaojian.com/t/垂直居中)对齐是很常见的，有些是固定高度，有些没有固定高度，本文分享我用的四种方法，希望对你有所启发。\n\n\n\n以下说的做法暂不考虑IE浏览器的兼容性，适用于移动端，对兼容性感兴趣的可以看之前的文章：[图片垂直居中对齐的3种方法](http://caibaojian.com/vertical-centering-with-css.html)\n\n\n\n以下的做法中假定外层的高度和宽度已经固定。通用[HTML](http://caibaojian.com/t/html)和[CSS](http://caibaojian.com/css3/)代码：\n\n\n\n```html\n<div class=\"img\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img {\n  width:300px;\n  height:300px;\n  margin:20px auto;\n  background:#00f;\n}\n```\n\n\n\n### 1.绝对定位+margin:auto\n\n\n\n利用图片相对于外层浮动，加上margin:auto.\n\n\n\n```html\n<div class=\"img img1\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n//code from http://caibaojian.com/img-vertical-middle.html\n.img1 {\n  position:relative;\n}\n.img1 img {\n  position:absolute;\n  top:0;\n  bottom:0;\n  left:0;\n  right:0;\n  margin:auto;\n}\n```\n\n\n\n[演示1](http://caibaojian.com/demo/2017/07/img1.html#demo1)\n\n\n\n### 2.flexbox\n\n\n\n利用flexbox里面的[垂直居中](http://caibaojian.com/t/垂直居中)属性：align-items:center(垂直居中)和justify-content:center(水平居中);[·](http://caibaojian.com/img-vertical-middle.html)\n\n\n\n```html\n<div class=\"img img2\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img2 {\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex-box;\n  display:flex;\n  -webkit-box-align:center;\n  -ms-flex-align:center;\n  align-items:center;\n  -webkit-box-pack:center;\n  -ms-flex-pack:center;\n  justify-content:center;\n  text-align:center;\n}\n```\n\n\n\n[演示2](http://caibaojian.com/demo/2017/07/img1.html#demo2)\n\n\n\n### 3.table-cell\n\n\n\n利用display:table-cell+图片vertical-align:middle\n\n\n\n```html\n<div class=\"img img3\">\n  <span class=\"icenter\"><img src=\"http://dummyimage.com/200x200/f66/\"/></span>\n</div>\n```\n\n\n\n```css\n.img3 .icenter {\n  display:table-cell;\n  vertical-align:middle;\n  text-align:center;\n  height:300px;\n  width:300px\n}\n.img3 img {\n  vertical-align:middle;\n  display:inline-block\n}\n```\n\n\n\n[演示3](http://caibaojian.com/demo/2017/07/img1.html#demo3)\n\n\n\n### 4.增加一个空白标签\n\n\n\n兼容性较好，支持IE浏览器\n\n\n\n```html\n<div class=\"img img4\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n  <i class=\"iblock\"></i>\n</div>\n```\n\n\n\n```css\n.img4 {\n  text-align:center\n}\n.img4 img {\n  vertical-align:middle\n}\n.img4 .iblock {\n  display:inline-block;\n  height:100%;\n  width:0;\n  vertical-align:middle\n}\n```\n\n","slug":"CSS之img图片居中","published":1,"updated":"2021-04-09T15:49:52.935Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3e100041a35fj4bq8yg"},{"title":"HTML怎么多行显示三个点","date":"2019-09-08T07:05:44.000Z","_content":"\n限制在一个块元素显示的文本的行数。\n\n\n\n-webkit-line-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。\n\n\n\n为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性：\n\n\n\ndisplay: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。\n\n\n\n-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。\n\n\n\ntext-overflow，可以用来多行文本的情况下，用省略号“...”隐藏超出范围的文本 。\n\n#### css属性： **块元素**\n\n```css\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;//限制文本的行数，只显示两行\n-webkit-box-orient: vertical;\noverflow: hidden;\n```\n\n#### 如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：\n\n```css\n/* autoprefixer: off */\n  -webkit-box-orient: vertical;        // 参考 https://github.com/postcss/autoprefixer/issues/776\n/* autoprefixer: on */\t\n```\n\n#### 例子：\n\n```css\np{\n    /* autoprefixer: off */\n    -webkit-box-orient: vertical;\n    /* autoprefixer: on */\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    overflow: hidden;\n}\n```","source":"_posts/HTML怎么多行显示三个点.md","raw":"---\ntitle: HTML怎么多行显示三个点\ndate: 2019-09-08 15:05:44\ntags: [html, 多行, 三个点, ...]\n---\n\n限制在一个块元素显示的文本的行数。\n\n\n\n-webkit-line-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。\n\n\n\n为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性：\n\n\n\ndisplay: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。\n\n\n\n-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。\n\n\n\ntext-overflow，可以用来多行文本的情况下，用省略号“...”隐藏超出范围的文本 。\n\n#### css属性： **块元素**\n\n```css\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;//限制文本的行数，只显示两行\n-webkit-box-orient: vertical;\noverflow: hidden;\n```\n\n#### 如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：\n\n```css\n/* autoprefixer: off */\n  -webkit-box-orient: vertical;        // 参考 https://github.com/postcss/autoprefixer/issues/776\n/* autoprefixer: on */\t\n```\n\n#### 例子：\n\n```css\np{\n    /* autoprefixer: off */\n    -webkit-box-orient: vertical;\n    /* autoprefixer: on */\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    overflow: hidden;\n}\n```","slug":"HTML怎么多行显示三个点","published":1,"updated":"2021-04-09T15:49:52.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3e800051a352cj5hjmo"},{"title":"antd 之如何通过url生成upload的filelist","date":"2021-04-01T04:07:21.000Z","_content":"antd的upload组件在编辑回填数据的时候 往往得到的都是接口里返回的url而不是file，\n所以我们可以通过url来生成fileList\n```javascript\nfileList = [{uid:'0',name: url, status: 'done', url: url}]\n```\n\n\n","source":"_posts/antd之如何通过url生成upload的filelist.md","raw":"---\ntitle: antd 之如何通过url生成upload的filelist\ndate: 2021-04-01 12:07:21\ntags: [upload,fileList]\n---\nantd的upload组件在编辑回填数据的时候 往往得到的都是接口里返回的url而不是file，\n所以我们可以通过url来生成fileList\n```javascript\nfileList = [{uid:'0',name: url, status: 'done', url: url}]\n```\n\n\n","slug":"antd之如何通过url生成upload的filelist","published":1,"updated":"2021-04-09T16:36:12.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3ej00081a35pdbr25v5"},{"title":"JS如何通用判断数据类型","date":"2021-03-24T12:55:32.000Z","_content":"typeof对于原始类型（除了Null)是可以检测到的，但是引用类型就统一返回object\ninstance of 用于检测构造函数的原型是否出现在某个实例函数的原型链上\n最好的方法是使用 Object.prototype.toString方法，它可以检测到任何类型，\n返回的结果是[object Type]的形式,基本可以实现所有类型的检测\n```\nfunction type(data){\n  const toString = Object.prototype.toString;\n  const objType = toString.call(data);\n  const arr = objType.slice(1, -1).split(' ');\n  const type = arr[1].toLowerCase();\n    // const type = .call(data).slice(1,-1).split(' ')[1].toLowerCase()\n  return type;\n}\ntype([])\n\"array\"\ntype(123)\n\"number\"\ntype('123')\n\"string\"\ntype({})\n\"object\"\ntype(type)\n\"function\"\ntype(null)\n\"null\"\ntype(undefined)\n\"undefined\"\ntype(Symbol())\n\"symbol\"\n```\n","source":"_posts/JS如何通用判断数据类型.md","raw":"---\ntitle: JS如何通用判断数据类型\ndate: 2021-03-24 20:55:32\ntags: 数据类型\n---\ntypeof对于原始类型（除了Null)是可以检测到的，但是引用类型就统一返回object\ninstance of 用于检测构造函数的原型是否出现在某个实例函数的原型链上\n最好的方法是使用 Object.prototype.toString方法，它可以检测到任何类型，\n返回的结果是[object Type]的形式,基本可以实现所有类型的检测\n```\nfunction type(data){\n  const toString = Object.prototype.toString;\n  const objType = toString.call(data);\n  const arr = objType.slice(1, -1).split(' ');\n  const type = arr[1].toLowerCase();\n    // const type = .call(data).slice(1,-1).split(' ')[1].toLowerCase()\n  return type;\n}\ntype([])\n\"array\"\ntype(123)\n\"number\"\ntype('123')\n\"string\"\ntype({})\n\"object\"\ntype(type)\n\"function\"\ntype(null)\n\"null\"\ntype(undefined)\n\"undefined\"\ntype(Symbol())\n\"symbol\"\n```\n","slug":"JS如何通用判断数据类型","published":1,"updated":"2021-04-09T15:49:52.936Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3ev00091a35x5qv00o4"},{"title":"antd table列表分页删除时要注意的page current","date":"2019-11-23T02:55:42.000Z","_content":"\n### 当列表项被删除时判断删除后的page current 的取值:\n\n\n\n```js\n\nfunction getCurrentPage(total, pageSize, current){\n  const yu = total % pageSize\n  const maxPage = Math.ceil(total / pageSize)\n  // 如果最后一页只有一条并且此时在最后一页 或者 每一页都是一条 符合这个条件的可能要-1\n  if ((yu === 1 && maxPage === current) || pageSize === 1) {\n    current = current - 1 === 0 ? 1 : current - 1 \n  }\n  return current;\n}\n```\n\n","source":"_posts/antd的table列表分页删除时要注意的page,current.md","raw":"---\ntitle: antd table列表分页删除时要注意的page current\ndate: 2019-11-23 10:55:42\ntags: [antd, table, 分页]\n\n---\n\n### 当列表项被删除时判断删除后的page current 的取值:\n\n\n\n```js\n\nfunction getCurrentPage(total, pageSize, current){\n  const yu = total % pageSize\n  const maxPage = Math.ceil(total / pageSize)\n  // 如果最后一页只有一条并且此时在最后一页 或者 每一页都是一条 符合这个条件的可能要-1\n  if ((yu === 1 && maxPage === current) || pageSize === 1) {\n    current = current - 1 === 0 ? 1 : current - 1 \n  }\n  return current;\n}\n```\n\n","slug":"antd的table列表分页删除时要注意的page,current","published":1,"updated":"2021-04-09T16:38:17.497Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3f4000b1a35qohwu1ig"},{"title":"antd 之Alert警告提示框如何给内容添加链接","date":"2019-09-08T06:34:55.000Z","_content":"\n### 看antd的官方文档知道 message 就是 React.Node\n\n```jsx\nconst message =  (\n  <div>\n    请完善你们的企业信息 >><Link href=\"/message/baseinfo\">我要完善</Link>;\n  </div>\n );\n\n<Alert message={message} type=\"warning\" />\n```\n\n\n\n```jsX\nrender() {\n  const {\n    header,\n    freshFlag\n  } = this.Store;\n\n  const message = (\n    <div>\n      xxxxxxxxxxxxx<a href='#'>点我</a>xxxxxxxxxx\n    </div>\n  )\n\n  return (\n    <div className=\"Create-App-Page\" data-fresh={freshFlag}>\n      <Commonheader {...header} />\n      <Alert showIcon type=\"info\" closable message={ message }  className=\"Alert\"/>\n      <ContentWrap newclass=\"newclass\">\n      </ContentWrap>\n    </div>\n  );\n}\n```\n\n","source":"_posts/antd之Alert警告提示框如何给内容添加链接.md","raw":"---\ntitle: antd 之Alert警告提示框如何给内容添加链接\ndate: 2019-09-08 14:34:55\ntags: [antd, Alert, 链接]\n---\n\n### 看antd的官方文档知道 message 就是 React.Node\n\n```jsx\nconst message =  (\n  <div>\n    请完善你们的企业信息 >><Link href=\"/message/baseinfo\">我要完善</Link>;\n  </div>\n );\n\n<Alert message={message} type=\"warning\" />\n```\n\n\n\n```jsX\nrender() {\n  const {\n    header,\n    freshFlag\n  } = this.Store;\n\n  const message = (\n    <div>\n      xxxxxxxxxxxxx<a href='#'>点我</a>xxxxxxxxxx\n    </div>\n  )\n\n  return (\n    <div className=\"Create-App-Page\" data-fresh={freshFlag}>\n      <Commonheader {...header} />\n      <Alert showIcon type=\"info\" closable message={ message }  className=\"Alert\"/>\n      <ContentWrap newclass=\"newclass\">\n      </ContentWrap>\n    </div>\n  );\n}\n```\n\n","slug":"antd之Alert警告提示框如何给内容添加链接","published":1,"updated":"2021-04-09T15:49:52.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3fb000d1a359lveq6rx"},{"title":"antd之table组件的columns属性filter","date":"2019-09-08T06:23:57.000Z","_content":"\n## filteredValue\n官方解释:\n\n> 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组     string[]\n\n  **外界通过此属性,去设置筛选的value值(可多选)**\n\n## filters\n官方解释:\n\n> 表头的筛选菜单项\n\n  **设置要筛选的value值,会出现筛选的图标,里面的项为value值, 如果外界通过filteredValue来筛选此值也可不设置**\n\n## onFilter\n官方解释:\n\n> 本地模式下，确定筛选的运行函数\n\n  **filter的回调函数(value,record) 两个参数,record为这一行,value为fitlers或filteredValue里面值,通过此值来    筛选record里面的项**\n\n","source":"_posts/antd之table组件的columns属性filter.md","raw":"---\ntitle: antd之table组件的columns属性filter\ndate: 2019-09-08 14:23:57\ntags: [antd, table, columns, filter]\n---\n\n## filteredValue\n官方解释:\n\n> 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组     string[]\n\n  **外界通过此属性,去设置筛选的value值(可多选)**\n\n## filters\n官方解释:\n\n> 表头的筛选菜单项\n\n  **设置要筛选的value值,会出现筛选的图标,里面的项为value值, 如果外界通过filteredValue来筛选此值也可不设置**\n\n## onFilter\n官方解释:\n\n> 本地模式下，确定筛选的运行函数\n\n  **filter的回调函数(value,record) 两个参数,record为这一行,value为fitlers或filteredValue里面值,通过此值来    筛选record里面的项**\n\n","slug":"antd之table组件的columns属性filter","published":1,"updated":"2021-04-09T15:49:52.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3fk000f1a35nvcs8fhc"},{"title":"antd的坑之table scroll 和fixed列重叠","date":"2021-04-01T04:07:21.000Z","_content":"这个时候可以设置table的scroll属性为 { x: 'max-content' };\n\n","source":"_posts/antd的坑之table的scroll和fixed列重叠.md","raw":"---\ntitle: antd的坑之table scroll 和fixed列重叠\ndate: 2021-04-01 12:07:21\ntags: [table]\n---\n这个时候可以设置table的scroll属性为 { x: 'max-content' };\n\n","slug":"antd的坑之table的scroll和fixed列重叠","published":1,"updated":"2021-04-09T16:38:01.539Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3fy000h1a35rbqp6pj7"},{"title":"antd 之table sort 鼠标放上去提示修改","date":"2019-09-08T06:31:17.000Z","_content":"\n```jsx\nimport React from 'react';\nimport { Table } from 'antd';\n\nconst DEFAULTPROPS = {\n  locale: {\n    emptyText: '暂无数据',\n    sortTitle:'' //为空不显示提示\n  }\n}\n\n\nexport default class TableCmp extends React.Component {\n  render = () => {\n    return (\n      <Table {DEFAULTPROPS} />\n    )\n  }\n}\n```\n\n","source":"_posts/antd之鼠标放上去提示修改.md","raw":"---\ntitle: antd 之table sort 鼠标放上去提示修改\ndate: 2019-09-08 14:31:17\ntags: [antd, table, sort, 提示]\n---\n\n```jsx\nimport React from 'react';\nimport { Table } from 'antd';\n\nconst DEFAULTPROPS = {\n  locale: {\n    emptyText: '暂无数据',\n    sortTitle:'' //为空不显示提示\n  }\n}\n\n\nexport default class TableCmp extends React.Component {\n  render = () => {\n    return (\n      <Table {DEFAULTPROPS} />\n    )\n  }\n}\n```\n\n","slug":"antd之鼠标放上去提示修改","published":1,"updated":"2021-04-09T15:49:52.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3g6000j1a35ynrtq5t7"},{"title":"a标签实现下载文件","date":"2019-11-23T02:53:30.000Z","_content":"\n```html\n<a href=\"url\" download=\"233233\">233</a>\n```\n\n\n\nhref: 文件地址 注意 这个链接要和所在服务器 为同源 否则等同于跳转\n\ndownload: 此属性当href同源是为下载， 否则无效\n\n","source":"_posts/a标签实现下载文件.md","raw":"---\ntitle: a标签实现下载文件\ndate: 2019-11-23 10:53:30\ntags: [a, 下载]\n---\n\n```html\n<a href=\"url\" download=\"233233\">233</a>\n```\n\n\n\nhref: 文件地址 注意 这个链接要和所在服务器 为同源 否则等同于跳转\n\ndownload: 此属性当href同源是为下载， 否则无效\n\n","slug":"a标签实现下载文件","published":1,"updated":"2021-04-09T16:37:52.515Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3gd000k1a35i9jtn0so"},{"title":"antd的坑之checkbox的冒泡和捕获问题","date":"2019-09-08T06:29:48.000Z","_content":"\n可以在checkbox里面添加event\n\nonClick=(e) =>e.stopPropagation()\n\n只能阻止checkbox不能阻止里面的lable\n\n\n\nstopPropagation()函数用于**阻止当前事件在DOM树上冒泡**。\n\n\n\n使用stopPropagation()函数可以阻止当前事件向祖辈元素的冒泡传递，也就是说该事件不会触发执行当前元素的任何祖辈元素的任何事件处理函数。\n\n\n\n如果antd里面的组件里面还有label之类的则添加阻止冒泡事件不能添加到组件内部，所以还会产生冒泡\n\n\n\n可以根据stopPropagaion的原理只阻止祖辈元素的冒泡传递，可以在组件外部添加一个div\n\n在div上添加对应事件添加stopPropagaion即可阻止冒泡向上传递","source":"_posts/antd的坑之checkbox的冒泡和捕获问题.md","raw":"---\ntitle: antd的坑之checkbox的冒泡和捕获问题\ndate: 2019-09-08 14:29:48\ntags: [antd, checkbox, 冒泡, 捕获]\n---\n\n可以在checkbox里面添加event\n\nonClick=(e) =>e.stopPropagation()\n\n只能阻止checkbox不能阻止里面的lable\n\n\n\nstopPropagation()函数用于**阻止当前事件在DOM树上冒泡**。\n\n\n\n使用stopPropagation()函数可以阻止当前事件向祖辈元素的冒泡传递，也就是说该事件不会触发执行当前元素的任何祖辈元素的任何事件处理函数。\n\n\n\n如果antd里面的组件里面还有label之类的则添加阻止冒泡事件不能添加到组件内部，所以还会产生冒泡\n\n\n\n可以根据stopPropagaion的原理只阻止祖辈元素的冒泡传递，可以在组件外部添加一个div\n\n在div上添加对应事件添加stopPropagaion即可阻止冒泡向上传递","slug":"antd的坑之checkbox的冒泡和捕获问题","published":1,"updated":"2021-04-09T15:49:52.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3gk000l1a35nou36tyo"},{"title":"hooks和Ts","date":"2021-03-24T15:27:52.000Z","_content":"<a name=\"Y6XDX\"></a>\n### useState\n```javascript\nimport React from 'react'\n\ntype UserInfo = {\n  name: string,\n  age: number,\n}\n\nexport const User:React.FC<UserInfo> = ({ name, age }) => {\n  return (\n    <div className=\"User\">\n      <p>{ name }</p>\n      <p>{ age }</p>\n    </div>\n  )\n}\n\nconst user = <User name='vortesnail' age={25} />\n\n```\n\n- 在我们的参数为对象类型时，需要特别注意的是， `setXxx` 并不会像 `this.setState` 合并旧的状态，它是完全替代了旧的状态，所以我们要实现合并，可以这样写\n```javascript\nsetArticle({\n  title: '下一篇',\n  content: '下一篇的内容',\n  ...article\n})\n```\n<a name=\"5efa7793\"></a>\n### 为啥使用useEffect?\n你可以把 `useEffect` 看做 `componentDidMount` ， `componentDidUpdate` 和 `componentWillUnmount` 这三个函数的组合。<br />\n\n<a name=\"756dc977\"></a>\n### 怎么使用useEffect?\n```\nuseEffect(() => {\n  ...\n  return () => {...}\n},[...])\n```\n\n- 每当状态改变 每次都执行useEffect\n```javascript\nimport React, { useState, useEffect } from 'react'\n\nlet switchCount: number = 0\n\nconst User = () => {\n  const [name, setName] = useState<string>('')\n  useEffect(() => {\n    switchCount += 1\n  })\n\n  return (\n    <div>\n      <p>Current Name: { name }</p>\n      <p>switchCount: { switchCount }</p>\n      <button onClick={() => setName('Jack')}>Jack</button>\n      <button onClick={() => setName('Marry')}>Marry</button>\n    </div>\n  )\n}\n\nexport default User\n```\n\n- 只执行一次 useEffect\n```javascript\nuseEffect(() => {\n  switchCount += 1\n}, [])\n```\n\n- 根据某个状态去改变 只有该状态改变 useEffect才会执行\n```javascript\nconst [value, setValue] = useState<string>('I never change')\nuseEffect(() => {\n  switchCount += 1\n}, [value])\n```\n\n- 组件卸载时处理一些内存问题，比如清除定时器、清除事件监听 需要卸载的时候要处理一些事件的时候需要return\n```javascript\nuseEffect(() => {\n  const handler = () => {\n    document.title = Math.random().toString()\n  }\n\n  window.addEventListener('resize', handler)\n\n  return () => {\n    window.removeEventListener('resize', handler)\n  }\n}, [])\n\n```\n<a name=\"V2lmw\"></a>\n## useRef\n<a name=\"ZszIx\"></a>\n### 为啥使用useRef?\n它不仅仅是用来管理 DOM ref 的，它还相当于 this , 可以存放任何变量，很好的解决闭包带来的不方便性。\n<a name=\"6Mz2f\"></a>\n### 怎么使用useRef?\n```\nconst [count, setCount] = useState<number>(0)\nconst countRef = useRef<number>(count)\n复制代码\n```\n<a name=\"sp4Se\"></a>\n### 场景举例\n<a name=\"wl3x8\"></a>\n##### 1.闭包问题：\n想想看，我们先点击 **加** 按钮 3 次，再点 **弹框显示** 1次，再点 **加** 按钮 2 次，最终 `alert` 会是什么结果？\n```\nimport React, { useState, useEffect, useRef } from 'react'\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + count)\n    }, 3000);\n  }\n  return (\n    <div>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n      <button onClick={() => handleCount()}>弹框显示</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n结果是弹框内容为 **current count: 3** ，为什么？\n> 当我们更新状态的时候, **React 会重新渲染组件, 每一次渲染都会拿到独立的 count 状态,  并重新渲染一个  handleCount 函数.  每一个 handleCount 里面都有它自己的 count 。**\n\n** 那如何显示最新的当前 count 呢？\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const countRef = useRef<number>(count)\n  useEffect(() => {\n    countRef.current = count\n  })\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + countRef.current)\n    }, 3000);\n  }\n  //...\n}\nexport default Counter\n复制代码\n```\n<a name=\"Fhl8b\"></a>\n##### 2.因为变更 `.current` 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const preCountRef = useRef<number>(count)\n  useEffect(() => {\n    preCountRef.current = count\n  })\n  return (\n    <div>\n      <p>pre count: { preCountRef.current }</p>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n    </div>\n  )\n}\n复制代码\n```\n我们可以看到，显示的总是状态的前一个值：<br />![](https://cdn.nlark.com/yuque/0/2020/webp/206259/1602836948895-4537e142-aa02-4c5f-be00-0a899ee3cf16.webp#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=212&originWidth=344&size=0&status=done&style=none&width=344)\n<a name=\"Xvb5c\"></a>\n##### 3.操作 Dom 节点，类似 createRef()：\n```\nimport React, { useRef } from 'react'\nconst TextInput = () => {\n  const inputEl = useRef<HTMLInputElement>(null)\n  const onFocusClick = () => {\n    if(inputEl && inputEl.current) {\n      inputEl.current.focus()\n    } \n  }\n  return (\n    <div>\n      <input type=\"text\" ref={inputEl}/>\n      <button onClick={onFocusClick}>Focus the input</button>\n    </div>\n  )\n}\nexport default TextInput\n复制代码\n```\n<a name=\"WOf6t\"></a>\n## useMemo\n<a name=\"efknj\"></a>\n### 为啥使用useMemo?\n从 **useEffect** 可以知道，可以通过向其传递一些参数来影响某些函数的执行。 React 检查这些参数是否已更改，并且只有在存在差异的情况下才会执行此。<br />**useMemo** 做类似的事情，假设有大量方法，并且只想在其参数更改时运行它们，而不是每次组件更新时都运行它们，那就可以使用 **useMemo** 来进行性能优化。\n> 记住，传入 `useMemo` 的函数会在**渲染期间执行**。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 `useEffect` 的适用范畴，而不是 `useMemo` 。\n\n<a name=\"WCw2S\"></a>\n### 怎么使用useMemo?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst newName = useMemo(() => {\n\treturn changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"OVvUh\"></a>\n### 场景举例\n<a name=\"wDl3N\"></a>\n##### 1.常规使用，避免重复执行没必要的方法：\n我们先来看一个很简单的例子，以下是还未使用 `useMemo` 的代码：\n```\nimport React, { useState, useMemo } from 'react'\n// 父组件\nconst Example = () => {\n  const [time, setTime] = useState<number>(0)\n  const [random, setRandom] = useState<number>(0)\n  return (\n    <div>\n      <button onClick={() => setTime(new Date().getTime())}>获取当前时间</button>\n      <button onClick={() => setRandom(Math.random())}>获取当前随机数</button>\n      <Show time={time}>{random}</Show>\n    </div>\n  )\n}\ntype Data = {\n  time: number\n}\n// 子组件\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  return (\n    <div>\n      <p>Time is: { changeTime(time) }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\nexport default Example\n复制代码\n```\n在这个例子中，无论你点击的是 **获取当前时间** 按钮还是 **获取当前随机数** 按钮， `<Show />` 这个组件中的方法 `changeTime` 都会执行。<br />但事实上，点击 **获取当前随机数** 按钮改变的只会是 `children` 这个参数，但我们的 `changeTime` 也会因为子组件的重新渲染而重新执行，这个操作是很没必要的，消耗了无关的性能。<br />使用 `useMemo` 改造我们的 `<Show />` 子组件：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  return (\n    <div>\n      <p>Time is: { newTime }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n这个时候只有点击 **获取当前时间** 才会执行 `changeTime` 这个函数，而点击 **获取当前随机数** 已经不会触发该函数执行了。\n<a name=\"16VwH\"></a>\n##### 2.你可能会好奇， `useMemo` 能做的难道不能用 `useEffect` 来做吗？\n答案是否定的！如果你在子组件中加入以下代码：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n\t//...\n  \n  useEffect(() => {\n    console.log('effect function here...')\n  }, [time])\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  \n\t//...\n}\n复制代码\n```\n你会发现，控制台会打印如下信息：\n```\n> changeTime excuted...\n> effect function here...\n复制代码\n```\n正如我们一开始说的：传入 `useMemo` 的函数会在**渲染期间执行**。 在此不得不提 `React.memo` ，它的作用是实现整个组件的 `Pure` 功能：\n```\nconst Show:React.FC<Data> = React.memo(({ time, children }) => {...}\n复制代码\n```\n所以简单用一句话来概括 `useMemo` 和 `React.memo` 的区别就是：前者在某些情况下不希望组件对所有 `props` 做浅比较，只想实现局部 `Pure` 功能，即只想对特定的 `props` 做比较，并决定是否局部更新。\n<a name=\"tFpIu\"></a>\n## useCallback\n<a name=\"fkNyV\"></a>\n### 为啥使用useCallback?\n`useMemo` 和 `useCallback` 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 `useMemo` 返回的是函数运行的结果， `useCallback` 返回的是函数。\n> useCallback(fn, deps) 相当于 useMemo(() => fn, deps)\n\n<a name=\"TZOSP\"></a>\n### 怎么使用useCallback?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst getNewName = useMemo(() => {\n  return changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"J1yKA\"></a>\n### 场景举例\n将之前 `useMemo` 的例子，改一下子组件以下地方就OK了：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  //...\n  const getNewTime = useCallback(() => changeTime(time), [time])\n  return (\n    <div>\n      <p>Time is: { getNewTime() }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n<a name=\"nW3xY\"></a>\n## useReducer\n<a name=\"LTBBo\"></a>\n### 为什么使用useReducer?\n有没有想过你在某个组件里写了很多很多的 `useState` 是什么观感？比如以下：\n```\nconst [name, setName] = useState<string>('')\nconst [islogin, setIsLogin] = useState<boolean>(false)\nconst [avatar, setAvatar] = useState<string>('')\nconst [age, setAge] = useState<number>(0)\n//...\n复制代码\n```\n<a name=\"6etYW\"></a>\n### 怎么使用useReducer?\n```\nimport React, { useState, useReducer } from 'react'\ntype StateType = {\n  count: number\n}\ntype ActionType = {\n  type: 'reset' | 'decrement' | 'increment'\n}\nconst initialState = { count: 0 }\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    case 'reset':\n      return initialState\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return state\n  }\n}\nfunction Counter({ initialCount = 0}) {\n  const [state, dispatch] = useReducer(reducer, { count: initialCount })\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n<a name=\"V7CtP\"></a>\n### 场景举例：\n与 `useContext` 结合代替 Redux 方案，往下阅读。\n<a name=\"nzCzR\"></a>\n## useContext\n<a name=\"ovovY\"></a>\n### 为啥使用useContext?\n简单来说 `Context` 的作用就是对它所包含的组件树提供全局共享数据的一种技术。\n<a name=\"vpfrh\"></a>\n### 怎么使用useContext？\n```\nexport const ColorContext = React.createContext({ color: '#1890ff' })\nconst { color } = useContext(ColorContext)\n// 或\nexport const ColorContext = React.createContext(null)\n<ColorContext.Provider value='#1890ff'>\n  <App />\n</ColorContext.Provider>\n// App 或以下的所有子组件都可拿到 value\nconst color = useContext(ColorContext) // '#1890ff'\n复制代码\n```\n<a name=\"Dknz0\"></a>\n### 场景举例\n<a name=\"eaUTS\"></a>\n##### 1.根组件注册，所有子组件都可拿到注册的值：\n```\nimport React, { useContext } from 'react'\nconst ColorContext = React.createContext<string>('')\nconst App = () => {\n  return (\n    <ColorContext.Provider value='#1890ff'>\n      <Father />\n    </ColorContext.Provider>\n  )\n}\nconst Father = () => {\n  return (\n    <Child />\n  )\n}\nconst Child = () => {\n  const color = useContext(ColorContext)\n  return (\n    <div style={{ backgroundColor: color }}>Background color is: { color }</div>\n  )\n}\nexport default App\n复制代码\n```\n<a name=\"Lz4av\"></a>\n##### 2.配合 `useReducer` 实现 Redux 的代替方案：\n```\nimport React, { useReducer, useContext } from 'react'\nconst UPDATE_COLOR = 'UPDATE_COLOR'\ntype StateType = {\n  color: string\n}\ntype ActionType = {\n  type: string,\n  color: string\n}\ntype MixStateAndDispatch = {\n  state: StateType,\n  dispatch?: React.Dispatch<ActionType>\n}\nconst reducer = (state: StateType, action: ActionType) => {\n  switch(action.type) {\n    case UPDATE_COLOR:\n      return { color: action.color }\n    default:\n      return state  \n  }\n}\nconst ColorContext = React.createContext<MixStateAndDispatch>({\n  state: { color: 'black' },\n})\nconst Show = () => {\n  const { state, dispatch } = useContext(ColorContext)\n  return (\n    <div style={{ color: state.color }}>\n      当前字体颜色为: {state.color}\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'red'})}>红色</button>\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'green'})}>绿色</button>\n    </div>\n  )\n}\nconst Example = ({ initialColor = '#000000' }) => {\n  const [state, dispatch] = useReducer(reducer, { color: initialColor })\n  return (\n    <ColorContext.Provider value={{state, dispatch}}>\n      <div>\n        <Show />\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'blue'})}>蓝色</button>\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'lightblue'})}>轻绿色</button>\n      </div>\n    </ColorContext.Provider>\n  )\n}\nexport default Example\n```\n\n\n\n\n","source":"_posts/hooksAndTs.md","raw":"---\ntitle: hooks和Ts\ndate: 2021-03-24 23:27:52\ntags: [ts, hooks]\n---\n<a name=\"Y6XDX\"></a>\n### useState\n```javascript\nimport React from 'react'\n\ntype UserInfo = {\n  name: string,\n  age: number,\n}\n\nexport const User:React.FC<UserInfo> = ({ name, age }) => {\n  return (\n    <div className=\"User\">\n      <p>{ name }</p>\n      <p>{ age }</p>\n    </div>\n  )\n}\n\nconst user = <User name='vortesnail' age={25} />\n\n```\n\n- 在我们的参数为对象类型时，需要特别注意的是， `setXxx` 并不会像 `this.setState` 合并旧的状态，它是完全替代了旧的状态，所以我们要实现合并，可以这样写\n```javascript\nsetArticle({\n  title: '下一篇',\n  content: '下一篇的内容',\n  ...article\n})\n```\n<a name=\"5efa7793\"></a>\n### 为啥使用useEffect?\n你可以把 `useEffect` 看做 `componentDidMount` ， `componentDidUpdate` 和 `componentWillUnmount` 这三个函数的组合。<br />\n\n<a name=\"756dc977\"></a>\n### 怎么使用useEffect?\n```\nuseEffect(() => {\n  ...\n  return () => {...}\n},[...])\n```\n\n- 每当状态改变 每次都执行useEffect\n```javascript\nimport React, { useState, useEffect } from 'react'\n\nlet switchCount: number = 0\n\nconst User = () => {\n  const [name, setName] = useState<string>('')\n  useEffect(() => {\n    switchCount += 1\n  })\n\n  return (\n    <div>\n      <p>Current Name: { name }</p>\n      <p>switchCount: { switchCount }</p>\n      <button onClick={() => setName('Jack')}>Jack</button>\n      <button onClick={() => setName('Marry')}>Marry</button>\n    </div>\n  )\n}\n\nexport default User\n```\n\n- 只执行一次 useEffect\n```javascript\nuseEffect(() => {\n  switchCount += 1\n}, [])\n```\n\n- 根据某个状态去改变 只有该状态改变 useEffect才会执行\n```javascript\nconst [value, setValue] = useState<string>('I never change')\nuseEffect(() => {\n  switchCount += 1\n}, [value])\n```\n\n- 组件卸载时处理一些内存问题，比如清除定时器、清除事件监听 需要卸载的时候要处理一些事件的时候需要return\n```javascript\nuseEffect(() => {\n  const handler = () => {\n    document.title = Math.random().toString()\n  }\n\n  window.addEventListener('resize', handler)\n\n  return () => {\n    window.removeEventListener('resize', handler)\n  }\n}, [])\n\n```\n<a name=\"V2lmw\"></a>\n## useRef\n<a name=\"ZszIx\"></a>\n### 为啥使用useRef?\n它不仅仅是用来管理 DOM ref 的，它还相当于 this , 可以存放任何变量，很好的解决闭包带来的不方便性。\n<a name=\"6Mz2f\"></a>\n### 怎么使用useRef?\n```\nconst [count, setCount] = useState<number>(0)\nconst countRef = useRef<number>(count)\n复制代码\n```\n<a name=\"sp4Se\"></a>\n### 场景举例\n<a name=\"wl3x8\"></a>\n##### 1.闭包问题：\n想想看，我们先点击 **加** 按钮 3 次，再点 **弹框显示** 1次，再点 **加** 按钮 2 次，最终 `alert` 会是什么结果？\n```\nimport React, { useState, useEffect, useRef } from 'react'\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + count)\n    }, 3000);\n  }\n  return (\n    <div>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n      <button onClick={() => handleCount()}>弹框显示</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n结果是弹框内容为 **current count: 3** ，为什么？\n> 当我们更新状态的时候, **React 会重新渲染组件, 每一次渲染都会拿到独立的 count 状态,  并重新渲染一个  handleCount 函数.  每一个 handleCount 里面都有它自己的 count 。**\n\n** 那如何显示最新的当前 count 呢？\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const countRef = useRef<number>(count)\n  useEffect(() => {\n    countRef.current = count\n  })\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + countRef.current)\n    }, 3000);\n  }\n  //...\n}\nexport default Counter\n复制代码\n```\n<a name=\"Fhl8b\"></a>\n##### 2.因为变更 `.current` 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const preCountRef = useRef<number>(count)\n  useEffect(() => {\n    preCountRef.current = count\n  })\n  return (\n    <div>\n      <p>pre count: { preCountRef.current }</p>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n    </div>\n  )\n}\n复制代码\n```\n我们可以看到，显示的总是状态的前一个值：<br />![](https://cdn.nlark.com/yuque/0/2020/webp/206259/1602836948895-4537e142-aa02-4c5f-be00-0a899ee3cf16.webp#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=212&originWidth=344&size=0&status=done&style=none&width=344)\n<a name=\"Xvb5c\"></a>\n##### 3.操作 Dom 节点，类似 createRef()：\n```\nimport React, { useRef } from 'react'\nconst TextInput = () => {\n  const inputEl = useRef<HTMLInputElement>(null)\n  const onFocusClick = () => {\n    if(inputEl && inputEl.current) {\n      inputEl.current.focus()\n    } \n  }\n  return (\n    <div>\n      <input type=\"text\" ref={inputEl}/>\n      <button onClick={onFocusClick}>Focus the input</button>\n    </div>\n  )\n}\nexport default TextInput\n复制代码\n```\n<a name=\"WOf6t\"></a>\n## useMemo\n<a name=\"efknj\"></a>\n### 为啥使用useMemo?\n从 **useEffect** 可以知道，可以通过向其传递一些参数来影响某些函数的执行。 React 检查这些参数是否已更改，并且只有在存在差异的情况下才会执行此。<br />**useMemo** 做类似的事情，假设有大量方法，并且只想在其参数更改时运行它们，而不是每次组件更新时都运行它们，那就可以使用 **useMemo** 来进行性能优化。\n> 记住，传入 `useMemo` 的函数会在**渲染期间执行**。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 `useEffect` 的适用范畴，而不是 `useMemo` 。\n\n<a name=\"WCw2S\"></a>\n### 怎么使用useMemo?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst newName = useMemo(() => {\n\treturn changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"OVvUh\"></a>\n### 场景举例\n<a name=\"wDl3N\"></a>\n##### 1.常规使用，避免重复执行没必要的方法：\n我们先来看一个很简单的例子，以下是还未使用 `useMemo` 的代码：\n```\nimport React, { useState, useMemo } from 'react'\n// 父组件\nconst Example = () => {\n  const [time, setTime] = useState<number>(0)\n  const [random, setRandom] = useState<number>(0)\n  return (\n    <div>\n      <button onClick={() => setTime(new Date().getTime())}>获取当前时间</button>\n      <button onClick={() => setRandom(Math.random())}>获取当前随机数</button>\n      <Show time={time}>{random}</Show>\n    </div>\n  )\n}\ntype Data = {\n  time: number\n}\n// 子组件\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  return (\n    <div>\n      <p>Time is: { changeTime(time) }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\nexport default Example\n复制代码\n```\n在这个例子中，无论你点击的是 **获取当前时间** 按钮还是 **获取当前随机数** 按钮， `<Show />` 这个组件中的方法 `changeTime` 都会执行。<br />但事实上，点击 **获取当前随机数** 按钮改变的只会是 `children` 这个参数，但我们的 `changeTime` 也会因为子组件的重新渲染而重新执行，这个操作是很没必要的，消耗了无关的性能。<br />使用 `useMemo` 改造我们的 `<Show />` 子组件：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  return (\n    <div>\n      <p>Time is: { newTime }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n这个时候只有点击 **获取当前时间** 才会执行 `changeTime` 这个函数，而点击 **获取当前随机数** 已经不会触发该函数执行了。\n<a name=\"16VwH\"></a>\n##### 2.你可能会好奇， `useMemo` 能做的难道不能用 `useEffect` 来做吗？\n答案是否定的！如果你在子组件中加入以下代码：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n\t//...\n  \n  useEffect(() => {\n    console.log('effect function here...')\n  }, [time])\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  \n\t//...\n}\n复制代码\n```\n你会发现，控制台会打印如下信息：\n```\n> changeTime excuted...\n> effect function here...\n复制代码\n```\n正如我们一开始说的：传入 `useMemo` 的函数会在**渲染期间执行**。 在此不得不提 `React.memo` ，它的作用是实现整个组件的 `Pure` 功能：\n```\nconst Show:React.FC<Data> = React.memo(({ time, children }) => {...}\n复制代码\n```\n所以简单用一句话来概括 `useMemo` 和 `React.memo` 的区别就是：前者在某些情况下不希望组件对所有 `props` 做浅比较，只想实现局部 `Pure` 功能，即只想对特定的 `props` 做比较，并决定是否局部更新。\n<a name=\"tFpIu\"></a>\n## useCallback\n<a name=\"fkNyV\"></a>\n### 为啥使用useCallback?\n`useMemo` 和 `useCallback` 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 `useMemo` 返回的是函数运行的结果， `useCallback` 返回的是函数。\n> useCallback(fn, deps) 相当于 useMemo(() => fn, deps)\n\n<a name=\"TZOSP\"></a>\n### 怎么使用useCallback?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst getNewName = useMemo(() => {\n  return changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"J1yKA\"></a>\n### 场景举例\n将之前 `useMemo` 的例子，改一下子组件以下地方就OK了：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  //...\n  const getNewTime = useCallback(() => changeTime(time), [time])\n  return (\n    <div>\n      <p>Time is: { getNewTime() }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n<a name=\"nW3xY\"></a>\n## useReducer\n<a name=\"LTBBo\"></a>\n### 为什么使用useReducer?\n有没有想过你在某个组件里写了很多很多的 `useState` 是什么观感？比如以下：\n```\nconst [name, setName] = useState<string>('')\nconst [islogin, setIsLogin] = useState<boolean>(false)\nconst [avatar, setAvatar] = useState<string>('')\nconst [age, setAge] = useState<number>(0)\n//...\n复制代码\n```\n<a name=\"6etYW\"></a>\n### 怎么使用useReducer?\n```\nimport React, { useState, useReducer } from 'react'\ntype StateType = {\n  count: number\n}\ntype ActionType = {\n  type: 'reset' | 'decrement' | 'increment'\n}\nconst initialState = { count: 0 }\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    case 'reset':\n      return initialState\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return state\n  }\n}\nfunction Counter({ initialCount = 0}) {\n  const [state, dispatch] = useReducer(reducer, { count: initialCount })\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n<a name=\"V7CtP\"></a>\n### 场景举例：\n与 `useContext` 结合代替 Redux 方案，往下阅读。\n<a name=\"nzCzR\"></a>\n## useContext\n<a name=\"ovovY\"></a>\n### 为啥使用useContext?\n简单来说 `Context` 的作用就是对它所包含的组件树提供全局共享数据的一种技术。\n<a name=\"vpfrh\"></a>\n### 怎么使用useContext？\n```\nexport const ColorContext = React.createContext({ color: '#1890ff' })\nconst { color } = useContext(ColorContext)\n// 或\nexport const ColorContext = React.createContext(null)\n<ColorContext.Provider value='#1890ff'>\n  <App />\n</ColorContext.Provider>\n// App 或以下的所有子组件都可拿到 value\nconst color = useContext(ColorContext) // '#1890ff'\n复制代码\n```\n<a name=\"Dknz0\"></a>\n### 场景举例\n<a name=\"eaUTS\"></a>\n##### 1.根组件注册，所有子组件都可拿到注册的值：\n```\nimport React, { useContext } from 'react'\nconst ColorContext = React.createContext<string>('')\nconst App = () => {\n  return (\n    <ColorContext.Provider value='#1890ff'>\n      <Father />\n    </ColorContext.Provider>\n  )\n}\nconst Father = () => {\n  return (\n    <Child />\n  )\n}\nconst Child = () => {\n  const color = useContext(ColorContext)\n  return (\n    <div style={{ backgroundColor: color }}>Background color is: { color }</div>\n  )\n}\nexport default App\n复制代码\n```\n<a name=\"Lz4av\"></a>\n##### 2.配合 `useReducer` 实现 Redux 的代替方案：\n```\nimport React, { useReducer, useContext } from 'react'\nconst UPDATE_COLOR = 'UPDATE_COLOR'\ntype StateType = {\n  color: string\n}\ntype ActionType = {\n  type: string,\n  color: string\n}\ntype MixStateAndDispatch = {\n  state: StateType,\n  dispatch?: React.Dispatch<ActionType>\n}\nconst reducer = (state: StateType, action: ActionType) => {\n  switch(action.type) {\n    case UPDATE_COLOR:\n      return { color: action.color }\n    default:\n      return state  \n  }\n}\nconst ColorContext = React.createContext<MixStateAndDispatch>({\n  state: { color: 'black' },\n})\nconst Show = () => {\n  const { state, dispatch } = useContext(ColorContext)\n  return (\n    <div style={{ color: state.color }}>\n      当前字体颜色为: {state.color}\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'red'})}>红色</button>\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'green'})}>绿色</button>\n    </div>\n  )\n}\nconst Example = ({ initialColor = '#000000' }) => {\n  const [state, dispatch] = useReducer(reducer, { color: initialColor })\n  return (\n    <ColorContext.Provider value={{state, dispatch}}>\n      <div>\n        <Show />\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'blue'})}>蓝色</button>\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'lightblue'})}>轻绿色</button>\n      </div>\n    </ColorContext.Provider>\n  )\n}\nexport default Example\n```\n\n\n\n\n","slug":"hooksAndTs","published":1,"updated":"2021-04-09T16:38:46.995Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3gs000n1a35nj556r3c"},{"title":"mac去除系统更新小红点","date":"2020-04-05T08:18:36.000Z","_content":"\n### 屏蔽和去除mac系统的设置图标的系统更新提示小红点!\n  - 先设置取消系统自动更新\n  - 打开终端运行:\n```shell\n  defaults write com.apple.systempreferences AttentionPrefBundleIDs 0\n```\n  - 一般就会解决如果没有解决可以试试以下操作:\n```shell\n  killall Dock\n```\n\n\n","source":"_posts/mac去除系统更新小红点.md","raw":"---\ntitle: mac去除系统更新小红点\ndate: 2020-04-05 16:18:36\ntags: [mac, 小红点, 更新]\n---\n\n### 屏蔽和去除mac系统的设置图标的系统更新提示小红点!\n  - 先设置取消系统自动更新\n  - 打开终端运行:\n```shell\n  defaults write com.apple.systempreferences AttentionPrefBundleIDs 0\n```\n  - 一般就会解决如果没有解决可以试试以下操作:\n```shell\n  killall Dock\n```\n\n\n","slug":"mac去除系统更新小红点","published":1,"updated":"2021-04-09T16:39:02.141Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3h0000o1a35zb35cr0v"},{"title":"mysql的增删改查","date":"2019-11-23T02:50:02.000Z","_content":"\n- 插入数据\n\n```mysql\n语法： \n    INSERT INTO 表名(列名) VALUES(列名值)\n栗子：\n    INSERT INTO tags(name,id,url) VALUES('爬虫',10,'https://news.so.com/hotnews')\n解释：\n    向标签表(tags)里插入一条，姓名，id和访问地址分别为VALUES内对应的值\n\n```\n\n- 更新数据\n\n```mysql\n语法：\n    UPDATE 表名 SET 列名=更新值 WHERE 更新条件\n栗子：\n    UPDATE articles SET title='你好，世界',content='世界没你想的那么糟！' WHERE id=1\n解释：\n    更新id为1的文章，标题和内容都进行了修改\n\n```\n\n- 删除数据\n\n```mysql\n语法：\n    DELETE FROM 表名 WHERE 删除条件\n栗子：\n    DELETE FROM tags WHERE id=11\n解释：\n    从标签表(tags)里删除id为11的数据\n\n```\n\n- 查询\n\n```mysql\n语法：\n    SELECT 列名 FROM 表名 WHERE 查询条件 ORDER BY 排序列名\n栗子：\n    SELECT name,title,content FROM tags WHERE id=8\n解释：\n    查询id为8的标签表里对应信息\n```","source":"_posts/mysql的增删改查.md","raw":"---\ntitle: mysql的增删改查\ndate: 2019-11-23 10:50:02\ntags: [mysql]\n---\n\n- 插入数据\n\n```mysql\n语法： \n    INSERT INTO 表名(列名) VALUES(列名值)\n栗子：\n    INSERT INTO tags(name,id,url) VALUES('爬虫',10,'https://news.so.com/hotnews')\n解释：\n    向标签表(tags)里插入一条，姓名，id和访问地址分别为VALUES内对应的值\n\n```\n\n- 更新数据\n\n```mysql\n语法：\n    UPDATE 表名 SET 列名=更新值 WHERE 更新条件\n栗子：\n    UPDATE articles SET title='你好，世界',content='世界没你想的那么糟！' WHERE id=1\n解释：\n    更新id为1的文章，标题和内容都进行了修改\n\n```\n\n- 删除数据\n\n```mysql\n语法：\n    DELETE FROM 表名 WHERE 删除条件\n栗子：\n    DELETE FROM tags WHERE id=11\n解释：\n    从标签表(tags)里删除id为11的数据\n\n```\n\n- 查询\n\n```mysql\n语法：\n    SELECT 列名 FROM 表名 WHERE 查询条件 ORDER BY 排序列名\n栗子：\n    SELECT name,title,content FROM tags WHERE id=8\n解释：\n    查询id为8的标签表里对应信息\n```","slug":"mysql的增删改查","published":1,"updated":"2021-04-09T16:39:13.893Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3h9000q1a35b6pjw1xt"},{"title":"react-native-ios保存图片到相册","date":"2019-11-23T02:41:17.000Z","_content":"\n1. 现在CameraRoll 已经独立到一个库中了,需要单独安装:\n\n\n\n```js\nnpm install @react-native-community/cameraroll --save\n```\n\n- react-native 目前已经可以自动link 一般不需要再手动link\n\n- 如果此时不行的化,需要pod install 一下:\n\n\n\n```shell\ncd ios\npod install\n```\n\n2. xcode 需要设置下权限, 在info.plist 里面通过➕按钮添加一个键\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742057752-d6a70aba-815c-45b1-bbcf-f9f3c4a1d9ed.png)\n\n\n\n3. 选择 Privacy - Photo Library Additions Usage Description\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742149363-9275c09a-b7aa-445b-83ea-80e11ab2c160.png)\n\n4. 重启项目","source":"_posts/react-native-ios保存图片到相册.md","raw":"---\ntitle: react-native-ios保存图片到相册\ndate: 2019-11-23 10:41:17\ntags: [ios, react-native, 保存到相册]\n---\n\n1. 现在CameraRoll 已经独立到一个库中了,需要单独安装:\n\n\n\n```js\nnpm install @react-native-community/cameraroll --save\n```\n\n- react-native 目前已经可以自动link 一般不需要再手动link\n\n- 如果此时不行的化,需要pod install 一下:\n\n\n\n```shell\ncd ios\npod install\n```\n\n2. xcode 需要设置下权限, 在info.plist 里面通过➕按钮添加一个键\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742057752-d6a70aba-815c-45b1-bbcf-f9f3c4a1d9ed.png)\n\n\n\n3. 选择 Privacy - Photo Library Additions Usage Description\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742149363-9275c09a-b7aa-445b-83ea-80e11ab2c160.png)\n\n4. 重启项目","slug":"react-native-ios保存图片到相册","published":1,"updated":"2021-04-09T16:39:29.782Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3hh000s1a359m1zgrzo"},{"title":"antd的坑之menu默认选中和当前选中","date":"2019-09-08T06:48:44.000Z","_content":"\n#### 在menu 组件中:\n\n- defaultSelectedKeys是一打开默认选中项\n\n- selectedKeys 则是切换时显示的默认项（就是一切换就让它选中你想让他默认显示的项）\n\n","source":"_posts/antd的坑之menu默认选中和当前选中.md","raw":"---\ntitle: antd的坑之menu默认选中和当前选中\ndate: 2019-09-08 14:48:44\ntags: [antd, menu]\n---\n\n#### 在menu 组件中:\n\n- defaultSelectedKeys是一打开默认选中项\n\n- selectedKeys 则是切换时显示的默认项（就是一切换就让它选中你想让他默认显示的项）\n\n","slug":"antd的坑之menu默认选中和当前选中","published":1,"updated":"2021-04-09T15:49:52.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3hp000v1a35bhd1dxvc"},{"title":"react-native webview的坑及(RNCWKWebView\" was not found in the UIManager)错误","date":"2019-09-08T02:47:27.000Z","_content":"\n首先 webview已经从 react-native 移到单独模块 react-native-webview;\n\n### 使用:\n\n1. 安装 yarn add react-native-webview;\n2. 运行 react-native link react-native-webview(native0.6以后会自动link 不知道可不可以 )\n\n### 如果报错:\n\n> ```\n> Invariant Violation: requireNativeComponent: \"RNCWKWebView\" was not found in the UIManager.\n> ```\n\n1. cd  ios\n2. 运行 pod install\n3. 重新运行 react-native run-ios\n\n","source":"_posts/react-native-webview的坑.md","raw":"---\ntitle: react-native webview的坑及(RNCWKWebView\" was not found in the UIManager)错误\ndate: 2019-09-08 10:47:27\ntags: [react-native, webview, RNCWKWebView was not found in the UIManager]\n---\n\n首先 webview已经从 react-native 移到单独模块 react-native-webview;\n\n### 使用:\n\n1. 安装 yarn add react-native-webview;\n2. 运行 react-native link react-native-webview(native0.6以后会自动link 不知道可不可以 )\n\n### 如果报错:\n\n> ```\n> Invariant Violation: requireNativeComponent: \"RNCWKWebView\" was not found in the UIManager.\n> ```\n\n1. cd  ios\n2. 运行 pod install\n3. 重新运行 react-native run-ios\n\n","slug":"react-native-webview的坑","published":1,"updated":"2021-04-09T16:39:42.081Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3hw000x1a35tqos3yo0"},{"title":"antd的走马灯carousel的next和prv及go的method用法","date":"2019-09-08T06:57:10.000Z","_content":"\n\n\n> https://react-slick.neostack.com/docs/api#onReInit\n>\n> 更多的属性和方法以上网址查看\n\n如果页面需要手动render的时候用的手动更新的方式\n\ncarousel的下标index为非受控的值,重新render的时候 initialSlide默认为0；\n\n此时可以同过initialSlide这个属性将其设成受控属性，在重新render的时候就可以了\n\n#### antd的carousel里面提供了method：\n\n- goTo()\n- next()\n- prev()\n\n但是没详细说明怎么用\n这个主要用到ref={node => (this.slider = node)}\n这样就可以通过使用:\n\n- this.slider.next()\n- this.slider.prev()","source":"_posts/antd的走马灯carousel的next和prv及go的method用法.md","raw":"---\ntitle: antd的走马灯carousel的next和prv及go的method用法\ndate: 2019-09-08 14:57:10\ntags: [走马灯, carousel, next, pro, go, antd]\n---\n\n\n\n> https://react-slick.neostack.com/docs/api#onReInit\n>\n> 更多的属性和方法以上网址查看\n\n如果页面需要手动render的时候用的手动更新的方式\n\ncarousel的下标index为非受控的值,重新render的时候 initialSlide默认为0；\n\n此时可以同过initialSlide这个属性将其设成受控属性，在重新render的时候就可以了\n\n#### antd的carousel里面提供了method：\n\n- goTo()\n- next()\n- prev()\n\n但是没详细说明怎么用\n这个主要用到ref={node => (this.slider = node)}\n这样就可以通过使用:\n\n- this.slider.next()\n- this.slider.prev()","slug":"antd的走马灯carousel的next和prv及go的method用法","published":1,"updated":"2021-04-09T15:49:52.937Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3i4000z1a35011lzvkr"},{"title":"hashHistory和browserHistory的区别","date":"2019-09-08T07:17:55.000Z","_content":"\n- browserHistory\n\n- hashHistory\n\n- createMemoryHistory\n\n\n\n官方推荐使用browserHistory\n\n\n\n使用hashHistory,浏览器的url是这样的：/#/user/liuna?_k=adseis\n\n\n\n使用browserHistory,浏览器的url是这样的：/user/liuna\n\n\n\n这样看起来当然是browerHistory更好一些，但是它需要server端支持。\n\n\n\n使用hashHistory时，因为有 # 的存在，浏览器不会发送request,react-router 自己根据 url 去 render 相应的模块。\n\n\n\n使用browserHistory时，从 / 到 /user/liuna, 浏览器会向server发送request，所以server要做特殊请求，比如用的 express 的话，你需要 handle 所有的路由 `app.get('*', (req, res) => { ... })`，使用了 nginx 的话，nginx也要做相应的配置。\n\n\n\n \n\n\n\n如果只是静态页面，就不需要用browserHistory,直接hashHistory就好了。","source":"_posts/hashHistory和browserHistory的区别.md","raw":"---\ntitle: hashHistory和browserHistory的区别\ndate: 2019-09-08 15:17:55\ntags: [hash, browser, history]\n---\n\n- browserHistory\n\n- hashHistory\n\n- createMemoryHistory\n\n\n\n官方推荐使用browserHistory\n\n\n\n使用hashHistory,浏览器的url是这样的：/#/user/liuna?_k=adseis\n\n\n\n使用browserHistory,浏览器的url是这样的：/user/liuna\n\n\n\n这样看起来当然是browerHistory更好一些，但是它需要server端支持。\n\n\n\n使用hashHistory时，因为有 # 的存在，浏览器不会发送request,react-router 自己根据 url 去 render 相应的模块。\n\n\n\n使用browserHistory时，从 / 到 /user/liuna, 浏览器会向server发送request，所以server要做特殊请求，比如用的 express 的话，你需要 handle 所有的路由 `app.get('*', (req, res) => { ... })`，使用了 nginx 的话，nginx也要做相应的配置。\n\n\n\n \n\n\n\n如果只是静态页面，就不需要用browserHistory,直接hashHistory就好了。","slug":"hashHistory和browserHistory的区别","published":1,"updated":"2021-04-09T15:49:52.938Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3ia00101a350yx5pjcv"},{"title":"react-native ios环境搭建 关于pod的坑","date":"2019-09-08T01:56:12.000Z","_content":"\nhttps://reactnative.cn/docs/getting-started/\n\n## 坑\n\n\n\nios 在init项目的时候,第一次安装会遇见安装到info Installing required CocoaPods dependencies这个地方就卡住了不动了,这应该是网路原因导致的,解决办法:\n\n\n\n1. 安装cocoapods 这个安装需要ruby ,mac自带ruby 所以只需要用sudo gem update —system 更新下\n\n```\nsudo gem install cocoapods\n```\n\n1. 进入到项目里的ios目录下有个文件podfile,看到此文件后,执行 pod install 然后会提示你用pod install —repo-update\n2. 如果还是报错就再输入他提示的命令\n3. 基本上就可以了,然后可以重新init项目就不会卡在那里了\n\n\n\n## 安装依赖(以下来自react-native文档)\n\n必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 Xcode。\n\n虽然你可以使用`任何编辑器`来开发应用（编写 js 代码），但你仍然必须安装 Xcode 来获得编译 iOS 应用所需的工具和环境。\n\n### Node, Watchman\n\n我们推荐使用[Homebrew](http://brew.sh/)来安装 Node 和 Watchman。在命令行中执行下列命令安装：\n\n```\nbrew install node\nbrew install watchman\n```\n\n如果你已经安装了 Node，请检查其版本是否在 v10 以上。安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n> 注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n```\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n\n[Watchman](https://facebook.github.io/watchman)则是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。\n\n### Yarn、React Native 的命令行工具（react-native-cli）\n\n[Yarn](http://yarnpkg.com/)是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n```\nnpm install -g yarn react-native-cli\n```\n\n安装完 yarn 后同理也要设置镜像源：\n\n```\nyarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global\n```\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用`yarn`代替`npm install`命令，用`yarn add 某第三方库名`代替`npm install 某第三方库名`。\n\n### Xcode\n\nReact Native 目前需要[Xcode](https://developer.apple.com/xcode/downloads/) 9.4 或更高版本。你可以通过 App Store 或是到[Apple 开发者官网](https://developer.apple.com/xcode/downloads/)上下载。这一步骤会同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。\n\n#### Xcode 的命令行工具\n\n启动 Xcode，并在`Xcode | Preferences | Locations`菜单中检查一下是否装有某个版本的`Command Line Tools`。Xcode 的命令行工具中包含一些必须的工具，比如`git`等。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397089-7a6e4285-8f48-4710-94dd-71a3d8bc3435.png)\n\n## 创建新项目\n\n使用 React Native 命令行工具来创建一个名为\"AwesomeProject\"的新项目：\n\n**！！！注意！！！**：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人`无法运行iOS项目`！！！中文网在论坛中提供了这些库的[国内下载链接](http://bbs.reactnative.cn/topic/4301/)。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建`0.44.3`的版本。\n\n```\nreact-native init AwesomeProject\n```\n\n> 提示：你可以使用`--version`参数（注意是`两`个杠）创建指定版本的项目。例如`react-native init MyApp --version 0.44.3`。注意版本号必须精确到两个小数点。\n\n如果你是想把 React Native 集成到现有的原生项目中，则步骤完全不同，请参考[集成到现有原生应用](https://reactnative.cn/docs/integration-with-existing-apps)。\n\n## 编译并运行 React Native 应用\n\n在你的项目目录中运行`react-native run-ios`：\n\n```\ncd AwesomeProject\nreact-native run-ios\n```\n\n> 提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。\n\n很快就应该能看到 iOS 模拟器自动启动并运行你的项目。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397051-56e1d04c-a7be-456d-bca8-320b5ba28775.png)\n\n`react-native run-ios`只是运行应用的方式之一。你也可以在 Xcode 或是[Nuclide](https://nuclide.io/)中直接运行应用。\n\n> 如果你无法正常运行，先回头`仔细对照文档检查`，然后可以看看论坛的[求助专区](http://bbs.reactnative.cn/category/4)。\n\n### 在真机上运行\n\n上面的命令会自动在 iOS 模拟器上运行应用，如果你想在真机上运行，则请阅读[在设备上运行](https://reactnative.cn/docs/running-on-device)这篇文档。\n\n### 修改项目\n\n现在你已经成功运行了项目，我们可以开始尝试动手改一改了：\n\n- 使用你喜欢的编辑器打开`App.js`并随便改上几行。\n- 在 iOS 模拟器中按下`⌘-R`就可以刷新 APP 并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard 选项是否选中开启）\n\n### 完成了！\n\n恭喜！你已经成功运行并修改了你的第一个 React Native 应用。","source":"_posts/react-native-ios环境搭建.md","raw":"---\ntitle: react-native ios环境搭建 关于pod的坑\ndate: 2019-09-08 09:56:12\ntags: [iOS, react-native, 环境搭建, pod]\n---\n\nhttps://reactnative.cn/docs/getting-started/\n\n## 坑\n\n\n\nios 在init项目的时候,第一次安装会遇见安装到info Installing required CocoaPods dependencies这个地方就卡住了不动了,这应该是网路原因导致的,解决办法:\n\n\n\n1. 安装cocoapods 这个安装需要ruby ,mac自带ruby 所以只需要用sudo gem update —system 更新下\n\n```\nsudo gem install cocoapods\n```\n\n1. 进入到项目里的ios目录下有个文件podfile,看到此文件后,执行 pod install 然后会提示你用pod install —repo-update\n2. 如果还是报错就再输入他提示的命令\n3. 基本上就可以了,然后可以重新init项目就不会卡在那里了\n\n\n\n## 安装依赖(以下来自react-native文档)\n\n必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 Xcode。\n\n虽然你可以使用`任何编辑器`来开发应用（编写 js 代码），但你仍然必须安装 Xcode 来获得编译 iOS 应用所需的工具和环境。\n\n### Node, Watchman\n\n我们推荐使用[Homebrew](http://brew.sh/)来安装 Node 和 Watchman。在命令行中执行下列命令安装：\n\n```\nbrew install node\nbrew install watchman\n```\n\n如果你已经安装了 Node，请检查其版本是否在 v10 以上。安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n> 注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n```\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n\n[Watchman](https://facebook.github.io/watchman)则是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。\n\n### Yarn、React Native 的命令行工具（react-native-cli）\n\n[Yarn](http://yarnpkg.com/)是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n```\nnpm install -g yarn react-native-cli\n```\n\n安装完 yarn 后同理也要设置镜像源：\n\n```\nyarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global\n```\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用`yarn`代替`npm install`命令，用`yarn add 某第三方库名`代替`npm install 某第三方库名`。\n\n### Xcode\n\nReact Native 目前需要[Xcode](https://developer.apple.com/xcode/downloads/) 9.4 或更高版本。你可以通过 App Store 或是到[Apple 开发者官网](https://developer.apple.com/xcode/downloads/)上下载。这一步骤会同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。\n\n#### Xcode 的命令行工具\n\n启动 Xcode，并在`Xcode | Preferences | Locations`菜单中检查一下是否装有某个版本的`Command Line Tools`。Xcode 的命令行工具中包含一些必须的工具，比如`git`等。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397089-7a6e4285-8f48-4710-94dd-71a3d8bc3435.png)\n\n## 创建新项目\n\n使用 React Native 命令行工具来创建一个名为\"AwesomeProject\"的新项目：\n\n**！！！注意！！！**：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人`无法运行iOS项目`！！！中文网在论坛中提供了这些库的[国内下载链接](http://bbs.reactnative.cn/topic/4301/)。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建`0.44.3`的版本。\n\n```\nreact-native init AwesomeProject\n```\n\n> 提示：你可以使用`--version`参数（注意是`两`个杠）创建指定版本的项目。例如`react-native init MyApp --version 0.44.3`。注意版本号必须精确到两个小数点。\n\n如果你是想把 React Native 集成到现有的原生项目中，则步骤完全不同，请参考[集成到现有原生应用](https://reactnative.cn/docs/integration-with-existing-apps)。\n\n## 编译并运行 React Native 应用\n\n在你的项目目录中运行`react-native run-ios`：\n\n```\ncd AwesomeProject\nreact-native run-ios\n```\n\n> 提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。\n\n很快就应该能看到 iOS 模拟器自动启动并运行你的项目。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397051-56e1d04c-a7be-456d-bca8-320b5ba28775.png)\n\n`react-native run-ios`只是运行应用的方式之一。你也可以在 Xcode 或是[Nuclide](https://nuclide.io/)中直接运行应用。\n\n> 如果你无法正常运行，先回头`仔细对照文档检查`，然后可以看看论坛的[求助专区](http://bbs.reactnative.cn/category/4)。\n\n### 在真机上运行\n\n上面的命令会自动在 iOS 模拟器上运行应用，如果你想在真机上运行，则请阅读[在设备上运行](https://reactnative.cn/docs/running-on-device)这篇文档。\n\n### 修改项目\n\n现在你已经成功运行了项目，我们可以开始尝试动手改一改了：\n\n- 使用你喜欢的编辑器打开`App.js`并随便改上几行。\n- 在 iOS 模拟器中按下`⌘-R`就可以刷新 APP 并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard 选项是否选中开启）\n\n### 完成了！\n\n恭喜！你已经成功运行并修改了你的第一个 React Native 应用。","slug":"react-native-ios环境搭建","published":1,"updated":"2021-04-09T15:49:52.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3ig00111a35gytzturd"},{"title":"react-native 顶部和底部bar的高度及iphone的安全区域","date":"2019-09-08T02:32:33.000Z","_content":"\n## react-navigtion 底部tab的高度默认为49\n\n![图片.png](https://s2.ax1x.com/2019/09/10/napM5Q.png)\n\n## ipone的安全区域 顶部和底部bar的高度\n\n- ios的statusbar 高度: iPhonex之前20 之后34\n\n- phonex的底部要空出34 空间\n\n![图片.png](https://s2.ax1x.com/2019/09/10/naplCj.png)\n\n链接 https://zhuanlan.zhihu.com/p/46868724\n\n\n\n底部tab颜色可以通过header添加paddingTop 设置颜色 以保持色彩统一","source":"_posts/react-native-顶部和底部bar的高度.md","raw":"---\ntitle: react-native 顶部和底部bar的高度及iphone的安全区域\ndate: 2019-09-08 10:32:33\ntags: [react, native, bar, ios, 高度]\n---\n\n## react-navigtion 底部tab的高度默认为49\n\n![图片.png](https://s2.ax1x.com/2019/09/10/napM5Q.png)\n\n## ipone的安全区域 顶部和底部bar的高度\n\n- ios的statusbar 高度: iPhonex之前20 之后34\n\n- phonex的底部要空出34 空间\n\n![图片.png](https://s2.ax1x.com/2019/09/10/naplCj.png)\n\n链接 https://zhuanlan.zhihu.com/p/46868724\n\n\n\n底部tab颜色可以通过header添加paddingTop 设置颜色 以保持色彩统一","slug":"react-native-顶部和底部bar的高度","published":1,"updated":"2021-04-09T15:49:52.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3in00131a355t7o4gg2"},{"title":"react-router通过js导航","date":"2019-09-08T07:19:22.000Z","_content":"\n\n\n```js\nimport { browserHistory } from 'react-router'  //引入路由函数\n\nbrowserHistory.push('/some/path')   //js方式跳转\n```\n\n或者使用 hashHistory 代替 browserHistory\n\n\n\n### 1.引入包 \n\n```js\nimport {hashHistory} from 'React-router'\n```\n\n### 2.跳转传值\n\n```js\nhandleClick = (value) => {\n        hashHistory.push({\n            pathname: 'message/detailMessage',\n            query: {\n                title:value.title,\n                time:value.time,\n                text:value.text\n            },\n        })\n    }\n```\n\n### 3.接收值\n\n```js\nconsole.info(this.props.location.query.title)\nconsole.info(this.props.location.query.time)\nconsole.info(this.props.location.query.text)\n```\n\n","source":"_posts/react-router通过js导航.md","raw":"---\ntitle: react-router通过js导航\ndate: 2019-09-08 15:19:22\ntags: [router, js, 导航]\n---\n\n\n\n```js\nimport { browserHistory } from 'react-router'  //引入路由函数\n\nbrowserHistory.push('/some/path')   //js方式跳转\n```\n\n或者使用 hashHistory 代替 browserHistory\n\n\n\n### 1.引入包 \n\n```js\nimport {hashHistory} from 'React-router'\n```\n\n### 2.跳转传值\n\n```js\nhandleClick = (value) => {\n        hashHistory.push({\n            pathname: 'message/detailMessage',\n            query: {\n                title:value.title,\n                time:value.time,\n                text:value.text\n            },\n        })\n    }\n```\n\n### 3.接收值\n\n```js\nconsole.info(this.props.location.query.title)\nconsole.info(this.props.location.query.time)\nconsole.info(this.props.location.query.text)\n```\n\n","slug":"react-router通过js导航","published":1,"updated":"2021-04-09T15:49:52.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3iz00141a35i1ynwq0b"},{"title":"react中getDefaultProps和getInitialState的区别是什么","date":"2019-09-08T07:46:48.000Z","_content":"\n- getDefaultProps是设置默认props，如果父组件没有给某个prop那就用默认的(\n\n  源码里显示:\n\n  ​\t假设 defaultProps = { title: 1}, 父组件没有传递title 给props\n\n  ​\t则 props.title = defaultProps.title;\n\n  )\n\n- getInitialState是设置组件mount以后的初始state的\n\n","source":"_posts/react中getDefaultProps和getInitialState的区别是什么.md","raw":"---\ntitle: react中getDefaultProps和getInitialState的区别是什么\ndate: 2019-09-08 15:46:48\ntags: [react, getDefaultProps, getInitIalState]\n---\n\n- getDefaultProps是设置默认props，如果父组件没有给某个prop那就用默认的(\n\n  源码里显示:\n\n  ​\t假设 defaultProps = { title: 1}, 父组件没有传递title 给props\n\n  ​\t则 props.title = defaultProps.title;\n\n  )\n\n- getInitialState是设置组件mount以后的初始state的\n\n","slug":"react中getDefaultProps和getInitialState的区别是什么","published":1,"updated":"2021-04-09T15:49:52.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3ja00161a3597xdf9ke"},{"title":"react中将html字符串渲染到页面","date":"2019-09-08T07:04:41.000Z","_content":"\n```jsx\n<div dangerouslySetInnerHTML={{__html:this.props.content}}></div>\n```\n\nthis.props.content 为要渲染的数据\n\n","source":"_posts/react中将html字符串渲染到页面.md","raw":"---\ntitle: react中将html字符串渲染到页面\ndate: 2019-09-08 15:04:41\ntags: [react, html字符串]\n---\n\n```jsx\n<div dangerouslySetInnerHTML={{__html:this.props.content}}></div>\n```\n\nthis.props.content 为要渲染的数据\n\n","slug":"react中将html字符串渲染到页面","published":1,"updated":"2021-04-09T15:49:52.939Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3jh00181a35quasptbq"},{"title":"webpack创建项目","date":"2019-12-29T23:35:07.000Z","_content":"### webpack 新建项目流程\n1. 始化项目\n```shell\nnpm init -y\n```\n2. 创建项目结构\n```shell\n.\n├── dist // 生成目录\n├── dll_script // 生成的dll的js和manifest.json\n│   ├── commons.dll.js\n│   ├── commons.manifest.json\n│   ├── react.dll.js\n│   └── react.manifest.json\n├── package.json\n├── public // html 模板和ico\n│   ├── favicon.ico\n│   └── index.html\n├── script // webpack 配置脚本\n│   ├── webpack.build.js\n│   ├── webpack.common.js\n│   ├── webpack.dev.js\n│   └── webpack.dll.js\n├── src // 项目文件\n│   ├── history\n│   │   └── index.js\n│   ├── index.js\n│   ├── page\n│   │   ├── Home\n│   │   │   ├── index.jsx\n│   │   │   └── index.less\n│   │   └── index.js\n│   └── store\n│       └── index.js\n└── yarn.lock\n```\n3. 安装webpack及插件\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D\n// html-webpack-plugin 将生成的javascript文件打到模板 index.html上\n// clean-webpack-plugin 清除生成的文件\n// webpack-dev-server   本地服务器\n```\n4. 安装babel和loader\n```javascript\nyarn add @babel/core @babel/preset-env @babel/preset-react -D\n// babel-loader和@babel/core是核心模块\n// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript\n// @babel/preset-react 转换JSX\nyarn add babel-loader less-loader css-loader style-loader -D\n// less-loader css-loader style-loader less文件loader 顺序是 style => css => less 执行过程是相反的\nyarn add less -D\nyarn add file-loader -D\nyarn add url-loader -D\nyarn add babel-plugin-import -D\n// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64\n```\n5. 配置babel .babelrc\n```javascript\n{\n  \"presets\": [\n  \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n      \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n6. 配置webpack.config.js\n- webpack.common.js // webpack 共用配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: { // 入口\n    main: path.resolve(__dirname, '../src/index.js')\n  },\n  output: { // 出口\n    filename: '[name].js',\n    chunkFilename: '[name].js',\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/' // 上cdn的需要配置此项\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'], // 配置此项后就可以通过index直接引入不需要写后缀\n    alias: { // 别名\n      \"@src\": path.resolve(__dirname, '../src')\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        // use: [\"babel-loader\"], // 两种方式都可以\n        use: [\n          {\n            loader: \"babel-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: \"style-loader\"\n          },\n          {\n            loader: \"css-loader\"\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              javascriptEnabled: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style.loader\"\n          },\n          {\n            loader: \"css-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.(jpg|jepg|png|gif)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(eot|woff2|ttf|svg)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  // 拆分打包\n  optimzation: {\n    splitChunks: {\n      chunks: 'all',// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用\n      automaticNameDelimiter: '~',  // 生成文件名的文件链接符\n      name: true, // 开启自定义名称效果，\n      cacheGroups: {\n        vendors: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        priority: -10, // 优先级\n        filename: \"vendors.js\"\n      },\n      // default: false // false为禁止default及最后打包为vendors和入口的main\n        default: { // 打包为chunk.js vendors.js 及入口的main.js\n          priority: -20, \n          reuseExistingChunk: true,\n          filename: 'chunk.js'\n        }\n      }\n    }\n  },\n  plugins: [ // manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/commons.manifest.json')\n    }),\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/react.manifest.json')\n    })\n  ]\n}\n```\n- webpack.dev.js // dev 配置\n```javascript\nconst webpackCommon = require('./webpack.common.js');\nconst htmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst path = require('path');\n\nwebpackCommon.plugins.push(\n  new htmlWebpackPlugin({\n    template: path.resolve(__dirname, '../public/index.html');\n  })\n)\nwebpackCommon.plugins.push(new CleanWebpackPlugin())\nconst webpackDevConfig = {\n  mode: 'development',\n  devtool: \"cheap-source-map\", // 映射\n  devServer: {\n    port: 8090, // 端口号\n    open: true, // 自动打开浏览器\n    historyApiFallback: true, // 404时返回首页\n  }\n}\nmodule.exports = Object.assgin(webpackDevConfig, webpackCommon);\n```\n- webpack.build.js // 打包配置\n```javascript\nconst webpackCommon = require('./webpackCommon.js');\nconst webpackBuildConfig = {\n  mode: 'production'\n}\nmodule.exports = Object.assgin(webpackBuildConfig, webpackCommon);\n```\n- webpack.dll.js // 生成dll.js和json配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst webpackDllConfig = {\n  mode: 'production',\n  entry: {\n    react: ['react', 'react-dom', 'react-router', 'react-router-dom', 'mobx-react'],\n    //  mobx-react 应该是和react有依赖关系所以要和react放到一起\n    commons: ['mobx']\n  },\n  output: {\n    filename: '[name].dll.js',\n    path: path.resolve(__dirname, '../dll_script'),\n    library: '[name]' // 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import\n    // 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library\n  },\n  plugins: [\n    new CleanWebpackPlugin({\n        path: path.resolve(__dirname, '../dll_script')\n    }),\n    new webpack.DllPlugin({\n        name: '[name]',\n      path: path.resolve(__dirname, '../dll_script/[name].manifest.json')\n    })\n  ]\n}\n```\n7. package.json 里面添加脚本命令\n```javascript\n{\n  \"name\": \"webpackDemo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --config ./script/webpack.dev.js\",\n    \"build\": \"webpack --config ./script/webpack.build.js\",\n    \"dll\": \"webpack --config ./script/webpack.dll.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.7\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\n    \"@babel/preset-env\": \"^7.7.7\",\n    \"@babel/preset-react\": \"^7.7.4\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.13.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.4.0\",\n    \"file-loader\": \"^5.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.10.3\",\n    \"less-loader\": \"^5.0.0\",\n    \"style-loader\": \"^1.1.1\",\n    \"url-loader\": \"^3.0.0\",\n    \"webpack\": \"^4.41.4\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-dev-server\": \"^3.10.1\"\n  },\n  \"dependencies\": {\n    \"antd\": \"^3.26.4\",\n    \"mobx\": \"^5.15.1\",\n    \"mobx-react\": \"^6.1.4\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\",\n    \"react-router\": \"^5.1.2\",\n    \"react-router-dom\": \"^5.1.2\"\n  }\n}\n```\n8. 配置项目babel支持@修饰符\n• 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators\n```javascript\n  npm install @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators -D\n```\n• 修改.babelrc\n```javascript\n{\n    \"presets\": [\n    \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n        \"@babel/plugin-proposal-decorators\",\n      // 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前\n      {\n        \"legacy\": true\n      }\n    ],\n    [\n        \"@babel/plugin-proposal-class-properties\"\n      // 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面\n    ]\n    [\n        \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n• 新建index.html\n```html\n  <!doctype html>\n  <html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"../script/dll_script/react.dll.js\"></script>\n    <script src=\"../script/dll_script/commons.dll.js\"></script>\n    // 上面是引用的生成的dll js文件 如果不设置dll则可以不引用 如果webpack里面设置了这里必须引用\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n  </body>\n  </html>\n```","source":"_posts/webpack创建项目.md","raw":"---\ntitle: webpack创建项目\ndate: 2019-12-30 07:35:07\ntags: [webpack, 项目环境配置]\n---\n### webpack 新建项目流程\n1. 始化项目\n```shell\nnpm init -y\n```\n2. 创建项目结构\n```shell\n.\n├── dist // 生成目录\n├── dll_script // 生成的dll的js和manifest.json\n│   ├── commons.dll.js\n│   ├── commons.manifest.json\n│   ├── react.dll.js\n│   └── react.manifest.json\n├── package.json\n├── public // html 模板和ico\n│   ├── favicon.ico\n│   └── index.html\n├── script // webpack 配置脚本\n│   ├── webpack.build.js\n│   ├── webpack.common.js\n│   ├── webpack.dev.js\n│   └── webpack.dll.js\n├── src // 项目文件\n│   ├── history\n│   │   └── index.js\n│   ├── index.js\n│   ├── page\n│   │   ├── Home\n│   │   │   ├── index.jsx\n│   │   │   └── index.less\n│   │   └── index.js\n│   └── store\n│       └── index.js\n└── yarn.lock\n```\n3. 安装webpack及插件\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D\n// html-webpack-plugin 将生成的javascript文件打到模板 index.html上\n// clean-webpack-plugin 清除生成的文件\n// webpack-dev-server   本地服务器\n```\n4. 安装babel和loader\n```javascript\nyarn add @babel/core @babel/preset-env @babel/preset-react -D\n// babel-loader和@babel/core是核心模块\n// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript\n// @babel/preset-react 转换JSX\nyarn add babel-loader less-loader css-loader style-loader -D\n// less-loader css-loader style-loader less文件loader 顺序是 style => css => less 执行过程是相反的\nyarn add less -D\nyarn add file-loader -D\nyarn add url-loader -D\nyarn add babel-plugin-import -D\n// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64\n```\n5. 配置babel .babelrc\n```javascript\n{\n  \"presets\": [\n  \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n      \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n6. 配置webpack.config.js\n- webpack.common.js // webpack 共用配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: { // 入口\n    main: path.resolve(__dirname, '../src/index.js')\n  },\n  output: { // 出口\n    filename: '[name].js',\n    chunkFilename: '[name].js',\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/' // 上cdn的需要配置此项\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'], // 配置此项后就可以通过index直接引入不需要写后缀\n    alias: { // 别名\n      \"@src\": path.resolve(__dirname, '../src')\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        // use: [\"babel-loader\"], // 两种方式都可以\n        use: [\n          {\n            loader: \"babel-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: \"style-loader\"\n          },\n          {\n            loader: \"css-loader\"\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              javascriptEnabled: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style.loader\"\n          },\n          {\n            loader: \"css-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.(jpg|jepg|png|gif)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(eot|woff2|ttf|svg)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  // 拆分打包\n  optimzation: {\n    splitChunks: {\n      chunks: 'all',// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用\n      automaticNameDelimiter: '~',  // 生成文件名的文件链接符\n      name: true, // 开启自定义名称效果，\n      cacheGroups: {\n        vendors: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        priority: -10, // 优先级\n        filename: \"vendors.js\"\n      },\n      // default: false // false为禁止default及最后打包为vendors和入口的main\n        default: { // 打包为chunk.js vendors.js 及入口的main.js\n          priority: -20, \n          reuseExistingChunk: true,\n          filename: 'chunk.js'\n        }\n      }\n    }\n  },\n  plugins: [ // manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/commons.manifest.json')\n    }),\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/react.manifest.json')\n    })\n  ]\n}\n```\n- webpack.dev.js // dev 配置\n```javascript\nconst webpackCommon = require('./webpack.common.js');\nconst htmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst path = require('path');\n\nwebpackCommon.plugins.push(\n  new htmlWebpackPlugin({\n    template: path.resolve(__dirname, '../public/index.html');\n  })\n)\nwebpackCommon.plugins.push(new CleanWebpackPlugin())\nconst webpackDevConfig = {\n  mode: 'development',\n  devtool: \"cheap-source-map\", // 映射\n  devServer: {\n    port: 8090, // 端口号\n    open: true, // 自动打开浏览器\n    historyApiFallback: true, // 404时返回首页\n  }\n}\nmodule.exports = Object.assgin(webpackDevConfig, webpackCommon);\n```\n- webpack.build.js // 打包配置\n```javascript\nconst webpackCommon = require('./webpackCommon.js');\nconst webpackBuildConfig = {\n  mode: 'production'\n}\nmodule.exports = Object.assgin(webpackBuildConfig, webpackCommon);\n```\n- webpack.dll.js // 生成dll.js和json配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst webpackDllConfig = {\n  mode: 'production',\n  entry: {\n    react: ['react', 'react-dom', 'react-router', 'react-router-dom', 'mobx-react'],\n    //  mobx-react 应该是和react有依赖关系所以要和react放到一起\n    commons: ['mobx']\n  },\n  output: {\n    filename: '[name].dll.js',\n    path: path.resolve(__dirname, '../dll_script'),\n    library: '[name]' // 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import\n    // 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library\n  },\n  plugins: [\n    new CleanWebpackPlugin({\n        path: path.resolve(__dirname, '../dll_script')\n    }),\n    new webpack.DllPlugin({\n        name: '[name]',\n      path: path.resolve(__dirname, '../dll_script/[name].manifest.json')\n    })\n  ]\n}\n```\n7. package.json 里面添加脚本命令\n```javascript\n{\n  \"name\": \"webpackDemo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --config ./script/webpack.dev.js\",\n    \"build\": \"webpack --config ./script/webpack.build.js\",\n    \"dll\": \"webpack --config ./script/webpack.dll.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.7\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\n    \"@babel/preset-env\": \"^7.7.7\",\n    \"@babel/preset-react\": \"^7.7.4\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.13.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.4.0\",\n    \"file-loader\": \"^5.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.10.3\",\n    \"less-loader\": \"^5.0.0\",\n    \"style-loader\": \"^1.1.1\",\n    \"url-loader\": \"^3.0.0\",\n    \"webpack\": \"^4.41.4\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-dev-server\": \"^3.10.1\"\n  },\n  \"dependencies\": {\n    \"antd\": \"^3.26.4\",\n    \"mobx\": \"^5.15.1\",\n    \"mobx-react\": \"^6.1.4\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\",\n    \"react-router\": \"^5.1.2\",\n    \"react-router-dom\": \"^5.1.2\"\n  }\n}\n```\n8. 配置项目babel支持@修饰符\n• 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators\n```javascript\n  npm install @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators -D\n```\n• 修改.babelrc\n```javascript\n{\n    \"presets\": [\n    \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n        \"@babel/plugin-proposal-decorators\",\n      // 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前\n      {\n        \"legacy\": true\n      }\n    ],\n    [\n        \"@babel/plugin-proposal-class-properties\"\n      // 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面\n    ]\n    [\n        \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n• 新建index.html\n```html\n  <!doctype html>\n  <html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"../script/dll_script/react.dll.js\"></script>\n    <script src=\"../script/dll_script/commons.dll.js\"></script>\n    // 上面是引用的生成的dll js文件 如果不设置dll则可以不引用 如果webpack里面设置了这里必须引用\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n  </body>\n  </html>\n```","slug":"webpack创建项目","published":1,"updated":"2021-04-09T16:40:02.128Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3jo001b1a358k96lzl8"},{"title":"webpack 新建项目流程","date":"2021-04-01T04:06:07.000Z","_content":"### 1. 始化项目\n\n\n```javascript\nnpm init -y\n```\n### 2. 创建项目结构\n\n\n```shell\n.\n├── dist // 生成目录\n├── dll_script // 生成的dll的js和manifest.json\n│   ├── commons.dll.js\n│   ├── commons.manifest.json\n│   ├── react.dll.js\n│   └── react.manifest.json\n├── package.json\n├── public // html 模板和ico\n│   ├── favicon.ico\n│   └── index.html\n├── script // webpack 配置脚本\n│   ├── webpack.build.js\n│   ├── webpack.common.js\n│   ├── webpack.dev.js\n│   └── webpack.dll.js\n├── src // 项目文件\n│   ├── history\n│   │   └── index.js\n│   ├── index.js\n│   ├── page\n│   │   ├── Home\n│   │   │   ├── index.jsx\n│   │   │   └── index.less\n│   │   └── index.js\n│   └── store\n│       └── index.js\n└── yarn.lock\n```\n\n\n### 3.安装webpack及插件\n\n\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D\n// \thtml-webpack-plugin 将生成的javascript文件打到模板 index.html上\n// clean-webpack-plugin 清除生成的文件\n// webpack-dev-server \t本地服务器\n```\n### 4. 安装babel和loader\n\n\n```javascript\nyarn add @babel/core @babel/preset-env @babel/preset-react -D\n// babel-loader和@babel/core是核心模块\n// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript\n// @babel/preset-react 转换JSX\nyarn add babel-loader less-loader css-loader style-loader -D\n// less-loader css loader style-loader less文件loader 顺序是 style => css => less 执行过程是相反的\nyarn add less -D\nyarn add file-loader -D\nyarn add url-loader -D\n// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64\n\nyarn add babel-plugin-import -D // 按需引入\nyarn add  @babel/preset-typescript -D // ts\n```\n\n\n### 5.配置babel .babelrc\n\n\n```javascript\n{\n\t\"presets\": [\n  \t\"@babel/preset-env\", \"@babel/preset-react\", \"@babel/preset-typescript\" // 最后一个为ts\n  ],\n  \"plugins\": [\n    [\n    \t\"import\", { // 需要安装babel-plugin-import\n      \t\"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n\n### 6. 配置webpack.config.js\n\n- webpack.common.js // webpack 共用配置\n\n\n\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: { // 入口\n    main: path.resolve(__dirname, '../src/index.js')\n  },\n  output: { // 出口\n    filename: '[name].js',\n    chunkFilename: '[name].js',\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/' // 上cdn的需要配置此项\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'], // 配置此项后就可以通过index直接引入不需要写后缀\n    alias: { // 别名\n    \t\"@src\": path.resolve(__dirname, '../src')\n    }\n  },\n  module: {\n    rules: [\n      {\n      \ttest: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        // use: [\"babel-loader\"], // 两种方式都可以\n        use: [\n          {\n          \tloader: \"babel-loader\"\n          }\n        ]\n      },\n      {\n      \ttest: /\\.less$/,\n        use: [\n          {\n          \tloader: \"style-loader\"\n          },\n          {\n          \tloader: \"css-loader\"\n          },\n          {\n          \tloader: \"less-loader\",\n            options: {\n            \tjavascriptEnabled: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n          \tloader: \"style.loader\"\n          },\n          {\n          \tloader: \"css-loader\"\n          }\n        ]\n      },\n      {\n      \ttest: /\\.(jpg|jepg|png|gif)$/,\n        use: [\n          {\n          \tloader: \"file-loader\",\n            options: {\n            \tname: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      },\n      {\n      \ttest: /\\.(eot|woff2|ttf|svg)$/,\n        use: [\n          {\n          \tloader: \"file-loader\",\n            options: {\n            \tname: '[name].[ext]',\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  // 拆分打包\n  optimization: {\n  \tsplitChunks: {\n    \tchunks: 'all',// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用\n      automaticNameDelimiter: '~',  // 生成文件名的文件链接符\n      name: true, // 开启自定义名称效果，\n      cacheGroups: {\n    \t\tvendors: {\n        \ttest: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10, // 优先级\n          filename: \"vendors.js\"\n        },\n        // default: false // false为禁止default及最后打包为vendors和入口的main\n        default: { // 打包为chunk.js vendors.js 及入口的main.js\n        \tpriority: -20, \n          reuseExistingChunk: true,\n          filename: 'chunk.js'\n        }\n    \t}\n    }\n  },\n  plugins: [ // manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化\n  \tnew webpack.DllReferencePlugin({\n      manifest: require('../dll_script/commons.manifest.json')\n    }),\n    new webpack.DllReferencePlugin({\n    \tmanifest: require('../dll_script/react.manifest.json')\n    })\n  ]\n}\n```\n\n\n- webpack.dev.js // dev 配置\n\n\n\n```javascript\nconst webpackCommon = require('./webpack.common.js');\nconst htmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nwebpackCommon.plugins.push(\n  new htmlWebpackPlugin({\n  \ttemplate: path.resolve(__dirname, '../public/index.html');\n  })\n)\nwebpackCommon.plugins.push(new CleanWebpackPlugin())\n\nconst webpackDevConfig = {\n  mode: 'development',\n\tdevtool: \"cheap-source-map\", // 映射\n  devServer: {\n    port: 8090, // 端口号\n  \topen: true, // 自动打开浏览器\n    historyApiFallback: true, // 404时返回首页\n  }\n}\n\nmodule.exports = Object.assgin(webpackDevConfig, webpackCommon);\n```\n\n\n- webpack.build.js // 打包配置\n\n\n\n```javascript\nconst webpackCommon = require('./webpackCommon.js');\nconst webpackBuildConfig = {\n\tmode: 'production'\n}\n\nmodule.exports = Object.assgin(webpackCommon, webpackBuildConfig);\n\n```\n\n\n- webpack.dll.js // 生成dll.js和json配置\n\n\n\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nconst webpackDllConfig = {\n\tmode: 'production',\n  entry: {\n  \treact: ['react', 'react-dom', 'react-router', 'react-router-dom', 'mobx-react'],\n    //\tmobx-react 应该是和react有依赖关系所以要和react放到一起\n    commons: ['mobx']\n  },\n  output: {\n    filename: '[name].js',\n    path: path.resolve(__dirname, '../dll_script'),\n    library: '[name]' // 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import\n    // 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library\n  },\n  plugins: [\n    new CleanWebpackPlugin({\n    \tpath: path.resolve(__dirname, '../dll_script')\n    }),\n    new webpack.DllPlugin({\n    \tname: '[name]',\n      path: path.resolve(__dirname, '../dll_script/[name].manifest.json')\n    })\n  ]\n}\n```\n### 7. package.json 里面添加脚本命令\n\n\n```javascript\n{\n  \"name\": \"webpackDemo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack serve --config ./script/webpack.dev.js\",\n    \"build\": \"webpack --config ./script/webpack.build.js\",\n    \"dll\": \"webpack --config ./script/webpack.dll.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.7\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\n    \"@babel/preset-env\": \"^7.7.7\",\n    \"@babel/preset-react\": \"^7.7.4\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.13.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.4.0\",\n    \"file-loader\": \"^5.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.10.3\",\n    \"less-loader\": \"^5.0.0\",\n    \"style-loader\": \"^1.1.1\",\n    \"url-loader\": \"^3.0.0\",\n    \"webpack\": \"^4.41.4\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-dev-server\": \"^3.10.1\"\n  },\n  \"dependencies\": {\n    \"antd\": \"^3.26.4\",\n    \"mobx\": \"^5.15.1\",\n    \"mobx-react\": \"^6.1.4\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\",\n    \"react-router\": \"^5.1.2\",\n    \"react-router-dom\": \"^5.1.2\"\n  }\n}\n\n```\n### 8. 配置项目babel支持@修饰符\n\n- 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators\n\n\n\n- 修改.babelrc\n\n```javascript\n{\n\t\"presets\": [\n  \t\"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n    \t\"@babel/plugin-proposal-decorators\",\n      // 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前\n      {\n      \t\"legacy\": true\n      }\n    ],\n    [\n    \t\"@babel/plugin-proposal-class-properties\"\n      // 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面\n    ]\n    [\n    \t\"import\", {\n      \t\"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n9. 别名\n- webpack下设置别名\n```javascript\nresolve: {\n    extensions: ['.ts', '.tsx', '.js', '.jsx'],\n    alias: {\n      \"@\": path.resolve(__dirname, \"../src\")\n    }\n  },\n```\n\n- tsconfig.json\n```javascript\n{\n\t \"compilerOptions\": {\n     \t\"baseUrl\": \".\", // 必须有\n    \t\"paths\": {\n      \t\"@src/*\": [\"./src/*\"]\n    \t}\n   }\n}\n```\n\n10. tsconfig\n```javascript\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"target\": \"es5\",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */\n    \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */\n    \"skipLibCheck\": true,                     /* Skip type checking of declaration files. */\n    \"strict\": true,                           /* Enable all strict type-checking options. */\n    \"allowSyntheticDefaultImports\": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n    \"esModuleInterop\": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n    \"forceConsistentCasingInFileNames\": true, /* Disallow inconsistently-cased references to the same file. */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@src/*\": [\"./src/*\"]\n    }\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\n\n    /* Basic Options */\n    // \"incremental\": true,                   /* Enable incremental compilation */\n    \n    // \"lib\": [],                             /* Specify library files to be included in the compilation. */\n    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n    // \"checkJs\": true,                       /* Report errors in .js files. */\n    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\n    // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n    // \"outDir\": \"./\",                        /* Redirect output structure to the directory. */\n    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n    // \"composite\": true,                     /* Enable project compilation */\n    // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information */\n    // \"removeComments\": true,                /* Do not emit comments to output. */\n    // \"noEmit\": true,                        /* Do not emit outputs. */\n    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n\n    /* Strict Type-Checking Options */\n    \n    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n    // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\n    // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n    // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\n    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n\n    /* Additional Checks */\n    // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\n    // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\n    // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\n    // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\n\n    /* Module Resolution Options */\n    // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\n    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n    // \"types\": [],                           /* Type declaration files to be included in compilation. */\n    \n    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n    // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\n\n    /* Source Map Options */\n    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n\n    /* Experimental Options */\n    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n\n    /* Advanced Options */\n  },\n  \"include\": [\n    \"src\"\n  ],    \n}\n\n```\n","source":"_posts/webpack新建项目流程.md","raw":"---\ntitle: webpack 新建项目流程\ndate: 2021-04-01 12:06:07\ntags: [webpack,新建项目流程]\n---\n### 1. 始化项目\n\n\n```javascript\nnpm init -y\n```\n### 2. 创建项目结构\n\n\n```shell\n.\n├── dist // 生成目录\n├── dll_script // 生成的dll的js和manifest.json\n│   ├── commons.dll.js\n│   ├── commons.manifest.json\n│   ├── react.dll.js\n│   └── react.manifest.json\n├── package.json\n├── public // html 模板和ico\n│   ├── favicon.ico\n│   └── index.html\n├── script // webpack 配置脚本\n│   ├── webpack.build.js\n│   ├── webpack.common.js\n│   ├── webpack.dev.js\n│   └── webpack.dll.js\n├── src // 项目文件\n│   ├── history\n│   │   └── index.js\n│   ├── index.js\n│   ├── page\n│   │   ├── Home\n│   │   │   ├── index.jsx\n│   │   │   └── index.less\n│   │   └── index.js\n│   └── store\n│       └── index.js\n└── yarn.lock\n```\n\n\n### 3.安装webpack及插件\n\n\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D\n// \thtml-webpack-plugin 将生成的javascript文件打到模板 index.html上\n// clean-webpack-plugin 清除生成的文件\n// webpack-dev-server \t本地服务器\n```\n### 4. 安装babel和loader\n\n\n```javascript\nyarn add @babel/core @babel/preset-env @babel/preset-react -D\n// babel-loader和@babel/core是核心模块\n// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript\n// @babel/preset-react 转换JSX\nyarn add babel-loader less-loader css-loader style-loader -D\n// less-loader css loader style-loader less文件loader 顺序是 style => css => less 执行过程是相反的\nyarn add less -D\nyarn add file-loader -D\nyarn add url-loader -D\n// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64\n\nyarn add babel-plugin-import -D // 按需引入\nyarn add  @babel/preset-typescript -D // ts\n```\n\n\n### 5.配置babel .babelrc\n\n\n```javascript\n{\n\t\"presets\": [\n  \t\"@babel/preset-env\", \"@babel/preset-react\", \"@babel/preset-typescript\" // 最后一个为ts\n  ],\n  \"plugins\": [\n    [\n    \t\"import\", { // 需要安装babel-plugin-import\n      \t\"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n\n### 6. 配置webpack.config.js\n\n- webpack.common.js // webpack 共用配置\n\n\n\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\n\nmodule.exports = {\n  entry: { // 入口\n    main: path.resolve(__dirname, '../src/index.js')\n  },\n  output: { // 出口\n    filename: '[name].js',\n    chunkFilename: '[name].js',\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/' // 上cdn的需要配置此项\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'], // 配置此项后就可以通过index直接引入不需要写后缀\n    alias: { // 别名\n    \t\"@src\": path.resolve(__dirname, '../src')\n    }\n  },\n  module: {\n    rules: [\n      {\n      \ttest: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        // use: [\"babel-loader\"], // 两种方式都可以\n        use: [\n          {\n          \tloader: \"babel-loader\"\n          }\n        ]\n      },\n      {\n      \ttest: /\\.less$/,\n        use: [\n          {\n          \tloader: \"style-loader\"\n          },\n          {\n          \tloader: \"css-loader\"\n          },\n          {\n          \tloader: \"less-loader\",\n            options: {\n            \tjavascriptEnabled: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n          \tloader: \"style.loader\"\n          },\n          {\n          \tloader: \"css-loader\"\n          }\n        ]\n      },\n      {\n      \ttest: /\\.(jpg|jepg|png|gif)$/,\n        use: [\n          {\n          \tloader: \"file-loader\",\n            options: {\n            \tname: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      },\n      {\n      \ttest: /\\.(eot|woff2|ttf|svg)$/,\n        use: [\n          {\n          \tloader: \"file-loader\",\n            options: {\n            \tname: '[name].[ext]',\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  // 拆分打包\n  optimization: {\n  \tsplitChunks: {\n    \tchunks: 'all',// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用\n      automaticNameDelimiter: '~',  // 生成文件名的文件链接符\n      name: true, // 开启自定义名称效果，\n      cacheGroups: {\n    \t\tvendors: {\n        \ttest: /[\\\\/]node_modules[\\\\/]/,\n          priority: -10, // 优先级\n          filename: \"vendors.js\"\n        },\n        // default: false // false为禁止default及最后打包为vendors和入口的main\n        default: { // 打包为chunk.js vendors.js 及入口的main.js\n        \tpriority: -20, \n          reuseExistingChunk: true,\n          filename: 'chunk.js'\n        }\n    \t}\n    }\n  },\n  plugins: [ // manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化\n  \tnew webpack.DllReferencePlugin({\n      manifest: require('../dll_script/commons.manifest.json')\n    }),\n    new webpack.DllReferencePlugin({\n    \tmanifest: require('../dll_script/react.manifest.json')\n    })\n  ]\n}\n```\n\n\n- webpack.dev.js // dev 配置\n\n\n\n```javascript\nconst webpackCommon = require('./webpack.common.js');\nconst htmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nwebpackCommon.plugins.push(\n  new htmlWebpackPlugin({\n  \ttemplate: path.resolve(__dirname, '../public/index.html');\n  })\n)\nwebpackCommon.plugins.push(new CleanWebpackPlugin())\n\nconst webpackDevConfig = {\n  mode: 'development',\n\tdevtool: \"cheap-source-map\", // 映射\n  devServer: {\n    port: 8090, // 端口号\n  \topen: true, // 自动打开浏览器\n    historyApiFallback: true, // 404时返回首页\n  }\n}\n\nmodule.exports = Object.assgin(webpackDevConfig, webpackCommon);\n```\n\n\n- webpack.build.js // 打包配置\n\n\n\n```javascript\nconst webpackCommon = require('./webpackCommon.js');\nconst webpackBuildConfig = {\n\tmode: 'production'\n}\n\nmodule.exports = Object.assgin(webpackCommon, webpackBuildConfig);\n\n```\n\n\n- webpack.dll.js // 生成dll.js和json配置\n\n\n\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\n\nconst webpackDllConfig = {\n\tmode: 'production',\n  entry: {\n  \treact: ['react', 'react-dom', 'react-router', 'react-router-dom', 'mobx-react'],\n    //\tmobx-react 应该是和react有依赖关系所以要和react放到一起\n    commons: ['mobx']\n  },\n  output: {\n    filename: '[name].js',\n    path: path.resolve(__dirname, '../dll_script'),\n    library: '[name]' // 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import\n    // 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library\n  },\n  plugins: [\n    new CleanWebpackPlugin({\n    \tpath: path.resolve(__dirname, '../dll_script')\n    }),\n    new webpack.DllPlugin({\n    \tname: '[name]',\n      path: path.resolve(__dirname, '../dll_script/[name].manifest.json')\n    })\n  ]\n}\n```\n### 7. package.json 里面添加脚本命令\n\n\n```javascript\n{\n  \"name\": \"webpackDemo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack serve --config ./script/webpack.dev.js\",\n    \"build\": \"webpack --config ./script/webpack.build.js\",\n    \"dll\": \"webpack --config ./script/webpack.dll.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.7\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\n    \"@babel/preset-env\": \"^7.7.7\",\n    \"@babel/preset-react\": \"^7.7.4\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.13.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.4.0\",\n    \"file-loader\": \"^5.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.10.3\",\n    \"less-loader\": \"^5.0.0\",\n    \"style-loader\": \"^1.1.1\",\n    \"url-loader\": \"^3.0.0\",\n    \"webpack\": \"^4.41.4\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-dev-server\": \"^3.10.1\"\n  },\n  \"dependencies\": {\n    \"antd\": \"^3.26.4\",\n    \"mobx\": \"^5.15.1\",\n    \"mobx-react\": \"^6.1.4\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\",\n    \"react-router\": \"^5.1.2\",\n    \"react-router-dom\": \"^5.1.2\"\n  }\n}\n\n```\n### 8. 配置项目babel支持@修饰符\n\n- 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators\n\n\n\n- 修改.babelrc\n\n```javascript\n{\n\t\"presets\": [\n  \t\"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n    \t\"@babel/plugin-proposal-decorators\",\n      // 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前\n      {\n      \t\"legacy\": true\n      }\n    ],\n    [\n    \t\"@babel/plugin-proposal-class-properties\"\n      // 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面\n    ]\n    [\n    \t\"import\", {\n      \t\"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n9. 别名\n- webpack下设置别名\n```javascript\nresolve: {\n    extensions: ['.ts', '.tsx', '.js', '.jsx'],\n    alias: {\n      \"@\": path.resolve(__dirname, \"../src\")\n    }\n  },\n```\n\n- tsconfig.json\n```javascript\n{\n\t \"compilerOptions\": {\n     \t\"baseUrl\": \".\", // 必须有\n    \t\"paths\": {\n      \t\"@src/*\": [\"./src/*\"]\n    \t}\n   }\n}\n```\n\n10. tsconfig\n```javascript\n{\n  \"compilerOptions\": {\n    \"jsx\": \"react\",\n    \"target\": \"es5\",                          /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020', or 'ESNEXT'. */\n    \"module\": \"commonjs\",                     /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', 'es2020', or 'ESNext'. */\n    \"skipLibCheck\": true,                     /* Skip type checking of declaration files. */\n    \"strict\": true,                           /* Enable all strict type-checking options. */\n    \"allowSyntheticDefaultImports\": true,     /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */\n    \"esModuleInterop\": true,                  /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */\n    \"forceConsistentCasingInFileNames\": true, /* Disallow inconsistently-cased references to the same file. */\n    \"baseUrl\": \".\",\n    \"paths\": {\n      \"@src/*\": [\"./src/*\"]\n    }\n    /* Visit https://aka.ms/tsconfig.json to read more about this file */\n\n    /* Basic Options */\n    // \"incremental\": true,                   /* Enable incremental compilation */\n    \n    // \"lib\": [],                             /* Specify library files to be included in the compilation. */\n    // \"allowJs\": true,                       /* Allow javascript files to be compiled. */\n    // \"checkJs\": true,                       /* Report errors in .js files. */\n    // \"jsx\": \"preserve\",                     /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */\n    // \"declaration\": true,                   /* Generates corresponding '.d.ts' file. */\n    // \"declarationMap\": true,                /* Generates a sourcemap for each corresponding '.d.ts' file. */\n    // \"sourceMap\": true,                     /* Generates corresponding '.map' file. */\n    // \"outFile\": \"./\",                       /* Concatenate and emit output to single file. */\n    // \"outDir\": \"./\",                        /* Redirect output structure to the directory. */\n    // \"rootDir\": \"./\",                       /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */\n    // \"composite\": true,                     /* Enable project compilation */\n    // \"tsBuildInfoFile\": \"./\",               /* Specify file to store incremental compilation information */\n    // \"removeComments\": true,                /* Do not emit comments to output. */\n    // \"noEmit\": true,                        /* Do not emit outputs. */\n    // \"importHelpers\": true,                 /* Import emit helpers from 'tslib'. */\n    // \"downlevelIteration\": true,            /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */\n    // \"isolatedModules\": true,               /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */\n\n    /* Strict Type-Checking Options */\n    \n    // \"noImplicitAny\": true,                 /* Raise error on expressions and declarations with an implied 'any' type. */\n    // \"strictNullChecks\": true,              /* Enable strict null checks. */\n    // \"strictFunctionTypes\": true,           /* Enable strict checking of function types. */\n    // \"strictBindCallApply\": true,           /* Enable strict 'bind', 'call', and 'apply' methods on functions. */\n    // \"strictPropertyInitialization\": true,  /* Enable strict checking of property initialization in classes. */\n    // \"noImplicitThis\": true,                /* Raise error on 'this' expressions with an implied 'any' type. */\n    // \"alwaysStrict\": true,                  /* Parse in strict mode and emit \"use strict\" for each source file. */\n\n    /* Additional Checks */\n    // \"noUnusedLocals\": true,                /* Report errors on unused locals. */\n    // \"noUnusedParameters\": true,            /* Report errors on unused parameters. */\n    // \"noImplicitReturns\": true,             /* Report error when not all code paths in function return a value. */\n    // \"noFallthroughCasesInSwitch\": true,    /* Report errors for fallthrough cases in switch statement. */\n\n    /* Module Resolution Options */\n    // \"moduleResolution\": \"node\",            /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */\n    // \"baseUrl\": \"./\",                       /* Base directory to resolve non-absolute module names. */\n    // \"paths\": {},                           /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */\n    // \"rootDirs\": [],                        /* List of root folders whose combined content represents the structure of the project at runtime. */\n    // \"typeRoots\": [],                       /* List of folders to include type definitions from. */\n    // \"types\": [],                           /* Type declaration files to be included in compilation. */\n    \n    // \"preserveSymlinks\": true,              /* Do not resolve the real path of symlinks. */\n    // \"allowUmdGlobalAccess\": true,          /* Allow accessing UMD globals from modules. */\n\n    /* Source Map Options */\n    // \"sourceRoot\": \"\",                      /* Specify the location where debugger should locate TypeScript files instead of source locations. */\n    // \"mapRoot\": \"\",                         /* Specify the location where debugger should locate map files instead of generated locations. */\n    // \"inlineSourceMap\": true,               /* Emit a single file with source maps instead of having a separate file. */\n    // \"inlineSources\": true,                 /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */\n\n    /* Experimental Options */\n    // \"experimentalDecorators\": true,        /* Enables experimental support for ES7 decorators. */\n    // \"emitDecoratorMetadata\": true,         /* Enables experimental support for emitting type metadata for decorators. */\n\n    /* Advanced Options */\n  },\n  \"include\": [\n    \"src\"\n  ],    \n}\n\n```\n","slug":"webpack新建项目流程","published":1,"updated":"2021-04-09T16:40:19.257Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3ju001d1a356qw3svs0"},{"title":"react的context","date":"2019-09-08T07:59:20.000Z","_content":"\n\n\n### 作用:\n\n可以在父级组件上向下共享数据,减少props的传递\n\n### 新版用法:\n\n1. 父组件创建 Context文件\n\n\n\n```jsx\nimport React from 'react';\n\nconst MyContext = React.createContext();\nexport default MyContext;\n```\n\n2. 父级组件里面设置:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Child from './Child';\nimport MyContext from './Context'\nconst { Provider } = MyContext;\n\nexport default class Page extends Component {\n  render = () => (\n    <Provider value='hello world!'>\n      <Child />\n    </Provider>\n  )\n}\n```\n\n3. 子组件:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Sun from './sun';\nexport default class Child extends Component {\n  render() {\n    return (\n      <div>\n        <Sun/>\n      </div>\n    )\n  }\n}\n```\n\n4. 子子组件:\n\nConsumer的children要为一个函数\n\n```jsx\nimport React, { Component } from 'react';\nimport MyContext from './Context';\n\nexport default class Sun extends Component {\n  render () {\n    return (\n    <MyContext.Consumer>\n      {\n        context => context\n      }\n    </MyContext.Consumer>\n  )\n  }\n}\n```","source":"_posts/react的context.md","raw":"---\ntitle: react的context\ndate: 2019-09-08 15:59:20\ntags: [react, context]\n---\n\n\n\n### 作用:\n\n可以在父级组件上向下共享数据,减少props的传递\n\n### 新版用法:\n\n1. 父组件创建 Context文件\n\n\n\n```jsx\nimport React from 'react';\n\nconst MyContext = React.createContext();\nexport default MyContext;\n```\n\n2. 父级组件里面设置:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Child from './Child';\nimport MyContext from './Context'\nconst { Provider } = MyContext;\n\nexport default class Page extends Component {\n  render = () => (\n    <Provider value='hello world!'>\n      <Child />\n    </Provider>\n  )\n}\n```\n\n3. 子组件:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Sun from './sun';\nexport default class Child extends Component {\n  render() {\n    return (\n      <div>\n        <Sun/>\n      </div>\n    )\n  }\n}\n```\n\n4. 子子组件:\n\nConsumer的children要为一个函数\n\n```jsx\nimport React, { Component } from 'react';\nimport MyContext from './Context';\n\nexport default class Sun extends Component {\n  render () {\n    return (\n    <MyContext.Consumer>\n      {\n        context => context\n      }\n    </MyContext.Consumer>\n  )\n  }\n}\n```","slug":"react的context","published":1,"updated":"2021-04-09T15:49:52.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3k2001g1a35f3qpsqmg"},{"title":"上传中的file 类型文件生成url的两种方式","date":"2021-04-01T04:07:21.000Z","_content":"## 1.  URL.createObjectURL()\n\n\n> **`URL.createObjectURL()`** 静态方法会创建一个 [`DOMString`](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString)，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 [`document`](https://developer.mozilla.org/zh-CN/docs/Web/API/Document) 绑定。这个新的URL 对象表示指定的 [`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 对象或 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob) 对象。\n\n\n\n\n- 语法\n\n参数object 用于创建url的File对象、Blob对象或者MediaSource对象。\n```javascript\nobjectURL = URL.createObjectURL(object);\n```\n\n\n- 注意\n\n\n\n> 在每次调用 `createObjectURL()` 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 [`URL.revokeObjectURL()`](https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL) 方法来释放。\n> 浏览器在 document 卸载的时候，会自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。\n\n\n\n## 2. FileReader.readAsDataURL()\n\n\n> `**FileReader**` 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 [`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 或 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob) 对象指定要读取的文件或数据。\n> 其中File对象可以是来自用户在一个[`<input>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input)元素上选择文件后返回的[`FileList`](https://developer.mozilla.org/zh-CN/docs/Web/API/FileList)对象,也可以来自拖放操作生成的 [`DataTransfer`](https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer)对象,还可以是来自在一个[`HTMLCanvasElement`](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement)上执行`mozGetAsFile()`方法后返回结果。\n\n\n\n- 属性\n   1. FileReader.error  只读  表示读取文件时发生的错误。\n   1. FileReader.readyState 只读 表示FileReader状态的数字\n      1. 常量名    值    描述\n      1. EMPTY    0    还没有加载任何数据。\n      1. LOADING    1    数据正在被加载。\n      1. DONE    2    已完成全部的读取请求。\n   3. FileReader.result 只读 此属性仅在读取操作完成后才有效 表示文件的内容。\n- 事件\n   - onabort    该事件在读取操作发生错误的时候触发。\n   - onerror    读取发生错误的时候触发。\n   - onload    读取完成时触发。\n   - onloadstart    读取开始时触发。\n   - onloadend    读取结束时 触发 要么成功 要么失败。\n   - onprogress    读取Blob时触发。\n- 方法\n   - FileReader.abort() 中止读取操作 再返回时 readyState 属性为DONE。\n   - FileReader.readAsArrayBuffer() 开始读取Blob 或file 中的内容，一旦完成result属性中为读取文件的ArrayBuffer数据对象。\n   - FileReader.readAsBinaryString（） 开始读取指定的Blob或file的内容的， 一旦完成 result属性为读取文件的二进制数据。\n   - FileReader.readAsDataURL() 开始读取指定Blob或file的内容，一旦完成result属性为一个data：URL格式的Base64字符串。\n   - FileReader.readAsText() 开始读取指定Blob或file的内容，一旦完成result属性为一个字符串已表示文件内容。\n\n\n\n> 当 FileReader 读取文件的方式为  readAsArrayBuffer, readAsBinaryString, readAsDataURL 或者 readAsText 的时候，会触发一个 load 事件。从而可以使用  FileReader.onload 属性对该事件进行处理。\n\n\n\n```javascript\nconst rederFile = new FileReader();\n        rederFile.onload = (event) => {\n          dataURL = event.target.result; // 得到的url\n        }\nrederFile.readAsDataURL(file);\n```\n\n\n\n\n","source":"_posts/上传中的file类型文件生成url的两种方式.md","raw":"---\ntitle: 上传中的file 类型文件生成url的两种方式\ndate: 2021-04-01 12:07:21\ntags: [file,url]\n---\n## 1.  URL.createObjectURL()\n\n\n> **`URL.createObjectURL()`** 静态方法会创建一个 [`DOMString`](https://developer.mozilla.org/zh-CN/docs/Web/API/DOMString)，其中包含一个表示参数中给出的对象的URL。这个 URL 的生命周期和创建它的窗口中的 [`document`](https://developer.mozilla.org/zh-CN/docs/Web/API/Document) 绑定。这个新的URL 对象表示指定的 [`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 对象或 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob) 对象。\n\n\n\n\n- 语法\n\n参数object 用于创建url的File对象、Blob对象或者MediaSource对象。\n```javascript\nobjectURL = URL.createObjectURL(object);\n```\n\n\n- 注意\n\n\n\n> 在每次调用 `createObjectURL()` 方法时，都会创建一个新的 URL 对象，即使你已经用相同的对象作为参数创建过。当不再需要这些 URL 对象时，每个对象必须通过调用 [`URL.revokeObjectURL()`](https://developer.mozilla.org/zh-CN/docs/Web/API/URL/revokeObjectURL) 方法来释放。\n> 浏览器在 document 卸载的时候，会自动释放它们，但是为了获得最佳性能和内存使用状况，你应该在安全的时机主动释放掉它们。\n\n\n\n## 2. FileReader.readAsDataURL()\n\n\n> `**FileReader**` 对象允许Web应用程序异步读取存储在用户计算机上的文件（或原始数据缓冲区）的内容，使用 [`File`](https://developer.mozilla.org/zh-CN/docs/Web/API/File) 或 [`Blob`](https://developer.mozilla.org/zh-CN/docs/Web/API/Blob) 对象指定要读取的文件或数据。\n> 其中File对象可以是来自用户在一个[`<input>`](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input)元素上选择文件后返回的[`FileList`](https://developer.mozilla.org/zh-CN/docs/Web/API/FileList)对象,也可以来自拖放操作生成的 [`DataTransfer`](https://developer.mozilla.org/zh-CN/docs/Web/API/DataTransfer)对象,还可以是来自在一个[`HTMLCanvasElement`](https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCanvasElement)上执行`mozGetAsFile()`方法后返回结果。\n\n\n\n- 属性\n   1. FileReader.error  只读  表示读取文件时发生的错误。\n   1. FileReader.readyState 只读 表示FileReader状态的数字\n      1. 常量名    值    描述\n      1. EMPTY    0    还没有加载任何数据。\n      1. LOADING    1    数据正在被加载。\n      1. DONE    2    已完成全部的读取请求。\n   3. FileReader.result 只读 此属性仅在读取操作完成后才有效 表示文件的内容。\n- 事件\n   - onabort    该事件在读取操作发生错误的时候触发。\n   - onerror    读取发生错误的时候触发。\n   - onload    读取完成时触发。\n   - onloadstart    读取开始时触发。\n   - onloadend    读取结束时 触发 要么成功 要么失败。\n   - onprogress    读取Blob时触发。\n- 方法\n   - FileReader.abort() 中止读取操作 再返回时 readyState 属性为DONE。\n   - FileReader.readAsArrayBuffer() 开始读取Blob 或file 中的内容，一旦完成result属性中为读取文件的ArrayBuffer数据对象。\n   - FileReader.readAsBinaryString（） 开始读取指定的Blob或file的内容的， 一旦完成 result属性为读取文件的二进制数据。\n   - FileReader.readAsDataURL() 开始读取指定Blob或file的内容，一旦完成result属性为一个data：URL格式的Base64字符串。\n   - FileReader.readAsText() 开始读取指定Blob或file的内容，一旦完成result属性为一个字符串已表示文件内容。\n\n\n\n> 当 FileReader 读取文件的方式为  readAsArrayBuffer, readAsBinaryString, readAsDataURL 或者 readAsText 的时候，会触发一个 load 事件。从而可以使用  FileReader.onload 属性对该事件进行处理。\n\n\n\n```javascript\nconst rederFile = new FileReader();\n        rederFile.onload = (event) => {\n          dataURL = event.target.result; // 得到的url\n        }\nrederFile.readAsDataURL(file);\n```\n\n\n\n\n","slug":"上传中的file类型文件生成url的两种方式","published":1,"updated":"2021-04-09T16:37:30.817Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3k8001i1a35gf9pqq4s"},{"title":"react的displayName、defaultProps、proptype、static到底是什么?","date":"2019-09-08T07:50:55.000Z","_content":"\n### displayName:\n\n> `displayName` 字符串多用于调试消息。通常，你不需要设置它，因为它可以根据函数组件或 class 组件的名称推断出来。如果调试时需要显示不同的名称或创建高阶组件，请参阅[使用 displayname 轻松进行调试](https://zh-hans.reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging)了解更多。\n\n### defaultProps:\n\n   deaultProps用的时候需要添加static 也就是需要添加到class的静态属性里面,当此组件的父级没有传入props属性时, 此组件会用defaultProps里面的属性; defaultProps 会添加到组件的this.props里面,跟从父级传递过来一样\n\n\n\n```js\n// Resolve default props react 源码\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n```\n\n### static:\n\n> ### 类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\n\n父类中的静态方法和属性 不能通过new() 实例化的child继承,\n\n但是 通过extend 继承的child是可以继承父类的静态方法和属性的\n\n### proptype:\n\n类似typescript的react自带的类型检查\n\n\n\n```js\n// 数组、布尔、函数、数字、对象、字符串、symbol\nMyComponent.propTypes = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 你也可以声明一个 prop 是类的一个实例。\n  // 使用 JS 的 instanceof 运算符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以声明 prop 是特定的值，类似于枚举\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 一个对象可以是多种类型其中之一\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 一个某种类型的数组\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 属性值为某种类型的对象\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 一个特定形式的对象\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任何数据类型的值\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，\n  // 因为这不会在 `oneOfType` 类型的验证器中起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。\n  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，\n  // 以及当前元素的键值。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n### 限制单个子代\n\n```jsx\n// 组件\nconst OnlyOneChild = props => {\n  const children = props.children\n  return <div>{children}</div>\n}\nOnlyOneChild.propTypes = {\n  children: PropTypes.element.isRequired\n}\n\n// 容器\n<OnlyOneChild>\n  <h3>第一个子节点</h3>\n  <h3>第二个子节点</h3>\n</OnlyOneChild>\n```","source":"_posts/react的displayName、defaultProps、proptype、static到底是什么.md","raw":"---\ntitle: react的displayName、defaultProps、proptype、static到底是什么?\ndate: 2019-09-08 15:50:55\ntags: [displayName, defaultProps, prototype, static]\n---\n\n### displayName:\n\n> `displayName` 字符串多用于调试消息。通常，你不需要设置它，因为它可以根据函数组件或 class 组件的名称推断出来。如果调试时需要显示不同的名称或创建高阶组件，请参阅[使用 displayname 轻松进行调试](https://zh-hans.reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging)了解更多。\n\n### defaultProps:\n\n   deaultProps用的时候需要添加static 也就是需要添加到class的静态属性里面,当此组件的父级没有传入props属性时, 此组件会用defaultProps里面的属性; defaultProps 会添加到组件的this.props里面,跟从父级传递过来一样\n\n\n\n```js\n// Resolve default props react 源码\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n```\n\n### static:\n\n> ### 类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\n\n父类中的静态方法和属性 不能通过new() 实例化的child继承,\n\n但是 通过extend 继承的child是可以继承父类的静态方法和属性的\n\n### proptype:\n\n类似typescript的react自带的类型检查\n\n\n\n```js\n// 数组、布尔、函数、数字、对象、字符串、symbol\nMyComponent.propTypes = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 你也可以声明一个 prop 是类的一个实例。\n  // 使用 JS 的 instanceof 运算符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以声明 prop 是特定的值，类似于枚举\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 一个对象可以是多种类型其中之一\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 一个某种类型的数组\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 属性值为某种类型的对象\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 一个特定形式的对象\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任何数据类型的值\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，\n  // 因为这不会在 `oneOfType` 类型的验证器中起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。\n  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，\n  // 以及当前元素的键值。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n### 限制单个子代\n\n```jsx\n// 组件\nconst OnlyOneChild = props => {\n  const children = props.children\n  return <div>{children}</div>\n}\nOnlyOneChild.propTypes = {\n  children: PropTypes.element.isRequired\n}\n\n// 容器\n<OnlyOneChild>\n  <h3>第一个子节点</h3>\n  <h3>第二个子节点</h3>\n</OnlyOneChild>\n```","slug":"react的displayName、defaultProps、proptype、static到底是什么","published":1,"updated":"2021-04-09T15:49:52.940Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3ke001k1a35q8d9s7yb"},{"title":"如何获取图片的尺寸？","date":"2021-04-01T04:07:21.000Z","_content":"\n- 通过Image来获取\n- 生成Image示例 new Image()\n- 给实例添加src地址\n- 实例onload的时候可以通过width和height获得\n```javascript\nconst image = new Image();\nimage.src = dataURL;\nimage.onload = () => {\n\tconsole.log(image.width, image.height);\n}\n```\n\n\n","source":"_posts/如何获取图片的尺寸？.md","raw":"---\ntitle: 如何获取图片的尺寸？\ndate: 2021-04-01 12:07:21\ntags: [图片尺寸]\n---\n\n- 通过Image来获取\n- 生成Image示例 new Image()\n- 给实例添加src地址\n- 实例onload的时候可以通过width和height获得\n```javascript\nconst image = new Image();\nimage.src = dataURL;\nimage.onload = () => {\n\tconsole.log(image.width, image.height);\n}\n```\n\n\n","slug":"如何获取图片的尺寸？","published":1,"updated":"2021-04-09T16:36:32.092Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3kk001n1a35990p6qfq"},{"title":"react的高阶组件","date":"2019-09-08T07:57:21.000Z","_content":"\n> *高阶组件就是一个函数，传给它一个组件，它返回一个新的组件*。新的组件使用传入的组件作为子组件。\n\n> *高阶组件的作用是用于代码复用*，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。\n\n> *新的组件和传入的组件通过 props 传递信息*。\n\n### 整体逻辑原理:\n\nbase组件 以参数形式传递进入 高阶函数, 高阶函数里面的 wrap组件作为父级render自己base组件,\n\n通过wrap组件的一系列逻辑处理, 将不同的props传递给base组件,生成不同的wrap组件,然后return wrap组件\n\n\n\n### base组件:\n\n\n\n```jsx\nclass base extend Component {\n  render() {\n    return (\n    <input value={this.props.data} />\n    )\n  }\n}\n```\n\n\n\n### 高阶函数:\n\n\n\n```jsx\nhigherOrder = (MyComponent, index, ...params) => {\n  class Wrap extend Component {\n    state = {\n      datas: [\n        1,2,3,4,5\n      ]\n    }\n    render() {\n    return (\n      <MyComponent data={this.state.datas[index]} />\n    );\n    }\n  }\n  return Wrap\n}\n```\n\n\n\n### 调用:\n\n\n\n```jsx\nimport higherOrder from './higerOrder' // 高阶函数的路径(引入高阶函数)\nconst newBase = higherOrder(base, 0); // base组件, index \nexport default newBase; // 这样可以抛出多个input组件且其值与传入的index有关\n```","source":"_posts/react的高阶组件.md","raw":"---\ntitle: react的高阶组件\ndate: 2019-09-08 15:57:21\ntags: [react, 高阶组件]\n---\n\n> *高阶组件就是一个函数，传给它一个组件，它返回一个新的组件*。新的组件使用传入的组件作为子组件。\n\n> *高阶组件的作用是用于代码复用*，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。\n\n> *新的组件和传入的组件通过 props 传递信息*。\n\n### 整体逻辑原理:\n\nbase组件 以参数形式传递进入 高阶函数, 高阶函数里面的 wrap组件作为父级render自己base组件,\n\n通过wrap组件的一系列逻辑处理, 将不同的props传递给base组件,生成不同的wrap组件,然后return wrap组件\n\n\n\n### base组件:\n\n\n\n```jsx\nclass base extend Component {\n  render() {\n    return (\n    <input value={this.props.data} />\n    )\n  }\n}\n```\n\n\n\n### 高阶函数:\n\n\n\n```jsx\nhigherOrder = (MyComponent, index, ...params) => {\n  class Wrap extend Component {\n    state = {\n      datas: [\n        1,2,3,4,5\n      ]\n    }\n    render() {\n    return (\n      <MyComponent data={this.state.datas[index]} />\n    );\n    }\n  }\n  return Wrap\n}\n```\n\n\n\n### 调用:\n\n\n\n```jsx\nimport higherOrder from './higerOrder' // 高阶函数的路径(引入高阶函数)\nconst newBase = higherOrder(base, 0); // base组件, index \nexport default newBase; // 这样可以抛出多个input组件且其值与传入的index有关\n```","slug":"react的高阶组件","published":1,"updated":"2021-04-09T15:49:52.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3kp001o1a355we2ljim"},{"title":"数组对象去重","date":"2019-09-08T07:33:22.000Z","_content":"\n#### 原理:\n\n1. 将对象里的某一属性,添加到hash中以区别是否重复,给item添加flag标识,\n\n2. 后面通过filter flag去重\n\n```js\ndata = [\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 1231,\n  label: haha1\n  }\n]\n\n\n@action norepeat = (data) => { // 根据对象里的value值去重\n  const hash = [];\n  data.forEach(item => {\n    if (hash.indexOf(item.value) === -1) {\n      item.flag = true;\n      hash.push(item.value);\n  };\n  })\n  return data.filter(item => item.flag);\n};\n```","source":"_posts/数组对象去重.md","raw":"---\ntitle: 数组对象去重\ndate: 2019-09-08 15:33:22\ntags: [数组对象,去重]\n---\n\n#### 原理:\n\n1. 将对象里的某一属性,添加到hash中以区别是否重复,给item添加flag标识,\n\n2. 后面通过filter flag去重\n\n```js\ndata = [\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 1231,\n  label: haha1\n  }\n]\n\n\n@action norepeat = (data) => { // 根据对象里的value值去重\n  const hash = [];\n  data.forEach(item => {\n    if (hash.indexOf(item.value) === -1) {\n      item.flag = true;\n      hash.push(item.value);\n  };\n  })\n  return data.filter(item => item.flag);\n};\n```","slug":"数组对象去重","published":1,"updated":"2021-04-09T16:34:12.044Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3kv001q1a357ub6xes7"},{"title":"webpack构建react开发环境","date":"2019-09-08T07:29:18.000Z","_content":"\n\n\n### 创建项目\n\n```\nnpm init -y\n```\n\n\n\n### 安装依赖\n\n\n\n- 安装react\n\n\n\n```\nnpm i react react-dom --save\n```\n\n\n\n\n\n- 安装babel\n\n\n\n```\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react babel-plugin-import --D\n```\n\n\n\n\n\n- 安装webpack\n\n\n\n```\nnpm i webpack webpack-cli webpack-dev-server --D\n```\n\n\n\n\n\n### 创建webpack和babel配置文件\n\n\n\n- 创建 .babelrc文件\n\n\n\n```js\n\"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\n    [\"import\", { //按需加载antd样式\n       \"libraryName\": \"antd\",\n      \"libraryDirectory\": \"es\",\n      \"style\": \"css\"\n     }]\n  ]\n}\n```\n\n\n\n- 创建webpack,config.js 文件\n\n\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  mode: 'development', // 开发环境\n  devtool: 'eval-source-map', // 报错映射\n  entry: './index.js', //入口\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [\n              ['import',{libraryName: 'antd',style: 'css'}]\n            ]\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      {\n        test: /\\.less$/,\n        use: ['style-loader','css-loader','less-loader'], // 顺序从右往左写\n        exclude: /node_modules/ //  排除antd的less样式\n      },\n      {\n        test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n        use:['url-loader']\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({ // 设置html模板\n      title: 'test',\n      template: './public/index.html'\n    })\n  ],\n  resolve: {\n    alias: { // 创建别名\n      '@src': path.resolve(__dirname,'src'),\n      'components': path.resolve(__dirname,\"src/componts/\")\n    }\n  }\n}\n```\n\n\n\n### package.json 文件里面添加快捷命令\n\n\n\n```js\n\"build\": \"webpack\",\n\"start\": \"webpack-dev-server --open --mode development --history-api-fallback\"\n```\n\n","source":"_posts/webpack构建react开发环境.md","raw":"---\ntitle: webpack构建react开发环境\ndate: 2019-09-08 15:29:18\ntags: [webpack, react, 开发环境]\n---\n\n\n\n### 创建项目\n\n```\nnpm init -y\n```\n\n\n\n### 安装依赖\n\n\n\n- 安装react\n\n\n\n```\nnpm i react react-dom --save\n```\n\n\n\n\n\n- 安装babel\n\n\n\n```\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react babel-plugin-import --D\n```\n\n\n\n\n\n- 安装webpack\n\n\n\n```\nnpm i webpack webpack-cli webpack-dev-server --D\n```\n\n\n\n\n\n### 创建webpack和babel配置文件\n\n\n\n- 创建 .babelrc文件\n\n\n\n```js\n\"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\n    [\"import\", { //按需加载antd样式\n       \"libraryName\": \"antd\",\n      \"libraryDirectory\": \"es\",\n      \"style\": \"css\"\n     }]\n  ]\n}\n```\n\n\n\n- 创建webpack,config.js 文件\n\n\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  mode: 'development', // 开发环境\n  devtool: 'eval-source-map', // 报错映射\n  entry: './index.js', //入口\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [\n              ['import',{libraryName: 'antd',style: 'css'}]\n            ]\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      {\n        test: /\\.less$/,\n        use: ['style-loader','css-loader','less-loader'], // 顺序从右往左写\n        exclude: /node_modules/ //  排除antd的less样式\n      },\n      {\n        test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n        use:['url-loader']\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({ // 设置html模板\n      title: 'test',\n      template: './public/index.html'\n    })\n  ],\n  resolve: {\n    alias: { // 创建别名\n      '@src': path.resolve(__dirname,'src'),\n      'components': path.resolve(__dirname,\"src/componts/\")\n    }\n  }\n}\n```\n\n\n\n### package.json 文件里面添加快捷命令\n\n\n\n```js\n\"build\": \"webpack\",\n\"start\": \"webpack-dev-server --open --mode development --history-api-fallback\"\n```\n\n","slug":"webpack构建react开发环境","published":1,"updated":"2021-04-09T15:49:52.941Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3l0001r1a3522kiefjw"},{"title":"给Icon添加ToolTip的坑","date":"2021-04-01T04:07:21.000Z","_content":"再给iconfont 添加tooltip时 不能直接在iconfont外面套用，否则不显示\n需要添加一层标签才能显示\n错误代码： 不显示tooltip\n\n```jsx\n<Tooltip title={row.errorMessage || '计算异常，请重新创建媒介策略'}>\n  <Icon  className=\"error_message\" type=\"icon-xinxi1\" scriptUrl/>\n</Tooltip>\n```\n正确代码：\n\n```jsx\n<Tooltip title={row.errorMessage || '计算异常，请重新创建媒介策略'}>\n  <span>\n    <Icon  className=\"error_message\" type=\"icon-xinxi1\" scriptUrl/>\n  </span>\n</Tooltip>\n```\n\n","source":"_posts/给Icon添加ToolTip的坑.md","raw":"---\ntitle: 给Icon添加ToolTip的坑\ndate: 2021-04-01 12:07:21\ntags: [tootip]\n---\n再给iconfont 添加tooltip时 不能直接在iconfont外面套用，否则不显示\n需要添加一层标签才能显示\n错误代码： 不显示tooltip\n\n```jsx\n<Tooltip title={row.errorMessage || '计算异常，请重新创建媒介策略'}>\n  <Icon  className=\"error_message\" type=\"icon-xinxi1\" scriptUrl/>\n</Tooltip>\n```\n正确代码：\n\n```jsx\n<Tooltip title={row.errorMessage || '计算异常，请重新创建媒介策略'}>\n  <span>\n    <Icon  className=\"error_message\" type=\"icon-xinxi1\" scriptUrl/>\n  </span>\n</Tooltip>\n```\n\n","slug":"给Icon添加ToolTip的坑","published":1,"updated":"2021-04-09T16:37:17.476Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3l5001t1a357msn91nv"},{"title":"图片在父级里面填充铺满","date":"2019-09-08T07:45:33.000Z","_content":"\n\n\n使图片能在父级里面填充不拉伸, 以长度或宽度其中最大的填充缩放\n\n```css\nmax-width: 100%;\nmax-height: 100%;\nbackground-size: cover;\n```\n\n","source":"_posts/图片在父级里面填充铺满.md","raw":"---\ntitle: 图片在父级里面填充铺满\ndate: 2019-09-08 15:45:33\ntags: [cover, 填充铺满, 图片]\n---\n\n\n\n使图片能在父级里面填充不拉伸, 以长度或宽度其中最大的填充缩放\n\n```css\nmax-width: 100%;\nmax-height: 100%;\nbackground-size: cover;\n```\n\n","slug":"图片在父级里面填充铺满","published":1,"updated":"2021-04-09T15:49:52.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3la001u1a35zg21wbx0"},{"title":"对于async和await的理解","date":"2019-09-08T07:37:30.000Z","_content":"\n**await 只能出现在 async 函数中(每个await外面肯定有一个async);**\n\n**async 声明一个异步函数, await等待一个异步函数**\n\n#### 在await里面return 一个结果,其实返回的是个Promise对象\n\n- 可以通过then的方式获取值;\n\n- await可以获取返回的promise里的值\n\n\n\n**await 可以等待promise也可以为常量 (个人理解为异步或同步)**\n\n---\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，`await` 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。\n\n---\n如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n\n---\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n\n> 看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。","source":"_posts/对于async和await的理解.md","raw":"---\ntitle: 对于async和await的理解\ndate: 2019-09-08 15:37:30\ntags: [async, await]\n---\n\n**await 只能出现在 async 函数中(每个await外面肯定有一个async);**\n\n**async 声明一个异步函数, await等待一个异步函数**\n\n#### 在await里面return 一个结果,其实返回的是个Promise对象\n\n- 可以通过then的方式获取值;\n\n- await可以获取返回的promise里的值\n\n\n\n**await 可以等待promise也可以为常量 (个人理解为异步或同步)**\n\n---\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，`await` 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。\n\n---\n如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n\n---\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n\n> 看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。","slug":"对于async和await的理解","published":1,"updated":"2021-04-09T15:49:52.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3lf001w1a352xch2359"},{"title":"通过Form.create创建的form域","date":"2021-04-01T04:07:21.000Z","_content":"详细看官网文档:\n\n被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:\nconst options = {\nvaluePropName: 'checked',\ninitalValue: true\n\n}\n\ngetFieldDecorator(id, options)\n\n\n经过 `Form.create` 包装的组件将会自带 `this.props.form` 属性，`this.props.form` 提供的 API 如下：\n> 注意：使用 `getFieldsValue` `getFieldValue` `setFieldsValue` 等时，应确保对应的 field 已经用 `getFieldDecorator` 注册过了。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png#align=left&display=inline&height=829&name=%E5%9B%BE%E7%89%87.png&originHeight=829&originWidth=1367&size=413939&status=done&width=1367)\n\n### this.props.form.getFieldDecorator(id, options)[#](https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options))\n经过 `getFieldDecorator` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1. 你**不再需要也不应该**用 `onChange` 来做同步，但还是可以继续监听 `onChange` 等事件。\n\n1. 你不能用控件的 `value` `defaultValue` 等属性来设置表单域的值，默认值可以用 `getFieldDecorator` 里的 `initialValue`。\n\n1. 你不应该用 `setState`，可以使用 `this.props.form.setFieldsValue` 来动态改变表单值。\n\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png#align=left&display=inline&height=650&name=%E5%9B%BE%E7%89%87.png&originHeight=650&originWidth=1394&size=277016&status=done&width=1394)\n","source":"_posts/通过Form.create创建的form域.md","raw":"---\ntitle: 通过Form.create创建的form域\ndate: 2021-04-01 12:07:21\ntags: [form]\n---\n详细看官网文档:\n\n被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:\nconst options = {\nvaluePropName: 'checked',\ninitalValue: true\n\n}\n\ngetFieldDecorator(id, options)\n\n\n经过 `Form.create` 包装的组件将会自带 `this.props.form` 属性，`this.props.form` 提供的 API 如下：\n> 注意：使用 `getFieldsValue` `getFieldValue` `setFieldsValue` 等时，应确保对应的 field 已经用 `getFieldDecorator` 注册过了。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png#align=left&display=inline&height=829&name=%E5%9B%BE%E7%89%87.png&originHeight=829&originWidth=1367&size=413939&status=done&width=1367)\n\n### this.props.form.getFieldDecorator(id, options)[#](https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options))\n经过 `getFieldDecorator` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1. 你**不再需要也不应该**用 `onChange` 来做同步，但还是可以继续监听 `onChange` 等事件。\n\n1. 你不能用控件的 `value` `defaultValue` 等属性来设置表单域的值，默认值可以用 `getFieldDecorator` 里的 `initialValue`。\n\n1. 你不应该用 `setState`，可以使用 `this.props.form.setFieldsValue` 来动态改变表单值。\n\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png#align=left&display=inline&height=650&name=%E5%9B%BE%E7%89%87.png&originHeight=650&originWidth=1394&size=277016&status=done&width=1394)\n","slug":"通过Form.create创建的form域","published":1,"updated":"2021-04-09T16:37:41.309Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3nk001y1a352rm1txzf"},{"title":"纯CSS画的基本图形","date":"2019-09-08T07:21:51.000Z","_content":"\n# [【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么](https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html)\n\n\n\n### **网页链接：**https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\n\n------\n\n　　今天在css-tricks上看到一篇文章，那篇文章让我不禁心头一震，强大的CSS啊，居然能画出这么多基本的图形。图形包括基本的矩形、圆形、椭圆、三角形、多边形，也包括稍微复杂一点的爱心、钻石、阴阳八卦等。当然有一些需要用到CSS3的属性，所以在你打开这篇文章的时候，我希望你用的是firefox或者chrome，当然IE也能看一部分的。那好，下面就一起来看看我们是如何用纯CSS来画这些图形的，如果你也觉得很震撼，推荐给你的朋友吧。\n\n\n\n1、正方形\n\n\n\n最终效果： \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #square {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n2、长方形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #rectangle {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n 3、圆形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #circle {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 50px;\n6     -webkit-border-radius: 50px;\n7     border-radius: 50px;\n8 }\n```\n\n\n\n4、椭圆 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #oval {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 100px / 50px;\n6     -webkit-border-radius: 100px / 50px;\n7     border-radius: 100px / 50px;\n8 }\n```\n\n\n\n5、上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-up {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-bottom: 100px solid red;\n7 }\n```\n\n\n\n 6、下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-down {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-top: 100px solid red;\n7 }\n```\n\n\n\n7、左三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-left {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-right: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n8、右三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下： \n\n\n\n```\n1 #triangle-right {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-left: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n9、左上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topleft {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-right: 100px solid transparent;          \n6 }\n```\n\n\n\n10、右上三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topright {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-left: 100px solid transparent;\n6      \n7 }\n```\n\n\n\n 11、左下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomleft {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-right: 100px solid transparent;  \n6 }\n```\n\n\n\n12、右下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomright {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-left: 100px solid transparent;\n6 }\n```\n\n\n\n13、平行四边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #parallelogram {\n2     width: 150px;\n3     height: 100px;\n4     margin-left:20px;\n5     -webkit-transform: skew(20deg);\n6     -moz-transform: skew(20deg);\n7     -o-transform: skew(20deg);\n8     background: red;\n9 }\n```\n\n\n\n 14、梯形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #trapezoid {\n2     border-bottom: 100px solid red;\n3     border-left: 50px solid transparent;\n4     border-right: 50px solid transparent;\n5     height: 0;\n6     width: 100px;\n7 }\n```\n\n\n\n 15、六角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-six {\n 2     width: 0;\n 3     height: 0;\n 4     border-left: 50px solid transparent;\n 5     border-right: 50px solid transparent;\n 6     border-bottom: 100px solid red;\n 7     position: relative;\n 8 }\n 9 #star-six:after {\n10     width: 0;\n11     height: 0;\n12     border-left: 50px solid transparent;\n13     border-right: 50px solid transparent;\n14     border-top: 100px solid red;\n15     position: absolute;\n16     content: \"\";\n17     top: 30px;\n18     left: -50px;\n19 }\n```\n\n\n\n16、五角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-five {\n 2    margin: 50px 0;\n 3    position: relative;\n 4    display: block;\n 5    color: red;\n 6    width: 0px;\n 7    height: 0px;\n 8    border-right:  100px solid transparent;\n 9    border-bottom: 70px  solid red;\n10    border-left:   100px solid transparent;\n11    -moz-transform:    rotate(35deg);\n12    -webkit-transform: rotate(35deg);\n13    -ms-transform:     rotate(35deg);\n14    -o-transform:      rotate(35deg);\n15 }\n16 #star-five:before {\n17    border-bottom: 80px solid red;\n18    border-left: 30px solid transparent;\n19    border-right: 30px solid transparent;\n20    position: absolute;\n21    height: 0;\n22    width: 0;\n23    top: -45px;\n24    left: -65px;\n25    display: block;\n26    content: '';\n27    -webkit-transform: rotate(-35deg);\n28    -moz-transform:    rotate(-35deg);\n29    -ms-transform:     rotate(-35deg);\n30    -o-transform:      rotate(-35deg);\n31     \n32 }\n33 #star-five:after {\n34    position: absolute;\n35    display: block;\n36    color: red;\n37    top: 3px;\n38    left: -105px;\n39    width: 0px;\n40    height: 0px;\n41    border-right: 100px solid transparent;\n42    border-bottom: 70px solid red;\n43    border-left: 100px solid transparent;\n44    -webkit-transform: rotate(-70deg);\n45    -moz-transform:    rotate(-70deg);\n46    -ms-transform:     rotate(-70deg);\n47    -o-transform:      rotate(-70deg);\n48    content: '';\n49 }\n```\n\n\n\n17、五角大楼 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pentagon {\n 2     position: relative;\n 3     width: 54px;\n 4     border-width: 50px 18px 0;\n 5     border-style: solid;\n 6     border-color: red transparent;\n 7 }\n 8 #pentagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     height: 0;\n12     width: 0;\n13     top: -85px;\n14     left: -18px;\n15     border-width: 0 45px 35px;\n16     border-style: solid;\n17     border-color: transparent transparent red;\n18 }\n```\n\n\n\n18、六边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #hexagon {\n 2     width: 100px;\n 3     height: 55px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7 #hexagon:before {\n 8     content: \"\";\n 9     position: absolute;\n10     top: -25px;\n11     left: 0;\n12     width: 0;\n13     height: 0;\n14     border-left: 50px solid transparent;\n15     border-right: 50px solid transparent;\n16     border-bottom: 25px solid red;\n17 }\n18 #hexagon:after {\n19     content: \"\";\n20     position: absolute;\n21     bottom: -25px;\n22     left: 0;\n23     width: 0;\n24     height: 0;\n25     border-left: 50px solid transparent;\n26     border-right: 50px solid transparent;\n27     border-top: 25px solid red;\n28 }\n```\n\n\n\n19、八角形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #octagon {\n 2     width: 100px;\n 3     height: 100px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7  \n 8 #octagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;   \n13     border-bottom: 29px solid red;\n14     border-left: 29px solid #eee;\n15     border-right: 29px solid #eee;\n16     width: 42px;\n17     height: 0;\n18 }\n19  \n20 #octagon:after {\n21     content: \"\";\n22     position: absolute;\n23     bottom: 0;\n24     left: 0;   \n25     border-top: 29px solid red;\n26     border-left: 29px solid #eee;\n27     border-right: 29px solid #eee;\n28     width: 42px;\n29     height: 0;\n30 }\n```\n\n\n\n20、爱心 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #heart {\n 2     position: relative;\n 3     width: 100px;\n 4     height: 90px;\n 5 }\n 6 #heart:before,\n 7 #heart:after {\n 8     position: absolute;\n 9     content: \"\";\n10     left: 50px;\n11     top: 0;\n12     width: 50px;\n13     height: 80px;\n14     background: red;\n15     -moz-border-radius: 50px 50px 0 0;\n16     border-radius: 50px 50px 0 0;\n17     -webkit-transform: rotate(-45deg);\n18        -moz-transform: rotate(-45deg);\n19         -ms-transform: rotate(-45deg);\n20          -o-transform: rotate(-45deg);\n21             transform: rotate(-45deg);\n22     -webkit-transform-origin: 0 100%;\n23        -moz-transform-origin: 0 100%;\n24         -ms-transform-origin: 0 100%;\n25          -o-transform-origin: 0 100%;\n26             transform-origin: 0 100%;\n27 }\n28 #heart:after {\n29     left: 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35     -webkit-transform-origin: 100% 100%;\n36        -moz-transform-origin: 100% 100%;\n37         -ms-transform-origin: 100% 100%;\n38          -o-transform-origin: 100% 100%;\n39             transform-origin :100% 100%;\n40 }\n```\n\n\n\n21、无穷大符号 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #infinity {\n 2     position: relative;\n 3     width: 212px;\n 4     height: 100px;\n 5 }\n 6  \n 7 #infinity:before,\n 8 #infinity:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     width: 60px;\n14     height: 60px;   \n15     border: 20px solid red;\n16     -moz-border-radius: 50px 50px 0 50px;\n17          border-radius: 50px 50px 0 50px;\n18     -webkit-transform: rotate(-45deg);\n19        -moz-transform: rotate(-45deg);\n20         -ms-transform: rotate(-45deg);\n21          -o-transform: rotate(-45deg);\n22             transform: rotate(-45deg);\n23 }\n24  \n25 #infinity:after {\n26     left: auto;\n27     right: 0;\n28     -moz-border-radius: 50px 50px 50px 0;\n29          border-radius: 50px 50px 50px 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35 }\n```\n\n\n\n22、鸡蛋 \n\n\n\n最终效果\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n#egg {\n   display:block;\n   width: 126px;\n   height: 180px;\n   background-color: red;\n   -webkit-border-radius: 63px 63px 63px 63px / 108px 108px 72px 72px;\n   border-radius: 50%   50%  50%  50%  / 60%   60%   40%  40%;\n}\n```\n\n\n\n 23、食逗人（Pac-Man） \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pacman {\n 2   width: 0px;\n 3   height: 0px;\n 4   border-right: 60px solid transparent;\n 5   border-top: 60px solid red;\n 6   border-left: 60px solid red;\n 7   border-bottom: 60px solid red;\n 8   border-top-left-radius: 60px;\n 9   border-top-right-radius: 60px;\n10   border-bottom-left-radius: 60px;\n11   border-bottom-right-radius: 60px;\n12 }\n```\n\n\n\n24、提示对话框\n\n\n\n \n\n\n\n   \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #talkbubble {\n 2    width: 120px;\n 3    height: 80px;\n 4    background: red;\n 5    position: relative;\n 6    -moz-border-radius:    10px;\n 7    -webkit-border-radius: 10px;\n 8    border-radius:         10px;\n 9 }\n10 #talkbubble:before {\n11    content:\"\";\n12    position: absolute;\n13    right: 100%;\n14    top: 26px;\n15    width: 0;\n16    height: 0;\n17    border-top: 13px solid transparent;\n18    border-right: 26px solid red;\n19    border-bottom: 13px solid transparent;\n20 }\n```\n\n\n\n25、12角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #burst-12 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7 }\n 8 #burst-12:before, #burst-12:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     height: 80px;\n14     width: 80px;\n15     background: red;\n16 }\n17 #burst-12:before {\n18     -webkit-transform: rotate(30deg);\n19        -moz-transform: rotate(30deg);\n20         -ms-transform: rotate(30deg);\n21          -o-transform: rotate(30deg);\n22             transform: rotate(30deg);\n23 }\n24 #burst-12:after {\n25     -webkit-transform: rotate(60deg);\n26        -moz-transform: rotate(60deg);\n27         -ms-transform: rotate(60deg);\n28          -o-transform: rotate(60deg);\n29             transform: rotate(60deg);\n30 }\n```\n\n\n\n26、8角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #burst-8 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7     -webkit-transform: rotate(20deg);\n 8        -moz-transform: rotate(20deg);\n 9         -ms-transform: rotate(20deg);\n10          -o-transform: rotate(20eg);\n11             transform: rotate(20deg);\n12 }\n13 #burst-8:before {\n14     content: \"\";\n15     position: absolute;\n16     top: 0;\n17     left: 0;\n18     height: 80px;\n19     width: 80px;\n20     background: red;\n21     -webkit-transform: rotate(135deg);\n22        -moz-transform: rotate(135deg);\n23         -ms-transform: rotate(135deg);\n24          -o-transform: rotate(135deg);\n25             transform: rotate(135deg);\n26 }\n```\n\n\n\n27、钻石 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #cut-diamond {\n 2     border-style: solid;\n 3     border-color: transparent transparent red transparent;\n 4     border-width: 0 25px 25px 25px;\n 5     height: 0;\n 6     width: 50px;\n 7     position: relative;\n 8     margin: 20px 0 50px 0;\n 9 }\n10 #cut-diamond:after {\n11     content: \"\";\n12     position: absolute;\n13     top: 25px;\n14     left: -25px;\n15     width: 0;\n16     height: 0;\n17     border-style: solid;\n18     border-color: red transparent transparent transparent;\n19     border-width: 70px 50px 0 50px;\n20 }\n```\n\n\n\n28、阴阳八卦（霸气的这个）\n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #yin-yang {\n 2     width: 96px;\n 3     height: 48px;\n 4     background: #eee;\n 5     border-color: red;\n 6     border-style: solid;\n 7     border-width: 2px 2px 50px 2px;\n 8     border-radius: 100%;\n 9     position: relative;\n10 }\n11  \n12 #yin-yang:before {\n13     content: \"\";\n14     position: absolute;\n15     top: 50%;\n16     left: 0;\n17     background: #eee;\n18     border: 18px solid red;\n19     border-radius: 100%;\n20     width: 12px;\n21     height: 12px;\n22 }\n23  \n24 #yin-yang:after {\n25     content: \"\";\n26     position: absolute;\n27     top: 50%;\n28     left: 50%;\n29     background: red;\n30     border: 18px solid #eee;\n31     border-radius:100%;\n32     width: 12px;\n33     height: 12px;\n34 }\n```\n\n\n\n　　好了，就到这里了，一共28个，个人觉得后面几个比较犀利。这些代码的来源是[css-tricks](http://css-tricks.com/examples/ShapesOfCSS/)。由[青藤屋](http://www.itivy.com/ivy)博客整理，转载请保留原文链接：\n\n\n\nhttp://www.itivy.com/ivy/archive/2012/1/16/css-shape.html","source":"_posts/纯CSS画的基本图形.md","raw":"---\ntitle: 纯CSS画的基本图形\ndate: 2019-09-08 15:21:51\ntags: [css, 图形]\n---\n\n# [【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么](https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html)\n\n\n\n### **网页链接：**https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\n\n------\n\n　　今天在css-tricks上看到一篇文章，那篇文章让我不禁心头一震，强大的CSS啊，居然能画出这么多基本的图形。图形包括基本的矩形、圆形、椭圆、三角形、多边形，也包括稍微复杂一点的爱心、钻石、阴阳八卦等。当然有一些需要用到CSS3的属性，所以在你打开这篇文章的时候，我希望你用的是firefox或者chrome，当然IE也能看一部分的。那好，下面就一起来看看我们是如何用纯CSS来画这些图形的，如果你也觉得很震撼，推荐给你的朋友吧。\n\n\n\n1、正方形\n\n\n\n最终效果： \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #square {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n2、长方形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #rectangle {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n 3、圆形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #circle {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 50px;\n6     -webkit-border-radius: 50px;\n7     border-radius: 50px;\n8 }\n```\n\n\n\n4、椭圆 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #oval {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 100px / 50px;\n6     -webkit-border-radius: 100px / 50px;\n7     border-radius: 100px / 50px;\n8 }\n```\n\n\n\n5、上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-up {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-bottom: 100px solid red;\n7 }\n```\n\n\n\n 6、下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-down {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-top: 100px solid red;\n7 }\n```\n\n\n\n7、左三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-left {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-right: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n8、右三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下： \n\n\n\n```\n1 #triangle-right {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-left: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n9、左上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topleft {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-right: 100px solid transparent;          \n6 }\n```\n\n\n\n10、右上三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topright {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-left: 100px solid transparent;\n6      \n7 }\n```\n\n\n\n 11、左下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomleft {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-right: 100px solid transparent;  \n6 }\n```\n\n\n\n12、右下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomright {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-left: 100px solid transparent;\n6 }\n```\n\n\n\n13、平行四边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #parallelogram {\n2     width: 150px;\n3     height: 100px;\n4     margin-left:20px;\n5     -webkit-transform: skew(20deg);\n6     -moz-transform: skew(20deg);\n7     -o-transform: skew(20deg);\n8     background: red;\n9 }\n```\n\n\n\n 14、梯形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #trapezoid {\n2     border-bottom: 100px solid red;\n3     border-left: 50px solid transparent;\n4     border-right: 50px solid transparent;\n5     height: 0;\n6     width: 100px;\n7 }\n```\n\n\n\n 15、六角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-six {\n 2     width: 0;\n 3     height: 0;\n 4     border-left: 50px solid transparent;\n 5     border-right: 50px solid transparent;\n 6     border-bottom: 100px solid red;\n 7     position: relative;\n 8 }\n 9 #star-six:after {\n10     width: 0;\n11     height: 0;\n12     border-left: 50px solid transparent;\n13     border-right: 50px solid transparent;\n14     border-top: 100px solid red;\n15     position: absolute;\n16     content: \"\";\n17     top: 30px;\n18     left: -50px;\n19 }\n```\n\n\n\n16、五角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-five {\n 2    margin: 50px 0;\n 3    position: relative;\n 4    display: block;\n 5    color: red;\n 6    width: 0px;\n 7    height: 0px;\n 8    border-right:  100px solid transparent;\n 9    border-bottom: 70px  solid red;\n10    border-left:   100px solid transparent;\n11    -moz-transform:    rotate(35deg);\n12    -webkit-transform: rotate(35deg);\n13    -ms-transform:     rotate(35deg);\n14    -o-transform:      rotate(35deg);\n15 }\n16 #star-five:before {\n17    border-bottom: 80px solid red;\n18    border-left: 30px solid transparent;\n19    border-right: 30px solid transparent;\n20    position: absolute;\n21    height: 0;\n22    width: 0;\n23    top: -45px;\n24    left: -65px;\n25    display: block;\n26    content: '';\n27    -webkit-transform: rotate(-35deg);\n28    -moz-transform:    rotate(-35deg);\n29    -ms-transform:     rotate(-35deg);\n30    -o-transform:      rotate(-35deg);\n31     \n32 }\n33 #star-five:after {\n34    position: absolute;\n35    display: block;\n36    color: red;\n37    top: 3px;\n38    left: -105px;\n39    width: 0px;\n40    height: 0px;\n41    border-right: 100px solid transparent;\n42    border-bottom: 70px solid red;\n43    border-left: 100px solid transparent;\n44    -webkit-transform: rotate(-70deg);\n45    -moz-transform:    rotate(-70deg);\n46    -ms-transform:     rotate(-70deg);\n47    -o-transform:      rotate(-70deg);\n48    content: '';\n49 }\n```\n\n\n\n17、五角大楼 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pentagon {\n 2     position: relative;\n 3     width: 54px;\n 4     border-width: 50px 18px 0;\n 5     border-style: solid;\n 6     border-color: red transparent;\n 7 }\n 8 #pentagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     height: 0;\n12     width: 0;\n13     top: -85px;\n14     left: -18px;\n15     border-width: 0 45px 35px;\n16     border-style: solid;\n17     border-color: transparent transparent red;\n18 }\n```\n\n\n\n18、六边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #hexagon {\n 2     width: 100px;\n 3     height: 55px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7 #hexagon:before {\n 8     content: \"\";\n 9     position: absolute;\n10     top: -25px;\n11     left: 0;\n12     width: 0;\n13     height: 0;\n14     border-left: 50px solid transparent;\n15     border-right: 50px solid transparent;\n16     border-bottom: 25px solid red;\n17 }\n18 #hexagon:after {\n19     content: \"\";\n20     position: absolute;\n21     bottom: -25px;\n22     left: 0;\n23     width: 0;\n24     height: 0;\n25     border-left: 50px solid transparent;\n26     border-right: 50px solid transparent;\n27     border-top: 25px solid red;\n28 }\n```\n\n\n\n19、八角形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #octagon {\n 2     width: 100px;\n 3     height: 100px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7  \n 8 #octagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;   \n13     border-bottom: 29px solid red;\n14     border-left: 29px solid #eee;\n15     border-right: 29px solid #eee;\n16     width: 42px;\n17     height: 0;\n18 }\n19  \n20 #octagon:after {\n21     content: \"\";\n22     position: absolute;\n23     bottom: 0;\n24     left: 0;   \n25     border-top: 29px solid red;\n26     border-left: 29px solid #eee;\n27     border-right: 29px solid #eee;\n28     width: 42px;\n29     height: 0;\n30 }\n```\n\n\n\n20、爱心 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #heart {\n 2     position: relative;\n 3     width: 100px;\n 4     height: 90px;\n 5 }\n 6 #heart:before,\n 7 #heart:after {\n 8     position: absolute;\n 9     content: \"\";\n10     left: 50px;\n11     top: 0;\n12     width: 50px;\n13     height: 80px;\n14     background: red;\n15     -moz-border-radius: 50px 50px 0 0;\n16     border-radius: 50px 50px 0 0;\n17     -webkit-transform: rotate(-45deg);\n18        -moz-transform: rotate(-45deg);\n19         -ms-transform: rotate(-45deg);\n20          -o-transform: rotate(-45deg);\n21             transform: rotate(-45deg);\n22     -webkit-transform-origin: 0 100%;\n23        -moz-transform-origin: 0 100%;\n24         -ms-transform-origin: 0 100%;\n25          -o-transform-origin: 0 100%;\n26             transform-origin: 0 100%;\n27 }\n28 #heart:after {\n29     left: 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35     -webkit-transform-origin: 100% 100%;\n36        -moz-transform-origin: 100% 100%;\n37         -ms-transform-origin: 100% 100%;\n38          -o-transform-origin: 100% 100%;\n39             transform-origin :100% 100%;\n40 }\n```\n\n\n\n21、无穷大符号 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #infinity {\n 2     position: relative;\n 3     width: 212px;\n 4     height: 100px;\n 5 }\n 6  \n 7 #infinity:before,\n 8 #infinity:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     width: 60px;\n14     height: 60px;   \n15     border: 20px solid red;\n16     -moz-border-radius: 50px 50px 0 50px;\n17          border-radius: 50px 50px 0 50px;\n18     -webkit-transform: rotate(-45deg);\n19        -moz-transform: rotate(-45deg);\n20         -ms-transform: rotate(-45deg);\n21          -o-transform: rotate(-45deg);\n22             transform: rotate(-45deg);\n23 }\n24  \n25 #infinity:after {\n26     left: auto;\n27     right: 0;\n28     -moz-border-radius: 50px 50px 50px 0;\n29          border-radius: 50px 50px 50px 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35 }\n```\n\n\n\n22、鸡蛋 \n\n\n\n最终效果\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n#egg {\n   display:block;\n   width: 126px;\n   height: 180px;\n   background-color: red;\n   -webkit-border-radius: 63px 63px 63px 63px / 108px 108px 72px 72px;\n   border-radius: 50%   50%  50%  50%  / 60%   60%   40%  40%;\n}\n```\n\n\n\n 23、食逗人（Pac-Man） \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pacman {\n 2   width: 0px;\n 3   height: 0px;\n 4   border-right: 60px solid transparent;\n 5   border-top: 60px solid red;\n 6   border-left: 60px solid red;\n 7   border-bottom: 60px solid red;\n 8   border-top-left-radius: 60px;\n 9   border-top-right-radius: 60px;\n10   border-bottom-left-radius: 60px;\n11   border-bottom-right-radius: 60px;\n12 }\n```\n\n\n\n24、提示对话框\n\n\n\n \n\n\n\n   \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #talkbubble {\n 2    width: 120px;\n 3    height: 80px;\n 4    background: red;\n 5    position: relative;\n 6    -moz-border-radius:    10px;\n 7    -webkit-border-radius: 10px;\n 8    border-radius:         10px;\n 9 }\n10 #talkbubble:before {\n11    content:\"\";\n12    position: absolute;\n13    right: 100%;\n14    top: 26px;\n15    width: 0;\n16    height: 0;\n17    border-top: 13px solid transparent;\n18    border-right: 26px solid red;\n19    border-bottom: 13px solid transparent;\n20 }\n```\n\n\n\n25、12角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #burst-12 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7 }\n 8 #burst-12:before, #burst-12:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     height: 80px;\n14     width: 80px;\n15     background: red;\n16 }\n17 #burst-12:before {\n18     -webkit-transform: rotate(30deg);\n19        -moz-transform: rotate(30deg);\n20         -ms-transform: rotate(30deg);\n21          -o-transform: rotate(30deg);\n22             transform: rotate(30deg);\n23 }\n24 #burst-12:after {\n25     -webkit-transform: rotate(60deg);\n26        -moz-transform: rotate(60deg);\n27         -ms-transform: rotate(60deg);\n28          -o-transform: rotate(60deg);\n29             transform: rotate(60deg);\n30 }\n```\n\n\n\n26、8角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #burst-8 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7     -webkit-transform: rotate(20deg);\n 8        -moz-transform: rotate(20deg);\n 9         -ms-transform: rotate(20deg);\n10          -o-transform: rotate(20eg);\n11             transform: rotate(20deg);\n12 }\n13 #burst-8:before {\n14     content: \"\";\n15     position: absolute;\n16     top: 0;\n17     left: 0;\n18     height: 80px;\n19     width: 80px;\n20     background: red;\n21     -webkit-transform: rotate(135deg);\n22        -moz-transform: rotate(135deg);\n23         -ms-transform: rotate(135deg);\n24          -o-transform: rotate(135deg);\n25             transform: rotate(135deg);\n26 }\n```\n\n\n\n27、钻石 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #cut-diamond {\n 2     border-style: solid;\n 3     border-color: transparent transparent red transparent;\n 4     border-width: 0 25px 25px 25px;\n 5     height: 0;\n 6     width: 50px;\n 7     position: relative;\n 8     margin: 20px 0 50px 0;\n 9 }\n10 #cut-diamond:after {\n11     content: \"\";\n12     position: absolute;\n13     top: 25px;\n14     left: -25px;\n15     width: 0;\n16     height: 0;\n17     border-style: solid;\n18     border-color: red transparent transparent transparent;\n19     border-width: 70px 50px 0 50px;\n20 }\n```\n\n\n\n28、阴阳八卦（霸气的这个）\n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #yin-yang {\n 2     width: 96px;\n 3     height: 48px;\n 4     background: #eee;\n 5     border-color: red;\n 6     border-style: solid;\n 7     border-width: 2px 2px 50px 2px;\n 8     border-radius: 100%;\n 9     position: relative;\n10 }\n11  \n12 #yin-yang:before {\n13     content: \"\";\n14     position: absolute;\n15     top: 50%;\n16     left: 0;\n17     background: #eee;\n18     border: 18px solid red;\n19     border-radius: 100%;\n20     width: 12px;\n21     height: 12px;\n22 }\n23  \n24 #yin-yang:after {\n25     content: \"\";\n26     position: absolute;\n27     top: 50%;\n28     left: 50%;\n29     background: red;\n30     border: 18px solid #eee;\n31     border-radius:100%;\n32     width: 12px;\n33     height: 12px;\n34 }\n```\n\n\n\n　　好了，就到这里了，一共28个，个人觉得后面几个比较犀利。这些代码的来源是[css-tricks](http://css-tricks.com/examples/ShapesOfCSS/)。由[青藤屋](http://www.itivy.com/ivy)博客整理，转载请保留原文链接：\n\n\n\nhttp://www.itivy.com/ivy/archive/2012/1/16/css-shape.html","slug":"纯CSS画的基本图形","published":1,"updated":"2021-04-09T15:49:52.942Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3nr00211a354wbtzvjp"},{"title":"联通电视盒子软破解安装应用","date":"2019-09-01T14:20:33.000Z","_content":"\n**前段时间，家里装联通宽带了一个电视盒子 ZXV10B860AV2.1-B，emmmm，你懂的这个盒子无法安装你想要的app软件，所以就有了这篇文章。**\n\n------\n\n首先我先说一下原理：一般盒子本身会有一些你不想要的app可以安装的，我们的原理呢就是，通过这些软件中的任意一个来进行狸猫换太子，来安装当贝市场，装上这个以后就不用我多说了吧。（此方法理论上适合大多数盒子，由于我安装的时候没有截图所以，配图会很少，不是很适合小白）\n\n***\n\n\n\n#### 步骤\n\n- 下载我们需要的软件：\n\n  1. 当贝市场（找官网只需要下载链接就可以）;\n  2. 抓包软件Fiddle（官网下载）;\n\n- 设置盒子的网络连接的代理:\n\n  1. 确保安装Fiddle的电脑和盒子处于同一局域网内;\n  2. 开启Fiddler的远程连接，Fiddler 主菜单 Tools -> Fiddler Options…-> Connections页签，选中Allowremote computers to connect，并记住端口号为8888，等会设置手机代理时需要。设置好后重启fiddler保证设置生效。设置如下：![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3asufac1vj311y0kgtd6.jpg)\n  3. 普通https抓包设置(如果是https的链接就需要这一步，如果不是可以略过，因为我的不是https 所以如果是https的小伙伴可以参考:[Fiddler 如何抓取手机app包以及抓取https 响应](<https://blog.csdn.net/liujingqiu/article/details/79387909/>)进行设置即可）。\n  4. 设置盒子网络代理：网络设置-> 显示高级选项-> 代理设置 分别输入ip（你电脑开启Fiddle的ip地址），端口号是8888\n     ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3at8sbyxdj30fa08lq35.jpg)\n\n- 设置好代理后，电脑端开启Fiddle开始抓包，盒子上安装可以安装的软件，抓取对应的url后， 在Fiddle里面进行替换链接：\n  ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3atpd27loj31l00u0qh4.jpg)\n\n  \n\n  卸载之后再次下载之前点击的那个app软件，就可以把当贝市场安装上了，接下来你就可以随心所欲了。\n\n  ------\n\n  #### 总结\n\n  不同的盒子可能不同，有的盒子你在代理之后进入自带的下载界面的时候可能会有验证，可以在抓取到对应的url后先关闭AutoResponder，之后进入下载页面，再点击下载之前把它打开应该就可以了，理解了原理再来操作，就会容易多了，最后希望大家都可以成功。\n\n  \n\n  ","source":"_posts/联通电视盒子软破解安装应用.md","raw":"---\ntitle: 联通电视盒子软破解安装应用\ndate: 2019-09-01 22:20:33\ntags: [联通,电视盒子,破解,安装应用]\n---\n\n**前段时间，家里装联通宽带了一个电视盒子 ZXV10B860AV2.1-B，emmmm，你懂的这个盒子无法安装你想要的app软件，所以就有了这篇文章。**\n\n------\n\n首先我先说一下原理：一般盒子本身会有一些你不想要的app可以安装的，我们的原理呢就是，通过这些软件中的任意一个来进行狸猫换太子，来安装当贝市场，装上这个以后就不用我多说了吧。（此方法理论上适合大多数盒子，由于我安装的时候没有截图所以，配图会很少，不是很适合小白）\n\n***\n\n\n\n#### 步骤\n\n- 下载我们需要的软件：\n\n  1. 当贝市场（找官网只需要下载链接就可以）;\n  2. 抓包软件Fiddle（官网下载）;\n\n- 设置盒子的网络连接的代理:\n\n  1. 确保安装Fiddle的电脑和盒子处于同一局域网内;\n  2. 开启Fiddler的远程连接，Fiddler 主菜单 Tools -> Fiddler Options…-> Connections页签，选中Allowremote computers to connect，并记住端口号为8888，等会设置手机代理时需要。设置好后重启fiddler保证设置生效。设置如下：![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3asufac1vj311y0kgtd6.jpg)\n  3. 普通https抓包设置(如果是https的链接就需要这一步，如果不是可以略过，因为我的不是https 所以如果是https的小伙伴可以参考:[Fiddler 如何抓取手机app包以及抓取https 响应](<https://blog.csdn.net/liujingqiu/article/details/79387909/>)进行设置即可）。\n  4. 设置盒子网络代理：网络设置-> 显示高级选项-> 代理设置 分别输入ip（你电脑开启Fiddle的ip地址），端口号是8888\n     ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3at8sbyxdj30fa08lq35.jpg)\n\n- 设置好代理后，电脑端开启Fiddle开始抓包，盒子上安装可以安装的软件，抓取对应的url后， 在Fiddle里面进行替换链接：\n  ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3atpd27loj31l00u0qh4.jpg)\n\n  \n\n  卸载之后再次下载之前点击的那个app软件，就可以把当贝市场安装上了，接下来你就可以随心所欲了。\n\n  ------\n\n  #### 总结\n\n  不同的盒子可能不同，有的盒子你在代理之后进入自带的下载界面的时候可能会有验证，可以在抓取到对应的url后先关闭AutoResponder，之后进入下载页面，再点击下载之前把它打开应该就可以了，理解了原理再来操作，就会容易多了，最后希望大家都可以成功。\n\n  \n\n  ","slug":"联通电视盒子软破解安装应用","published":1,"updated":"2021-04-09T15:49:52.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3nw00231a35ryf9zikc"},{"title":"通过Form.create创建的form域","date":"2019-10-26T08:23:20.000Z","_content":"\n详细看官网文档:\n\n\n\n被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:\n\n```js\nconst options = {\n\nvaluePropName: 'checked',\n\ninitalValue: true\n\n}\n\ngetFieldDecorator(id, options)\n```\n\n\n\n\n\n经过 `Form.create` 包装的组件将会自带 `this.props.form` 属性，`this.props.form` 提供的 API 如下：\n\n> 注意：使用 `getFieldsValue` `getFieldValue` `setFieldsValue` 等时，应确保对应的 field 已经用 `getFieldDecorator` 注册过了。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png)\n\n\n\n### this.props.form.getFieldDecorator(id, options)[#](https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options))\n\n经过 `getFieldDecorator` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1. 你**不再需要也不应该**用 `onChange` 来做同步，但还是可以继续监听 `onChange` 等事件。\n2. 你不能用控件的 `value` `defaultValue` 等属性来设置表单域的值，默认值可以用 `getFieldDecorator` 里的 `initialValue`。\n3. 你不应该用 `setState`，可以使用 `this.props.form.setFieldsValue` 来动态改变表单值。\n\n\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png)","source":"_posts/通过Form-create创建的form域.md","raw":"---\ntitle: 通过Form.create创建的form域\ndate: 2019-10-26 16:23:20\ntags: [antd, form, valuePropName]\n---\n\n详细看官网文档:\n\n\n\n被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:\n\n```js\nconst options = {\n\nvaluePropName: 'checked',\n\ninitalValue: true\n\n}\n\ngetFieldDecorator(id, options)\n```\n\n\n\n\n\n经过 `Form.create` 包装的组件将会自带 `this.props.form` 属性，`this.props.form` 提供的 API 如下：\n\n> 注意：使用 `getFieldsValue` `getFieldValue` `setFieldsValue` 等时，应确保对应的 field 已经用 `getFieldDecorator` 注册过了。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png)\n\n\n\n### this.props.form.getFieldDecorator(id, options)[#](https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options))\n\n经过 `getFieldDecorator` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1. 你**不再需要也不应该**用 `onChange` 来做同步，但还是可以继续监听 `onChange` 等事件。\n2. 你不能用控件的 `value` `defaultValue` 等属性来设置表单域的值，默认值可以用 `getFieldDecorator` 里的 `initialValue`。\n3. 你不应该用 `setState`，可以使用 `this.props.form.setFieldsValue` 来动态改变表单值。\n\n\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png)","slug":"通过Form-create创建的form域","published":1,"updated":"2021-04-09T15:49:52.943Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cknajf3on00241a35695wnyl0"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cknajf3cq00001a35dx0slwbg","tag_id":"cknajf3dk00021a352v2qch59","_id":"cknajf3eh00071a35m4wvpkdt"},{"post_id":"cknajf3dc00011a35wdhy4bfl","tag_id":"cknajf3ed00061a35ytm2qykk","_id":"cknajf3f9000c1a358671jrur"},{"post_id":"cknajf3dt00031a353ua4wc2k","tag_id":"cknajf3f1000a1a35sr7z71hv","_id":"cknajf3fw000g1a35tmfno02x"},{"post_id":"cknajf3e100041a35fj4bq8yg","tag_id":"cknajf3fi000e1a35f3ybcbot","_id":"cknajf3hd000r1a35zswpyjz0"},{"post_id":"cknajf3e100041a35fj4bq8yg","tag_id":"cknajf3g5000i1a35fbluixzm","_id":"cknajf3hl000t1a351ecei13e"},{"post_id":"cknajf3e100041a35fj4bq8yg","tag_id":"cknajf3go000m1a35i51ozy9p","_id":"cknajf3hu000w1a35avjy69tr"},{"post_id":"cknajf3e800051a352cj5hjmo","tag_id":"cknajf3h5000p1a35cgnxr2c8","_id":"cknajf3jf00171a35qm9ytm5a"},{"post_id":"cknajf3e800051a352cj5hjmo","tag_id":"cknajf3hn000u1a35g2cske8d","_id":"cknajf3jl00191a356hqvkxht"},{"post_id":"cknajf3e800051a352cj5hjmo","tag_id":"cknajf3i3000y1a35w5nbi96x","_id":"cknajf3jt001c1a35f8mpinht"},{"post_id":"cknajf3e800051a352cj5hjmo","tag_id":"cknajf3il00121a35gqn01yw8","_id":"cknajf3jz001e1a35qfozlyru"},{"post_id":"cknajf3ej00081a35pdbr25v5","tag_id":"cknajf3j800151a35sppol90t","_id":"cknajf3k7001h1a356my1c0nr"},{"post_id":"cknajf3ej00081a35pdbr25v5","tag_id":"cknajf3jn001a1a35rkz909nq","_id":"cknajf3kd001j1a35vf9lqpfa"},{"post_id":"cknajf3ev00091a35x5qv00o4","tag_id":"cknajf3k0001f1a35purryocm","_id":"cknajf3kj001m1a3515mlkvdq"},{"post_id":"cknajf3f4000b1a35qohwu1ig","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3nj001x1a35g7hsuk9v"},{"post_id":"cknajf3f4000b1a35qohwu1ig","tag_id":"cknajf3kt001p1a35r23r4vtf","_id":"cknajf3np001z1a3574b3394z"},{"post_id":"cknajf3f4000b1a35qohwu1ig","tag_id":"cknajf3l4001s1a35bymw5tef","_id":"cknajf3nv00221a35va2zegrl"},{"post_id":"cknajf3fb000d1a359lveq6rx","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3oy00271a35jhdv49lp"},{"post_id":"cknajf3fb000d1a359lveq6rx","tag_id":"cknajf3np00201a3515cy8vtn","_id":"cknajf3oz00281a35vzvlg5yt"},{"post_id":"cknajf3fb000d1a359lveq6rx","tag_id":"cknajf3oq00251a355sf1fc01","_id":"cknajf3p2002a1a35vwov9yi8"},{"post_id":"cknajf3fk000f1a35nvcs8fhc","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3pa002e1a35q4yw3q5n"},{"post_id":"cknajf3fk000f1a35nvcs8fhc","tag_id":"cknajf3kt001p1a35r23r4vtf","_id":"cknajf3pa002f1a35jitce41l"},{"post_id":"cknajf3fk000f1a35nvcs8fhc","tag_id":"cknajf3p3002b1a35ipfrz2zp","_id":"cknajf3pd002h1a3598hgvnnq"},{"post_id":"cknajf3fk000f1a35nvcs8fhc","tag_id":"cknajf3p6002c1a35la471l0p","_id":"cknajf3pe002i1a35kkgihgr1"},{"post_id":"cknajf3fy000h1a35rbqp6pj7","tag_id":"cknajf3kt001p1a35r23r4vtf","_id":"cknajf3pg002k1a35a5lrjyh3"},{"post_id":"cknajf3g6000j1a35ynrtq5t7","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3pn002o1a35hhfdzsst"},{"post_id":"cknajf3g6000j1a35ynrtq5t7","tag_id":"cknajf3kt001p1a35r23r4vtf","_id":"cknajf3pn002p1a358m3w725h"},{"post_id":"cknajf3g6000j1a35ynrtq5t7","tag_id":"cknajf3pi002l1a35mn2q86xa","_id":"cknajf3pp002r1a35z0ix9zmz"},{"post_id":"cknajf3g6000j1a35ynrtq5t7","tag_id":"cknajf3pj002m1a358h73zf78","_id":"cknajf3pq002s1a35zq3i19xy"},{"post_id":"cknajf3gd000k1a35i9jtn0so","tag_id":"cknajf3pl002n1a355237s1b8","_id":"cknajf3pt002u1a35kd53n8i4"},{"post_id":"cknajf3gd000k1a35i9jtn0so","tag_id":"cknajf3po002q1a35zuf5akvl","_id":"cknajf3pt002v1a35smweqjwz"},{"post_id":"cknajf3gk000l1a35nou36tyo","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3q000301a35gn1n5p8x"},{"post_id":"cknajf3gk000l1a35nou36tyo","tag_id":"cknajf3pu002w1a3507y5iibg","_id":"cknajf3q100311a3548yqhum5"},{"post_id":"cknajf3gk000l1a35nou36tyo","tag_id":"cknajf3pw002x1a355ovvsric","_id":"cknajf3q200331a35skpb4j33"},{"post_id":"cknajf3gk000l1a35nou36tyo","tag_id":"cknajf3px002y1a35jgdq3o45","_id":"cknajf3q300341a35qg6lvfhu"},{"post_id":"cknajf3gs000n1a35nj556r3c","tag_id":"cknajf3py002z1a354nbej6uj","_id":"cknajf3q500361a35a2l2x72e"},{"post_id":"cknajf3gs000n1a35nj556r3c","tag_id":"cknajf3q100321a35raxn9ecc","_id":"cknajf3q600371a357545fe5r"},{"post_id":"cknajf3h0000o1a35zb35cr0v","tag_id":"cknajf3q400351a35f2o8o1il","_id":"cknajf3qc003b1a35ag30jcy2"},{"post_id":"cknajf3h0000o1a35zb35cr0v","tag_id":"cknajf3q700381a35qqngntvi","_id":"cknajf3qc003c1a35locz35ci"},{"post_id":"cknajf3h0000o1a35zb35cr0v","tag_id":"cknajf3q800391a35hysqzde2","_id":"cknajf3qf003e1a353cfep3hz"},{"post_id":"cknajf3h9000q1a35b6pjw1xt","tag_id":"cknajf3qa003a1a351v2dy53r","_id":"cknajf3qg003f1a35hgtrw2kb"},{"post_id":"cknajf3hh000s1a359m1zgrzo","tag_id":"cknajf3qd003d1a35yvzgws39","_id":"cknajf3qo003j1a35sunzyl8q"},{"post_id":"cknajf3hh000s1a359m1zgrzo","tag_id":"cknajf3qh003g1a35lrjbk65q","_id":"cknajf3qp003k1a35036drftk"},{"post_id":"cknajf3hh000s1a359m1zgrzo","tag_id":"cknajf3qk003h1a356b6bx9bs","_id":"cknajf3qr003m1a35bomiaozs"},{"post_id":"cknajf3hp000v1a35bhd1dxvc","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3qv003o1a35tavv9z3e"},{"post_id":"cknajf3hp000v1a35bhd1dxvc","tag_id":"cknajf3qp003l1a35foy4o5ld","_id":"cknajf3qv003p1a355umclj2a"},{"post_id":"cknajf3hw000x1a35tqos3yo0","tag_id":"cknajf3qh003g1a35lrjbk65q","_id":"cknajf3r1003t1a35kqcmpnxl"},{"post_id":"cknajf3hw000x1a35tqos3yo0","tag_id":"cknajf3qw003q1a35730uttnu","_id":"cknajf3r2003u1a352iekacgf"},{"post_id":"cknajf3hw000x1a35tqos3yo0","tag_id":"cknajf3qy003r1a35kgs43hne","_id":"cknajf3r4003w1a35zvrjq2j9"},{"post_id":"cknajf3i4000z1a35011lzvkr","tag_id":"cknajf3qz003s1a35yfhtlguq","_id":"cknajf3ro00421a35ayyxkr7u"},{"post_id":"cknajf3i4000z1a35011lzvkr","tag_id":"cknajf3r2003v1a35r8i3154x","_id":"cknajf3rp00431a3520j9ry6g"},{"post_id":"cknajf3i4000z1a35011lzvkr","tag_id":"cknajf3r5003x1a359xjt2hrh","_id":"cknajf3rr00451a35vh1otfuc"},{"post_id":"cknajf3i4000z1a35011lzvkr","tag_id":"cknajf3r6003y1a35gh0iw4x3","_id":"cknajf3rr00461a35pixutffo"},{"post_id":"cknajf3i4000z1a35011lzvkr","tag_id":"cknajf3rc003z1a35e4bqaa12","_id":"cknajf3rt00481a35sxqms94o"},{"post_id":"cknajf3i4000z1a35011lzvkr","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3rt00491a35rdy1spwb"},{"post_id":"cknajf3ia00101a350yx5pjcv","tag_id":"cknajf3rg00411a35rkjtiow8","_id":"cknajf3rw004b1a35qa3jcpkv"},{"post_id":"cknajf3ia00101a350yx5pjcv","tag_id":"cknajf3rp00441a358ilu87yy","_id":"cknajf3rx004c1a35e26kk0ob"},{"post_id":"cknajf3ia00101a350yx5pjcv","tag_id":"cknajf3rs00471a35c9lm0712","_id":"cknajf3rz004e1a35aiqbu70z"},{"post_id":"cknajf3ig00111a35gytzturd","tag_id":"cknajf3ru004a1a354p7sjvts","_id":"cknajf3s7004i1a35n3v1oclf"},{"post_id":"cknajf3ig00111a35gytzturd","tag_id":"cknajf3qh003g1a35lrjbk65q","_id":"cknajf3s8004j1a35wbspljs7"},{"post_id":"cknajf3ig00111a35gytzturd","tag_id":"cknajf3s0004f1a352503a6zl","_id":"cknajf3s9004l1a35ozxuanib"},{"post_id":"cknajf3ig00111a35gytzturd","tag_id":"cknajf3s2004g1a35oa02o1s2","_id":"cknajf3sa004m1a35xhsbmt76"},{"post_id":"cknajf3in00131a355t7o4gg2","tag_id":"cknajf3s4004h1a35o2yqej1v","_id":"cknajf3sp004r1a35ga3cga46"},{"post_id":"cknajf3in00131a355t7o4gg2","tag_id":"cknajf3s8004k1a350retyiso","_id":"cknajf3sq004s1a356zfjgmqp"},{"post_id":"cknajf3in00131a355t7o4gg2","tag_id":"cknajf3sa004n1a35olukt1lj","_id":"cknajf3sr004u1a355gqzq7ww"},{"post_id":"cknajf3in00131a355t7o4gg2","tag_id":"cknajf3qd003d1a35yvzgws39","_id":"cknajf3ss004v1a351hybhpki"},{"post_id":"cknajf3in00131a355t7o4gg2","tag_id":"cknajf3sh004p1a354bxoeq4u","_id":"cknajf3st004x1a35x2tv0fcj"},{"post_id":"cknajf3iz00141a35i1ynwq0b","tag_id":"cknajf3sj004q1a35dhmvyv0e","_id":"cknajf3sx004z1a350abl4zai"},{"post_id":"cknajf3iz00141a35i1ynwq0b","tag_id":"cknajf3sq004t1a35wvt45myh","_id":"cknajf3sy00501a357uswizwt"},{"post_id":"cknajf3iz00141a35i1ynwq0b","tag_id":"cknajf3ss004w1a35nkg0bbak","_id":"cknajf3t000521a35s9h57rgo"},{"post_id":"cknajf3ja00161a3597xdf9ke","tag_id":"cknajf3s4004h1a35o2yqej1v","_id":"cknajf3t900551a35i5947f8q"},{"post_id":"cknajf3ja00161a3597xdf9ke","tag_id":"cknajf3sy00511a35xvb38lx6","_id":"cknajf3t900561a352qma8gfl"},{"post_id":"cknajf3ja00161a3597xdf9ke","tag_id":"cknajf3t100531a35mmjwvrh1","_id":"cknajf3tb00581a35zrb3eumg"},{"post_id":"cknajf3jh00181a35quasptbq","tag_id":"cknajf3s4004h1a35o2yqej1v","_id":"cknajf3te005a1a35eytyxngk"},{"post_id":"cknajf3jh00181a35quasptbq","tag_id":"cknajf3ta00571a351i5cwj2t","_id":"cknajf3te005b1a35wk6ykekl"},{"post_id":"cknajf3jo001b1a358k96lzl8","tag_id":"cknajf3tc00591a35rfc1di1s","_id":"cknajf3tj005e1a35d97ah4pu"},{"post_id":"cknajf3jo001b1a358k96lzl8","tag_id":"cknajf3tf005c1a35burqfpxe","_id":"cknajf3tk005f1a35baty4fib"},{"post_id":"cknajf3ju001d1a356qw3svs0","tag_id":"cknajf3tc00591a35rfc1di1s","_id":"cknajf3tp005i1a35tw19e26h"},{"post_id":"cknajf3ju001d1a356qw3svs0","tag_id":"cknajf3tk005g1a35nycey2ex","_id":"cknajf3tp005j1a35pu34myhj"},{"post_id":"cknajf3k2001g1a35f3qpsqmg","tag_id":"cknajf3s4004h1a35o2yqej1v","_id":"cknajf3tt005m1a355tjfzmqp"},{"post_id":"cknajf3k2001g1a35f3qpsqmg","tag_id":"cknajf3tq005k1a352oy4arbk","_id":"cknajf3tt005n1a35w5t6n2ny"},{"post_id":"cknajf3k8001i1a35gf9pqq4s","tag_id":"cknajf3tr005l1a35un7xsv3g","_id":"cknajf3tx005q1a354a6p5wid"},{"post_id":"cknajf3k8001i1a35gf9pqq4s","tag_id":"cknajf3tu005o1a354fnok08u","_id":"cknajf3tx005r1a353hg832eq"},{"post_id":"cknajf3ke001k1a35q8d9s7yb","tag_id":"cknajf3tv005p1a359qt20i6f","_id":"cknajf3u4005w1a351vbq3wy2"},{"post_id":"cknajf3ke001k1a35q8d9s7yb","tag_id":"cknajf3ty005s1a35q9wkle6w","_id":"cknajf3u4005x1a357wq4xy6b"},{"post_id":"cknajf3ke001k1a35q8d9s7yb","tag_id":"cknajf3tz005t1a35g7vduehn","_id":"cknajf3u7005z1a35sg4dd43z"},{"post_id":"cknajf3ke001k1a35q8d9s7yb","tag_id":"cknajf3u0005u1a35h8conow0","_id":"cknajf3u700601a35w554wewt"},{"post_id":"cknajf3kk001n1a35990p6qfq","tag_id":"cknajf3u2005v1a35w991kg5c","_id":"cknajf3u900621a35tmfhw63o"},{"post_id":"cknajf3kp001o1a355we2ljim","tag_id":"cknajf3s4004h1a35o2yqej1v","_id":"cknajf3uc00641a35sz47fbva"},{"post_id":"cknajf3kp001o1a355we2ljim","tag_id":"cknajf3u800611a3539aeat7o","_id":"cknajf3ud00651a3519aem17r"},{"post_id":"cknajf3kv001q1a357ub6xes7","tag_id":"cknajf3ub00631a35tnv4fvxp","_id":"cknajf3uh00681a350j4d8cry"},{"post_id":"cknajf3kv001q1a357ub6xes7","tag_id":"cknajf3ud00661a3542cn66y6","_id":"cknajf3ui00691a35k1490mgi"},{"post_id":"cknajf3l0001r1a3522kiefjw","tag_id":"cknajf3tc00591a35rfc1di1s","_id":"cknajf3uo006d1a35yevzldjw"},{"post_id":"cknajf3l0001r1a3522kiefjw","tag_id":"cknajf3s4004h1a35o2yqej1v","_id":"cknajf3up006e1a35fhr7hn6p"},{"post_id":"cknajf3l0001r1a3522kiefjw","tag_id":"cknajf3ul006b1a35x1qimpk8","_id":"cknajf3ur006g1a35tl2n50uj"},{"post_id":"cknajf3l5001t1a357msn91nv","tag_id":"cknajf3um006c1a352nmnpiro","_id":"cknajf3ur006h1a35wit6ovtj"},{"post_id":"cknajf3la001u1a35zg21wbx0","tag_id":"cknajf3up006f1a3507uwc9hw","_id":"cknajf3ux006l1a35fvbe2u1e"},{"post_id":"cknajf3la001u1a35zg21wbx0","tag_id":"cknajf3us006i1a35ana4pbbb","_id":"cknajf3ux006m1a359g5hqosi"},{"post_id":"cknajf3la001u1a35zg21wbx0","tag_id":"cknajf3ut006j1a35uqmx7dv3","_id":"cknajf3uz006o1a35bmitslj4"},{"post_id":"cknajf3lf001w1a352xch2359","tag_id":"cknajf3uv006k1a35g9q499vq","_id":"cknajf3v1006q1a358vqmim18"},{"post_id":"cknajf3lf001w1a352xch2359","tag_id":"cknajf3uy006n1a35fcvcbvk1","_id":"cknajf3v2006r1a358c1jjmca"},{"post_id":"cknajf3nk001y1a352rm1txzf","tag_id":"cknajf3v0006p1a35tcjdaghd","_id":"cknajf3v4006t1a35uhv4v1ns"},{"post_id":"cknajf3nr00211a354wbtzvjp","tag_id":"cknajf3fi000e1a35f3ybcbot","_id":"cknajf3v7006v1a35xichmr8f"},{"post_id":"cknajf3nr00211a354wbtzvjp","tag_id":"cknajf3v2006s1a35njgltzlm","_id":"cknajf3v7006w1a35ejyez8cx"},{"post_id":"cknajf3nw00231a35ryf9zikc","tag_id":"cknajf3v5006u1a35wohf5kjw","_id":"cknajf3vf00711a35wmuyjsww"},{"post_id":"cknajf3nw00231a35ryf9zikc","tag_id":"cknajf3v7006x1a357j4dyixz","_id":"cknajf3vg00721a35zuh8exk8"},{"post_id":"cknajf3nw00231a35ryf9zikc","tag_id":"cknajf3v9006y1a358ceiszyq","_id":"cknajf3vi00741a35gb0y8zsk"},{"post_id":"cknajf3nw00231a35ryf9zikc","tag_id":"cknajf3vb006z1a35ex2hm3rs","_id":"cknajf3vi00751a354vcz89bd"},{"post_id":"cknajf3on00241a35695wnyl0","tag_id":"cknajf3kh001l1a35cxcoar10","_id":"cknajf3vj00761a3570se75p2"},{"post_id":"cknajf3on00241a35695wnyl0","tag_id":"cknajf3v0006p1a35tcjdaghd","_id":"cknajf3vk00771a35oz7jyhpz"},{"post_id":"cknajf3on00241a35695wnyl0","tag_id":"cknajf3vg00731a35gp82j4gd","_id":"cknajf3vl00781a35kho22u9m"}],"Tag":[{"name":"formData","_id":"cknajf3dk00021a352v2qch59"},{"name":"git","_id":"cknajf3ed00061a35ytm2qykk"},{"name":"moment","_id":"cknajf3f1000a1a35sr7z71hv"},{"name":"css","_id":"cknajf3fi000e1a35f3ybcbot"},{"name":"img","_id":"cknajf3g5000i1a35fbluixzm"},{"name":"居中","_id":"cknajf3go000m1a35i51ozy9p"},{"name":"html","_id":"cknajf3h5000p1a35cgnxr2c8"},{"name":"多行","_id":"cknajf3hn000u1a35g2cske8d"},{"name":"三个点","_id":"cknajf3i3000y1a35w5nbi96x"},{"name":"...","_id":"cknajf3il00121a35gqn01yw8"},{"name":"upload","_id":"cknajf3j800151a35sppol90t"},{"name":"fileList","_id":"cknajf3jn001a1a35rkz909nq"},{"name":"数据类型","_id":"cknajf3k0001f1a35purryocm"},{"name":"antd","_id":"cknajf3kh001l1a35cxcoar10"},{"name":"table","_id":"cknajf3kt001p1a35r23r4vtf"},{"name":"分页","_id":"cknajf3l4001s1a35bymw5tef"},{"name":"Alert","_id":"cknajf3np00201a3515cy8vtn"},{"name":"链接","_id":"cknajf3oq00251a355sf1fc01"},{"name":"columns","_id":"cknajf3p3002b1a35ipfrz2zp"},{"name":"filter","_id":"cknajf3p6002c1a35la471l0p"},{"name":"sort","_id":"cknajf3pi002l1a35mn2q86xa"},{"name":"提示","_id":"cknajf3pj002m1a358h73zf78"},{"name":"a","_id":"cknajf3pl002n1a355237s1b8"},{"name":"下载","_id":"cknajf3po002q1a35zuf5akvl"},{"name":"checkbox","_id":"cknajf3pu002w1a3507y5iibg"},{"name":"冒泡","_id":"cknajf3pw002x1a355ovvsric"},{"name":"捕获","_id":"cknajf3px002y1a35jgdq3o45"},{"name":"ts","_id":"cknajf3py002z1a354nbej6uj"},{"name":"hooks","_id":"cknajf3q100321a35raxn9ecc"},{"name":"mac","_id":"cknajf3q400351a35f2o8o1il"},{"name":"小红点","_id":"cknajf3q700381a35qqngntvi"},{"name":"更新","_id":"cknajf3q800391a35hysqzde2"},{"name":"mysql","_id":"cknajf3qa003a1a351v2dy53r"},{"name":"ios","_id":"cknajf3qd003d1a35yvzgws39"},{"name":"react-native","_id":"cknajf3qh003g1a35lrjbk65q"},{"name":"保存到相册","_id":"cknajf3qk003h1a356b6bx9bs"},{"name":"menu","_id":"cknajf3qp003l1a35foy4o5ld"},{"name":"webview","_id":"cknajf3qw003q1a35730uttnu"},{"name":"RNCWKWebView was not found in the UIManager","_id":"cknajf3qy003r1a35kgs43hne"},{"name":"走马灯","_id":"cknajf3qz003s1a35yfhtlguq"},{"name":"carousel","_id":"cknajf3r2003v1a35r8i3154x"},{"name":"next","_id":"cknajf3r5003x1a359xjt2hrh"},{"name":"pro","_id":"cknajf3r6003y1a35gh0iw4x3"},{"name":"go","_id":"cknajf3rc003z1a35e4bqaa12"},{"name":"hash","_id":"cknajf3rg00411a35rkjtiow8"},{"name":"browser","_id":"cknajf3rp00441a358ilu87yy"},{"name":"history","_id":"cknajf3rs00471a35c9lm0712"},{"name":"iOS","_id":"cknajf3ru004a1a354p7sjvts"},{"name":"环境搭建","_id":"cknajf3s0004f1a352503a6zl"},{"name":"pod","_id":"cknajf3s2004g1a35oa02o1s2"},{"name":"react","_id":"cknajf3s4004h1a35o2yqej1v"},{"name":"native","_id":"cknajf3s8004k1a350retyiso"},{"name":"bar","_id":"cknajf3sa004n1a35olukt1lj"},{"name":"高度","_id":"cknajf3sh004p1a354bxoeq4u"},{"name":"router","_id":"cknajf3sj004q1a35dhmvyv0e"},{"name":"js","_id":"cknajf3sq004t1a35wvt45myh"},{"name":"导航","_id":"cknajf3ss004w1a35nkg0bbak"},{"name":"getDefaultProps","_id":"cknajf3sy00511a35xvb38lx6"},{"name":"getInitIalState","_id":"cknajf3t100531a35mmjwvrh1"},{"name":"html字符串","_id":"cknajf3ta00571a351i5cwj2t"},{"name":"webpack","_id":"cknajf3tc00591a35rfc1di1s"},{"name":"项目环境配置","_id":"cknajf3tf005c1a35burqfpxe"},{"name":"新建项目流程","_id":"cknajf3tk005g1a35nycey2ex"},{"name":"context","_id":"cknajf3tq005k1a352oy4arbk"},{"name":"file","_id":"cknajf3tr005l1a35un7xsv3g"},{"name":"url","_id":"cknajf3tu005o1a354fnok08u"},{"name":"displayName","_id":"cknajf3tv005p1a359qt20i6f"},{"name":"defaultProps","_id":"cknajf3ty005s1a35q9wkle6w"},{"name":"prototype","_id":"cknajf3tz005t1a35g7vduehn"},{"name":"static","_id":"cknajf3u0005u1a35h8conow0"},{"name":"图片尺寸","_id":"cknajf3u2005v1a35w991kg5c"},{"name":"高阶组件","_id":"cknajf3u800611a3539aeat7o"},{"name":"数组对象","_id":"cknajf3ub00631a35tnv4fvxp"},{"name":"去重","_id":"cknajf3ud00661a3542cn66y6"},{"name":"开发环境","_id":"cknajf3ul006b1a35x1qimpk8"},{"name":"tootip","_id":"cknajf3um006c1a352nmnpiro"},{"name":"cover","_id":"cknajf3up006f1a3507uwc9hw"},{"name":"填充铺满","_id":"cknajf3us006i1a35ana4pbbb"},{"name":"图片","_id":"cknajf3ut006j1a35uqmx7dv3"},{"name":"async","_id":"cknajf3uv006k1a35g9q499vq"},{"name":"await","_id":"cknajf3uy006n1a35fcvcbvk1"},{"name":"form","_id":"cknajf3v0006p1a35tcjdaghd"},{"name":"图形","_id":"cknajf3v2006s1a35njgltzlm"},{"name":"联通","_id":"cknajf3v5006u1a35wohf5kjw"},{"name":"电视盒子","_id":"cknajf3v7006x1a357j4dyixz"},{"name":"破解","_id":"cknajf3v9006y1a358ceiszyq"},{"name":"安装应用","_id":"cknajf3vb006z1a35ex2hm3rs"},{"name":"valuePropName","_id":"cknajf3vg00731a35gp82j4gd"}]}}