{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"themes/vexo/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/qrious.js","path":"js/qrious.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/script.js","path":"js/script.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/blogfavicon.png","path":"css/images/blogfavicon.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/catalog.png","path":"css/images/catalog.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/escheres.png","path":"css/images/escheres.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/ironman.png","path":"css/images/ironman.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/logo.png","path":"css/images/logo.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/menu.png","path":"css/images/menu.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/top.png","path":"css/images/top.png","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/plugins/gitment.css","path":"css/plugins/gitment.css","modified":1,"renderable":1},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","path":"fonts/SourceSansPro.ttf","modified":1,"renderable":1},{"_id":"themes/vexo/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/alipay.jpg","path":"css/images/alipay.jpg","modified":1,"renderable":1},{"_id":"themes/vexo/source/css/images/wechat.jpg","path":"css/images/wechat.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"source/CNAME","hash":"b0de21601f379c74517bd50ddeb7a0091ae5b283","modified":1616598198274},{"_id":"themes/vexo/.travis.yml","hash":"cc482f06f4ea6962058f2548dcb814b954876e76","modified":1616598198324},{"_id":"themes/vexo/LICENSE","hash":"3e135cd69c0e02c0a49dd43d571f600223cc61d1","modified":1616598198324},{"_id":"themes/vexo/README.md","hash":"036ddc66e868b93411a15ed3fd5ed5e9101045a5","modified":1616598198324},{"_id":"themes/vexo/_config.yml","hash":"ae77d097df5fe180d588e569b6104949441db141","modified":1616598198324},{"_id":"themes/vexo/lint.sh","hash":"f580302e4aa9ccfb95a253851da6501d145613fe","modified":1616598198342},{"_id":"themes/vexo/package.json","hash":"8852c5a394ac59d219e5bbbcee10d573d33e1fc6","modified":1616598198342},{"_id":"source/_posts/CSS之img图片居中.md","hash":"ad957fb921a699a5ce36ebadf094a62a56ed51f2","modified":1616598198275},{"_id":"source/_posts/FormData使用方法详解.md","hash":"bb2a6f0fe589d8adfbb5394b71e4d53686ba5067","modified":1616598198275},{"_id":"source/_posts/HTML怎么多行显示三个点.md","hash":"71c4fd865c82680918eccda0e4a5ac684067bd3d","modified":1616598198275},{"_id":"source/_posts/JS如何通用判断数据类型.md","hash":"152a796ce89837d9c1bedf83594f6a895227e04c","modified":1616598582895},{"_id":"source/_posts/Moment-js-输出明天、今天和昨天.md","hash":"116c019d63ac335c8b0ca945c09c47043937d3df","modified":1616598198275},{"_id":"source/_posts/antd table列表分页删除时要注意的page current.md","hash":"5f0a62044defb99b4b90e0e29a1359125cf5a2d6","modified":1616598198275},{"_id":"source/_posts/antd之Alert警告提示框如何给内容添加链接.md","hash":"5bd85eb47640ea94573116e99643617b3cda34ba","modified":1616598198275},{"_id":"source/_posts/antd之table组件的columns属性filter.md","hash":"f3b5f4f1199ec99a47a7ed371e19332b45aaec9e","modified":1616598198275},{"_id":"source/_posts/antd之鼠标放上去提示修改.md","hash":"b4be6b798e1168b661dcf227473e4bc1e4ddb643","modified":1616598198276},{"_id":"source/_posts/antd的坑之checkbox的冒泡和捕获问题.md","hash":"5173f0ebdaeff7907d9cba2f6adacde11393f69f","modified":1616598198276},{"_id":"source/_posts/antd的坑之menu默认选中和当前选中.md","hash":"9b47714b3addaa7b0f6da3fc342f56a1ae46c2f2","modified":1616598198276},{"_id":"source/_posts/antd的走马灯carousel的next和prv及go的method用法.md","hash":"0a1cbcdde8fc39afab338c99837ac734d2369b2f","modified":1616598198276},{"_id":"source/_posts/a标签实现下载文件.md","hash":"0320774f3dca816c1350d577a757f1ffdea18e0c","modified":1616598198276},{"_id":"source/_posts/hashHistory和browserHistory的区别.md","hash":"ea4a3786b2545738aa276f949993bad088662417","modified":1616598198276},{"_id":"source/_posts/hooksAndTs.md","hash":"24424384f016bad070e950b0932467c69a878623","modified":1616599761340},{"_id":"source/_posts/mac去除系统更新小红点.md","hash":"a2bc9077f740e898069a455fc217d6d233a52898","modified":1616598198276},{"_id":"source/_posts/mysql的增删改查.md","hash":"206dc1b4c1e92cdaca7b6beda65d7282b15f60dc","modified":1616598198276},{"_id":"source/_posts/react-native-ios保存图片到相册.md","hash":"390cb82a1661e25fda4cef0e700c2003b2e1bf89","modified":1616598198277},{"_id":"source/_posts/react-native-ios环境搭建.md","hash":"d0b5b2abc5e5418a8da6a069411fdb8e986585c4","modified":1616598198277},{"_id":"source/_posts/react-native-webview的坑.md","hash":"4558c447e150e6549a6f0b7bc6466aa830927187","modified":1616598198277},{"_id":"source/_posts/react-native-顶部和底部bar的高度.md","hash":"3d62a4fcbed6be2dcf79f5feca6de8662806e9b3","modified":1616598198277},{"_id":"source/_posts/react-router通过js导航.md","hash":"7493888b6864074ceb779cd8d8b287cd1be54e73","modified":1616598198277},{"_id":"source/_posts/react中getDefaultProps和getInitialState的区别是什么.md","hash":"98935acc7c24303b6e57487f36cf2165effda837","modified":1616598198277},{"_id":"source/_posts/react中将html字符串渲染到页面.md","hash":"cc28cf64ef3b34821e1810098f9467ac5f465a28","modified":1616598198277},{"_id":"source/_posts/react的context.md","hash":"3fddd3dc771cc7e8ef6c6cf1e1e988b76b201ed6","modified":1616598198277},{"_id":"source/_posts/react的displayName、defaultProps、proptype、static到底是什么.md","hash":"8068ef635a68e2a9d8a386074566364536fec057","modified":1616598198278},{"_id":"source/_posts/react的高阶组件.md","hash":"b98f5c539b9e8754f0682bf96c5a61d40dfb126d","modified":1616598198278},{"_id":"source/_posts/webpack创建项目.md","hash":"a2a311a22ead46ab7620616cc4ed6f0e33eae6d6","modified":1616598198280},{"_id":"source/_posts/webpack构建react开发环境.md","hash":"2bb7b56f20e137705e9cc46816ce7d5911490c74","modified":1616598198280},{"_id":"source/_posts/图片在父级里面填充铺满.md","hash":"6fa3f8cfe559fc6922e5db2c83edd058f808b8da","modified":1616598198280},{"_id":"source/_posts/对于async和await的理解.md","hash":"7c2b409c0c2bc4fc167f3dc621d5792841d53b71","modified":1616598198280},{"_id":"source/_posts/数组对象去重.md","hash":"b37ebdf9a3325ae5744010c5ca50f26e3be9b513","modified":1616598198280},{"_id":"source/_posts/纯CSS画的基本图形.md","hash":"8c40cb9b19b2ae699d0d4f30a1039f10e6d3fb1b","modified":1616598198280},{"_id":"source/_posts/联通电视盒子软破解安装应用.md","hash":"741a1140e74d4f7917a792d1801ec8d7d426adb7","modified":1616598198281},{"_id":"source/_posts/通过Form-create创建的form域.md","hash":"7a19501488cb6b14b4aa7b8a91f865a6c01c13bf","modified":1616598198281},{"_id":"source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1616598198281},{"_id":"source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1616598198281},{"_id":"source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1616598198281},{"_id":"themes/vexo/layout/about.ejs","hash":"76ba7418788eb2bb9ba46844f4d750734847d0b4","modified":1616598198341},{"_id":"themes/vexo/layout/archive.ejs","hash":"cb12abb19cb70e90d410a6233933eedb3f2c033a","modified":1616598198342},{"_id":"themes/vexo/layout/index.ejs","hash":"9f12f5928d68d4d68175b825e18f89f3b0dfdb69","modified":1616598198342},{"_id":"themes/vexo/layout/layout.ejs","hash":"a7b8f1debdca12d667ecd1bcc3d4bc6e13a23d7b","modified":1616598198342},{"_id":"themes/vexo/layout/page.ejs","hash":"d113582d826bdb038141e6668cb1c2d2af0a6b4c","modified":1616598198342},{"_id":"themes/vexo/layout/project.ejs","hash":"666be5c72bac8165e0946428642b36dd3232983e","modified":1616598198342},{"_id":"themes/vexo/layout/tags.ejs","hash":"5b326e2bd3292b3015d0666b796544d7126acfda","modified":1616598198342},{"_id":"themes/vexo/_source/about/index.md","hash":"68c8af0453deca5f6b03eb18ee6f89fb0c1f1f75","modified":1616598198324},{"_id":"themes/vexo/_source/project/index.md","hash":"b8f5482c157514bd2df4ce8a4e4d01a957497924","modified":1616598198325},{"_id":"themes/vexo/_source/tags/index.md","hash":"80a15f1b5daff22b04849109e976bc91a410b83e","modified":1616598198325},{"_id":"themes/vexo/layout/_partial/archive.ejs","hash":"9abbf14034d581569c0b6c992fe22035cb5306b3","modified":1616598198340},{"_id":"themes/vexo/layout/_partial/catalog.ejs","hash":"0352ce39c28074dcfc3bd6416680195eeb384fd1","modified":1616598198340},{"_id":"themes/vexo/layout/_partial/footer.ejs","hash":"dbcc2cd2815d0d92fbd748bd0ae4fdcd0f7b40f9","modified":1616598198340},{"_id":"themes/vexo/layout/_partial/head.ejs","hash":"348c321961722a14b06032718a601e909d1232e3","modified":1616598198341},{"_id":"themes/vexo/layout/_partial/header.ejs","hash":"5ec50c3a590e8063f78b07a8d61018290e11a5b5","modified":1616598198341},{"_id":"themes/vexo/layout/_partial/nav.ejs","hash":"3d8ddc1f6e135a240d40edd157cf37f5d0a12df6","modified":1616598198341},{"_id":"themes/vexo/layout/_partial/pager.ejs","hash":"3a1b9680fbfa3baa76933c7c17216996381ad241","modified":1616598198341},{"_id":"themes/vexo/layout/_partial/tag.ejs","hash":"5d2a2c3f8ca7000945ab426a0c6939421974b224","modified":1616598198341},{"_id":"themes/vexo/layout/_partial/top.ejs","hash":"f09dea486246a580213005b21d4b38810dd16fb3","modified":1616598198341},{"_id":"themes/vexo/layout/_third-party/mathjax.ejs","hash":"aa58f0cfe22e7151c1a0521bbfa5cbd76f6dcd9d","modified":1616598198341},{"_id":"themes/vexo/source/css/_config.styl","hash":"9421564a8c5a0e2d3ecc1e0293789b9ba824e264","modified":1616598198343},{"_id":"themes/vexo/source/css/style.styl","hash":"68521b4b1ec5bc0343f7dd21b3b7476f7aad92ea","modified":1616598198348},{"_id":"themes/vexo/source/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1616598198354},{"_id":"themes/vexo/source/js/script.js","hash":"d2c81a503b75055cfe48509576f00c22e5737311","modified":1616598198354},{"_id":"themes/vexo/source/css/_partial/about.styl","hash":"8a428687f74f33426bf0c7de3fdd1f7654c26587","modified":1616598198343},{"_id":"themes/vexo/source/css/_partial/archive.styl","hash":"e80ddf26f2af3523632afeabd57f81592537985a","modified":1616598198343},{"_id":"themes/vexo/source/css/_partial/catalog.styl","hash":"cbf3f59d3c3162700eb9cbd4cf72c8470c170f81","modified":1616598198343},{"_id":"themes/vexo/source/css/_partial/footer.styl","hash":"970b6fd3d05834926c69724934b798dd5a1472e6","modified":1616598198343},{"_id":"themes/vexo/source/css/_partial/header.styl","hash":"def3a6938d925c585a7da6256a6f2e90f3b7d61e","modified":1616598198343},{"_id":"themes/vexo/source/css/_partial/markdown.styl","hash":"3ec22606f9548681389158384dc29ddf59c8ceea","modified":1616598198344},{"_id":"themes/vexo/source/css/_partial/nav.styl","hash":"e92c010c5cd460e75c67083df8cdd0bf4d25cde4","modified":1616598198344},{"_id":"themes/vexo/source/css/_partial/pager.styl","hash":"888384c67429c7568aa38b5ebe5acae3cc4de367","modified":1616598198344},{"_id":"themes/vexo/source/css/_partial/project.styl","hash":"e9b6faadf4852bce3a4141cba0a102a7afb81e9f","modified":1616598198344},{"_id":"themes/vexo/source/css/_partial/tags.styl","hash":"5198a7f7c221341138ae5c65185e86b6e13e8e26","modified":1616598198344},{"_id":"themes/vexo/source/css/images/blogfavicon.png","hash":"4e05b82d7bde6a6f27575fd1afcfab2fd63176c1","modified":1616598198346},{"_id":"themes/vexo/source/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1616598198346},{"_id":"themes/vexo/source/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1616598198346},{"_id":"themes/vexo/source/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1616598198346},{"_id":"themes/vexo/source/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1616598198346},{"_id":"themes/vexo/source/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1616598198346},{"_id":"themes/vexo/source/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1616598198347},{"_id":"themes/vexo/source/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1616598198348},{"_id":"themes/vexo/source/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1616598198351},{"_id":"themes/vexo/source/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1616598198353},{"_id":"themes/vexo/source/css/images/alipay.jpg","hash":"e332b6c587b69ad2930fc40cfbd4e261277122e4","modified":1616598198346},{"_id":"themes/vexo/source/css/images/wechat.jpg","hash":"fdeb0e53cc78653a55079fd24ca39d55dc9620cb","modified":1616598198348},{"_id":"public/about/index.html","hash":"7fed93292df21072f38055915683082e3689a7a3","modified":1616599805963},{"_id":"public/project/index.html","hash":"799b0ae0fa720d53416fba72315e7adde5f2b179","modified":1616599805964},{"_id":"public/2021/03/24/JS如何通用判断数据类型/index.html","hash":"08f048b058b742a74a8f750d9e558ee2332faf1d","modified":1616599805966},{"_id":"public/2020/04/05/mac去除系统更新小红点/index.html","hash":"07554f56a0c2678d1a13149fae37dcec23a0f13b","modified":1616599805966},{"_id":"public/2019/11/23/antd table列表分页删除时要注意的page current/index.html","hash":"56c2f0728f0d302b242c804d6251147a49c63dc6","modified":1616599805966},{"_id":"public/2019/11/23/a标签实现下载文件/index.html","hash":"4bf4aca393c9bd4f1bde5a4f141cd9a8f86ebab4","modified":1616599805967},{"_id":"public/2019/11/23/mysql的增删改查/index.html","hash":"5aca87d782a61c8f2397badb1ecd4c9f404fe0e7","modified":1616599805967},{"_id":"public/2019/11/23/react-native-ios保存图片到相册/index.html","hash":"6eb7b2e6507282ef0b6a08818ddcd480871a7fdc","modified":1616599805968},{"_id":"public/2019/10/26/通过Form-create创建的form域/index.html","hash":"3f9035dfd031342dc96c82fcee00d97510e2102b","modified":1616599805968},{"_id":"public/2019/09/08/react中getDefaultProps和getInitialState的区别是什么/index.html","hash":"b7c9522eae0ed0146dd91a25d63af957ec09c9ca","modified":1616599805968},{"_id":"public/2019/09/08/图片在父级里面填充铺满/index.html","hash":"dda5ebae0ad1b848455ebdfd5df56ac8bcffe3ac","modified":1616599805970},{"_id":"public/2019/09/08/对于async和await的理解/index.html","hash":"286eb99a13f4a4ca3dedb9e7f8bbace283cec84b","modified":1616599805971},{"_id":"public/2019/09/08/数组对象去重/index.html","hash":"55596f9c957915653d3893ee489db6a14eaa0a85","modified":1616599805971},{"_id":"public/2019/09/08/react-router通过js导航/index.html","hash":"c018f05510bc1df50ba3eda50638904647a87e48","modified":1616599805972},{"_id":"public/2019/09/08/hashHistory和browserHistory的区别/index.html","hash":"c98c7206f8159741b41f4ec6d6b756cc875b3afa","modified":1616599805972},{"_id":"public/2019/09/08/HTML怎么多行显示三个点/index.html","hash":"fa36ac00278fb4f2cc187614e816a0358c731e02","modified":1616599805972},{"_id":"public/2019/09/08/react中将html字符串渲染到页面/index.html","hash":"33bf965041161f2b566fe9e2aa54f816ee86393f","modified":1616599805973},{"_id":"public/2019/09/08/antd的走马灯carousel的next和prv及go的method用法/index.html","hash":"ddc1778c76bb0039831ff47ae7bf582911f49c98","modified":1616599805973},{"_id":"public/2019/09/08/antd的坑之menu默认选中和当前选中/index.html","hash":"aafbeb3ce2953344646c334c66e9924226f35c9c","modified":1616599805973},{"_id":"public/2019/09/08/antd之Alert警告提示框如何给内容添加链接/index.html","hash":"dd39d07e3a7dbf37773cac290de12dae872fe451","modified":1616599805974},{"_id":"public/2019/09/08/antd之鼠标放上去提示修改/index.html","hash":"b12e84c83359663a5c67cc3443d8f0d1d11382d5","modified":1616599805974},{"_id":"public/2019/09/08/antd的坑之checkbox的冒泡和捕获问题/index.html","hash":"8f1f2951192d000649db8194031fc77dc4e1d42d","modified":1616599805974},{"_id":"public/2019/09/08/antd之table组件的columns属性filter/index.html","hash":"a5a5e8075ec187e66f817412245691233b7f6b22","modified":1616599805975},{"_id":"public/2019/09/08/react-native-webview的坑/index.html","hash":"9fbf4b3158f19a5877d85f5f0629ce892a854603","modified":1616599805975},{"_id":"public/2019/09/08/react-native-顶部和底部bar的高度/index.html","hash":"af10f85dc28cc102733fd2fee53d700ac18be403","modified":1616599805975},{"_id":"public/2019/09/01/联通电视盒子软破解安装应用/index.html","hash":"e1f03978d37a7ea772d854450f476a54fccc8748","modified":1616599805976},{"_id":"public/archives/index.html","hash":"2bd897e8f6b687c4f424179773bdae8fe617ce64","modified":1616599805976},{"_id":"public/archives/page/2/index.html","hash":"3c102f4139146202c00cf02ef7bd982f4f322ac1","modified":1616599805976},{"_id":"public/archives/page/3/index.html","hash":"c6e164ea5c50e9d309e74a166032ef0a90327385","modified":1616599805976},{"_id":"public/archives/page/4/index.html","hash":"5db2a4d59fc50c6dae19ea826d41cc15340b71b3","modified":1616599805977},{"_id":"public/archives/2019/index.html","hash":"b1287d0b1ab82d205d2d5a71795eb136daeae6f2","modified":1616599805977},{"_id":"public/archives/2019/page/2/index.html","hash":"a251722b5faecbbf04318e964dad4610365e6195","modified":1616599805977},{"_id":"public/archives/2019/page/3/index.html","hash":"6b590c6cc422bfe207f9f1d46acb0856791d5ba0","modified":1616599805978},{"_id":"public/archives/2019/page/4/index.html","hash":"9644b21a5481e2c24e41b6c2f14204ec479338da","modified":1616599805978},{"_id":"public/archives/2019/09/index.html","hash":"99b5503a65a507171e027813e3bc69081f5b7d62","modified":1616599805978},{"_id":"public/archives/2019/09/page/2/index.html","hash":"1899c45e744f960c5dde29b20f1d8551409e3478","modified":1616599805979},{"_id":"public/archives/2019/09/page/3/index.html","hash":"09d132bcf1454571bf0f190505a5fb5eed19fa4e","modified":1616599805979},{"_id":"public/archives/2019/10/index.html","hash":"b248b02262035a37f42be01c86afa840292c6216","modified":1616599805979},{"_id":"public/archives/2019/11/index.html","hash":"37454b6d942f23f659ac3bc6b4fdef8620f8e6b6","modified":1616599805980},{"_id":"public/archives/2019/12/index.html","hash":"5fec97a11f2cc8bd3dc4a214f7b58517f814d640","modified":1616599805980},{"_id":"public/archives/2020/index.html","hash":"b5c5b2fc99ea5006b11ddd322e7e623fdf7cbbc7","modified":1616599805980},{"_id":"public/archives/2020/04/index.html","hash":"e434848c43fd2ef7d2279940075d7e96355500dc","modified":1616599805980},{"_id":"public/archives/2021/index.html","hash":"24e66b973cc102c6c300658d8c7897149f8ef019","modified":1616599805981},{"_id":"public/archives/2021/03/index.html","hash":"b1568b14ebf4dbe2152bf52ef8047fd712c8f89d","modified":1616599805981},{"_id":"public/index.html","hash":"1153590d9a22f3e50e63d018c98857a483bec03e","modified":1616599805981},{"_id":"public/page/2/index.html","hash":"aa828c47f37d3607471d31cebcdc243cdf4ea587","modified":1616599805982},{"_id":"public/page/3/index.html","hash":"68293d59766dde29ede664a9d927c2fa3ceca2a8","modified":1616599805982},{"_id":"public/page/4/index.html","hash":"dc525fb1f062f355eb4c846e87140b28e3914881","modified":1616599805982},{"_id":"public/tags/css/index.html","hash":"e68f2c6a3dc113fa819403059e06054e116d0adb","modified":1616599805982},{"_id":"public/tags/img/index.html","hash":"b342ed9fea51e50b98d7e7a447058e08a8cdcf1b","modified":1616599805983},{"_id":"public/tags/居中/index.html","hash":"7d8e6acbfb9cc3f9e7acdd1ea641df816beac608","modified":1616599805983},{"_id":"public/tags/formData/index.html","hash":"a1ee96c7d8aea1bfc9da1193882086cbe950c956","modified":1616599805983},{"_id":"public/tags/html/index.html","hash":"c4fb6478ffaef8fbff9ef969034915d6a4764f8f","modified":1616599805983},{"_id":"public/tags/多行/index.html","hash":"be7b0a5c962d425139c974026242a2a399154a5e","modified":1616599805984},{"_id":"public/tags/三个点/index.html","hash":"4228466a7291f17c8d7e1c2b25dbf0aef4dd8888","modified":1616599805984},{"_id":"public/tags//index.html","hash":"4eb9491225165a33ec6c9ed572c14a70e2d0936f","modified":1616599805984},{"_id":"public/tags/moment/index.html","hash":"cad6a3c411c208b6c7a1e9e90ac17b05d980f47c","modified":1616599805985},{"_id":"public/tags/antd/index.html","hash":"0e4467734ce9e920bd04bcab41b42850025f69c2","modified":1616599805985},{"_id":"public/tags/table/index.html","hash":"0559cd7ace9bce67182a27e1a261f8b1fb3ed57b","modified":1616599805985},{"_id":"public/tags/分页/index.html","hash":"112d47c1d0cdd5a48b3b9114dadea3a2f40e72e6","modified":1616599805985},{"_id":"public/tags/Alert/index.html","hash":"62045f8577c43b04b212e89aa88b6567a7d7f38b","modified":1616599805986},{"_id":"public/tags/链接/index.html","hash":"a8c73e16bf3b3205bc223fd06d0d4c61c2ccdbf1","modified":1616599805986},{"_id":"public/tags/columns/index.html","hash":"b6dc8f371190bfea4a8e79ae3e181d3da90e2c4f","modified":1616599805987},{"_id":"public/tags/filter/index.html","hash":"b0022c9ed664c53bdcfd8f8ddb638470185dbb7f","modified":1616599805987},{"_id":"public/tags/sort/index.html","hash":"3d349bec53860a2682119c479a9d45443158d636","modified":1616599805987},{"_id":"public/tags/提示/index.html","hash":"88775a06db524f04219a0eae171eb888f6acbbe2","modified":1616599805988},{"_id":"public/tags/checkbox/index.html","hash":"898923f3e0c9f6dd8b22226abce18f7e3822ac91","modified":1616599805988},{"_id":"public/tags/冒泡/index.html","hash":"0c55f19676b2a30bb5aa42d82a6c72a0a353779e","modified":1616599805988},{"_id":"public/tags/捕获/index.html","hash":"16cfcc2a708e5cb0b99cdad14757d35907be1361","modified":1616599805989},{"_id":"public/tags/menu/index.html","hash":"a27e668ac94f86225e5d82d6e37e856802c87672","modified":1616599805989},{"_id":"public/tags/走马灯/index.html","hash":"85a32a6e96ca698dd9de0110da377b4b9e24f339","modified":1616599805989},{"_id":"public/tags/carousel/index.html","hash":"833b0f48c65f4b624a36e05e017c2ca07272f126","modified":1616599805990},{"_id":"public/tags/next/index.html","hash":"85d072bf3c411796d82d77f72125de3f989ef1e4","modified":1616599805990},{"_id":"public/tags/pro/index.html","hash":"59632fa528e1c3d13c22475f8637fe6a2e4fd1c3","modified":1616599805990},{"_id":"public/tags/go/index.html","hash":"322b31540686c2f4a37561991ffedfead803e88b","modified":1616599805991},{"_id":"public/tags/a/index.html","hash":"9a7a83f2d8a2cc06fe627476efebfae983c664ca","modified":1616599805991},{"_id":"public/tags/下载/index.html","hash":"de5acbbbd998c61dd31cddc20ee42ed80940f71e","modified":1616599805991},{"_id":"public/tags/hash/index.html","hash":"e96c1b3f207a932b4b340e25f0f64e21d4314801","modified":1616599805992},{"_id":"public/tags/browser/index.html","hash":"f8392cf080ad2ffd1103502441a419f65e999357","modified":1616599805992},{"_id":"public/tags/history/index.html","hash":"4d66b2eeed745d8e7e2673cb6244e2c832287eb3","modified":1616599805992},{"_id":"public/tags/mac/index.html","hash":"91e4cc01d0568e955a654a7dbc742bc89dcd7566","modified":1616599805993},{"_id":"public/tags/小红点/index.html","hash":"6480b9e3961eb484fae95194c61bb6c02c78274a","modified":1616599805993},{"_id":"public/tags/更新/index.html","hash":"f195b319a76cbb79ac67410fcbcf32a8512d783b","modified":1616599805993},{"_id":"public/tags/mysql/index.html","hash":"f25f847b3b0542a66411579c54bed577fae2dc1b","modified":1616599805994},{"_id":"public/tags/ios/index.html","hash":"833d99376a1fb79a7ddfdaa18f1fcc5d8fd3add7","modified":1616599805994},{"_id":"public/tags/react-native/index.html","hash":"8d4be789e6acf704cad00d1e0ad2fbc999da604f","modified":1616599805994},{"_id":"public/tags/保存到相册/index.html","hash":"949e2abf519b515446af7ed00de8bc719ec0c2a6","modified":1616599805995},{"_id":"public/tags/iOS/index.html","hash":"29413378ac69efaa1ee93bcd9bb5e8f19928c824","modified":1616599805995},{"_id":"public/tags/环境搭建/index.html","hash":"ddca6df45c174041a131dfaf1db419e4f9ec886c","modified":1616599805995},{"_id":"public/tags/pod/index.html","hash":"c98062f9faf123133f7d4c56e5e12fc7fae28add","modified":1616599805996},{"_id":"public/tags/webview/index.html","hash":"5f910faaec0d44eebfe260425717eaf646441ed8","modified":1616599805996},{"_id":"public/tags/RNCWKWebView-was-not-found-in-the-UIManager/index.html","hash":"fd63b48bb71fbc25c9e4560c5343454b6329a1ab","modified":1616599805996},{"_id":"public/tags/react/index.html","hash":"63d6c536ab0c12a82fc721b217c7f6fc2d61c9c2","modified":1616599805996},{"_id":"public/tags/native/index.html","hash":"fbdbe6dc083dd18c464359e133475268f265c8d0","modified":1616599805997},{"_id":"public/tags/bar/index.html","hash":"15a75f8e7f5c60981eb7db7d859720ef4cbd0a0c","modified":1616599805997},{"_id":"public/tags/高度/index.html","hash":"7df6c7db629d86193f3267d741ce71983963acd4","modified":1616599805997},{"_id":"public/tags/router/index.html","hash":"041576d644f8f539f99de6ed7fdf06103f399714","modified":1616599805998},{"_id":"public/tags/js/index.html","hash":"73cd197aca16aa28fc5efafc589f48aa10d43d7f","modified":1616599805998},{"_id":"public/tags/导航/index.html","hash":"8144fcc01614a6fc5da882c364861591cde938a3","modified":1616599805998},{"_id":"public/tags/getDefaultProps/index.html","hash":"fb6fbeeae8a412c804f3dd0f20e6b71cb8ac06e2","modified":1616599805999},{"_id":"public/tags/getInitIalState/index.html","hash":"5247a1b7ee1ef77f3235d38c214333610ec2259c","modified":1616599805999},{"_id":"public/tags/html字符串/index.html","hash":"8cc32ea99aace1e4c0e07f7dc668e5a3353e265b","modified":1616599805999},{"_id":"public/tags/context/index.html","hash":"af378a2435c3f5ab9b74a1c101b68c31790a9c77","modified":1616599806000},{"_id":"public/tags/displayName/index.html","hash":"4934fa552225d05ac813c91c5371978734194515","modified":1616599806000},{"_id":"public/tags/defaultProps/index.html","hash":"d9c89f18fab5a2f7a5cf5bacd6e107d5c27083b3","modified":1616599806000},{"_id":"public/tags/prototype/index.html","hash":"f8ea78b70a98733ec3574a3c97fa06d39f3efa03","modified":1616599806001},{"_id":"public/tags/static/index.html","hash":"35aa1b23f8adfa7dc8b6ecf05ecb93be93ff4f74","modified":1616599806001},{"_id":"public/tags/高阶组件/index.html","hash":"98413b3202c2c727c66f20ed67808c90c13ec793","modified":1616599806001},{"_id":"public/tags/webpack/index.html","hash":"caa8777f6cc4f62eab8765ac97867470621e2aac","modified":1616599806002},{"_id":"public/tags/项目环境配置/index.html","hash":"1b1264f01bb9a3e3a6afb732f3fd54f6be50d53a","modified":1616599806002},{"_id":"public/tags/开发环境/index.html","hash":"a596f24f294052fb1d8aa5d439181a2253d4af91","modified":1616599806002},{"_id":"public/tags/cover/index.html","hash":"c5d566eb12437e4b5712024fd986d58c64bbf8ed","modified":1616599806003},{"_id":"public/tags/填充铺满/index.html","hash":"9fdf02841044d6603f41595f922a73cb5fa7c030","modified":1616599806003},{"_id":"public/tags/图片/index.html","hash":"ebb87f3c1ada23ffa7b7389f4918d5a004efbdc8","modified":1616599806003},{"_id":"public/tags/async/index.html","hash":"3df59c519aa19a5a577fa16e06b4ff0e0adc57b0","modified":1616599806004},{"_id":"public/tags/await/index.html","hash":"3fa6bea947bc3d19882d17ae284badf10b55f54b","modified":1616599806004},{"_id":"public/tags/数组对象/index.html","hash":"006cead9a6c4ae9dc3eb61c86dc90418b1751299","modified":1616599806004},{"_id":"public/tags/去重/index.html","hash":"a70200b3a78c18a312f123a9cfa9077fc4cf8314","modified":1616599806005},{"_id":"public/tags/图形/index.html","hash":"e7ec2ac715a6dbd2e6dd6d5b4db9b8f7d0f7f989","modified":1616599806005},{"_id":"public/tags/联通/index.html","hash":"ab195d7382313a13eae1d5f39889120a1d696651","modified":1616599806005},{"_id":"public/tags/电视盒子/index.html","hash":"0e82d69b3086b6a887a29e83f2f687ebcd7452fa","modified":1616599806005},{"_id":"public/tags/破解/index.html","hash":"db7ad998d2a0a043aef00aab1a983893f717199f","modified":1616599806006},{"_id":"public/tags/安装应用/index.html","hash":"9f8930c14e2a704cfd55d98ea7f3503778d10b9d","modified":1616599806006},{"_id":"public/tags/form/index.html","hash":"dcafc1377f8cb84c619ef6e9859ed30a475fe9df","modified":1616599806007},{"_id":"public/tags/valuePropName/index.html","hash":"e64540ca666037f9d04d1d54206b768f61f132ab","modified":1616599806007},{"_id":"public/tags/index.html","hash":"b5a98de9a97e37e0cf013f5bb5b0c905818b9f70","modified":1616599806007},{"_id":"public/2021/03/24/hooksAndTs/index.html","hash":"83ff3ce56bec29e291e663fdddb2330d59df04c0","modified":1616599806007},{"_id":"public/2019/12/30/webpack创建项目/index.html","hash":"c21c9df1cef85dcf4ceda599d9053756217f70f6","modified":1616599806008},{"_id":"public/2019/09/08/react的context/index.html","hash":"f8e0109a818dd1233685adb77db57658f47ca704","modified":1616599806008},{"_id":"public/2019/09/08/react的高阶组件/index.html","hash":"75cc5cb3cfeff892b6a9df7753c2a402f720ad89","modified":1616599806009},{"_id":"public/2019/09/08/react的displayName、defaultProps、proptype、static到底是什么/index.html","hash":"47b305cfad0ca028c02efba8439125bf0c2cadd5","modified":1616599806009},{"_id":"public/2019/09/08/webpack构建react开发环境/index.html","hash":"c7b884ddc18e06522498ac225db5a3629ce1a9d2","modified":1616599806010},{"_id":"public/2019/09/08/CSS之img图片居中/index.html","hash":"f64a1107b3751c8f7798831989b033a62c2ecf89","modified":1616599806010},{"_id":"public/2019/09/08/Moment-js-输出明天、今天和昨天/index.html","hash":"a091f8ebc5dffcdab92b7cdeaa0cb9d83163b17a","modified":1616599806010},{"_id":"public/2019/09/08/纯CSS画的基本图形/index.html","hash":"b3c13115d13bf51ce3872b213b0b460c092eafb1","modified":1616599806011},{"_id":"public/2019/09/08/FormData使用方法详解/index.html","hash":"d8e62c9c58857d5ca70710d3481490cc6959ae82","modified":1616599806011},{"_id":"public/2019/09/08/react-native-ios环境搭建/index.html","hash":"56f009cd8460f7b80406ad17d83ee0cffc96e749","modified":1616599806011},{"_id":"public/CNAME","hash":"b0de21601f379c74517bd50ddeb7a0091ae5b283","modified":1616599806046},{"_id":"public/css/images/blogfavicon.png","hash":"4e05b82d7bde6a6f27575fd1afcfab2fd63176c1","modified":1616599806046},{"_id":"public/css/images/catalog.png","hash":"541d20dd600fc2c9230329ceb6885d86e6c151dd","modified":1616599806047},{"_id":"public/css/images/escheres.png","hash":"55deece3236dcc2fb44c28dec3e8bacbb7b46542","modified":1616599806047},{"_id":"public/css/images/ironman.png","hash":"2f0db0ab15d466c4065d9f6102fdf829726d9e3f","modified":1616599806047},{"_id":"public/css/images/logo.png","hash":"718c6e48956249121cf3cca1a22a99f8372a3f0d","modified":1616599806048},{"_id":"public/css/images/menu.png","hash":"bdaa35eb1ed119caeb934e15a05b9f4a5396d957","modified":1616599806048},{"_id":"public/css/images/top.png","hash":"611a257907474ca02828319f81b006c1d818bb84","modified":1616599806048},{"_id":"public/css/images/alipay.jpg","hash":"e332b6c587b69ad2930fc40cfbd4e261277122e4","modified":1616599807256},{"_id":"public/css/images/wechat.jpg","hash":"fdeb0e53cc78653a55079fd24ca39d55dc9620cb","modified":1616599807260},{"_id":"public/js/script.js","hash":"d2c81a503b75055cfe48509576f00c22e5737311","modified":1616599807281},{"_id":"public/css/style.css","hash":"ff66edb17a8538b6a4f5091b4731b00825342081","modified":1616599807281},{"_id":"public/js/qrious.js","hash":"a9271e81e2ac6a692b1c133811afa33f0f3d7dc5","modified":1616599807281},{"_id":"public/css/plugins/gitment.css","hash":"541ff18d7f3542b5663dc6aad06d43e135332b71","modified":1616599807281},{"_id":"public/js/gitment.js","hash":"376446d9c5930576016f97dd63e5e6616c94d8d4","modified":1616599807282},{"_id":"public/fonts/SourceSansPro.ttf","hash":"1e9f0372c269da205fdbac8cf27cb9cf59f6ad45","modified":1616599807282}],"Category":[],"Data":[],"Page":[{"title":"About","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: About\nlayout: about\n---","date":"2021-03-24T15:03:18.281Z","updated":"2021-03-24T15:03:18.281Z","path":"about/index.html","comments":1,"_id":"ckmnls15f0001si35k7aeqys5","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Project","layout":"project","_content":"","source":"project/index.md","raw":"---\ntitle: Project\nlayout: project\n---\n","date":"2021-03-24T15:03:18.281Z","updated":"2021-03-24T15:03:18.281Z","path":"project/index.html","comments":1,"_id":"ckmnls1l1006asi35hlej7zq0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Tags","layout":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: Tags\nlayout: tags\n---\n","date":"2021-03-24T15:03:18.281Z","updated":"2021-03-24T15:03:18.281Z","path":"tags/index.html","comments":1,"_id":"ckmnls1l8006bsi35khwpnewi","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"CSS之img图片居中","date":"2019-09-08T07:26:12.000Z","_content":"\n\n\n原文链接：http://caibaojian.com/img-vertical-middle.html\n\n\n\n在[前端开发](http://caibaojian.com/)制作中，图片[垂直居中](http://caibaojian.com/t/垂直居中)对齐是很常见的，有些是固定高度，有些没有固定高度，本文分享我用的四种方法，希望对你有所启发。\n\n\n\n以下说的做法暂不考虑IE浏览器的兼容性，适用于移动端，对兼容性感兴趣的可以看之前的文章：[图片垂直居中对齐的3种方法](http://caibaojian.com/vertical-centering-with-css.html)\n\n\n\n以下的做法中假定外层的高度和宽度已经固定。通用[HTML](http://caibaojian.com/t/html)和[CSS](http://caibaojian.com/css3/)代码：\n\n\n\n```html\n<div class=\"img\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img {\n  width:300px;\n  height:300px;\n  margin:20px auto;\n  background:#00f;\n}\n```\n\n\n\n### 1.绝对定位+margin:auto\n\n\n\n利用图片相对于外层浮动，加上margin:auto.\n\n\n\n```html\n<div class=\"img img1\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n//code from http://caibaojian.com/img-vertical-middle.html\n.img1 {\n  position:relative;\n}\n.img1 img {\n  position:absolute;\n  top:0;\n  bottom:0;\n  left:0;\n  right:0;\n  margin:auto;\n}\n```\n\n\n\n[演示1](http://caibaojian.com/demo/2017/07/img1.html#demo1)\n\n\n\n### 2.flexbox\n\n\n\n利用flexbox里面的[垂直居中](http://caibaojian.com/t/垂直居中)属性：align-items:center(垂直居中)和justify-content:center(水平居中);[·](http://caibaojian.com/img-vertical-middle.html)\n\n\n\n```html\n<div class=\"img img2\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img2 {\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex-box;\n  display:flex;\n  -webkit-box-align:center;\n  -ms-flex-align:center;\n  align-items:center;\n  -webkit-box-pack:center;\n  -ms-flex-pack:center;\n  justify-content:center;\n  text-align:center;\n}\n```\n\n\n\n[演示2](http://caibaojian.com/demo/2017/07/img1.html#demo2)\n\n\n\n### 3.table-cell\n\n\n\n利用display:table-cell+图片vertical-align:middle\n\n\n\n```html\n<div class=\"img img3\">\n  <span class=\"icenter\"><img src=\"http://dummyimage.com/200x200/f66/\"/></span>\n</div>\n```\n\n\n\n```css\n.img3 .icenter {\n  display:table-cell;\n  vertical-align:middle;\n  text-align:center;\n  height:300px;\n  width:300px\n}\n.img3 img {\n  vertical-align:middle;\n  display:inline-block\n}\n```\n\n\n\n[演示3](http://caibaojian.com/demo/2017/07/img1.html#demo3)\n\n\n\n### 4.增加一个空白标签\n\n\n\n兼容性较好，支持IE浏览器\n\n\n\n```html\n<div class=\"img img4\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n  <i class=\"iblock\"></i>\n</div>\n```\n\n\n\n```css\n.img4 {\n  text-align:center\n}\n.img4 img {\n  vertical-align:middle\n}\n.img4 .iblock {\n  display:inline-block;\n  height:100%;\n  width:0;\n  vertical-align:middle\n}\n```\n\n","source":"_posts/CSS之img图片居中.md","raw":"---\ntitle: CSS之img图片居中\ndate: 2019-09-08 15:26:12\ntags: [css, img, 居中]\n---\n\n\n\n原文链接：http://caibaojian.com/img-vertical-middle.html\n\n\n\n在[前端开发](http://caibaojian.com/)制作中，图片[垂直居中](http://caibaojian.com/t/垂直居中)对齐是很常见的，有些是固定高度，有些没有固定高度，本文分享我用的四种方法，希望对你有所启发。\n\n\n\n以下说的做法暂不考虑IE浏览器的兼容性，适用于移动端，对兼容性感兴趣的可以看之前的文章：[图片垂直居中对齐的3种方法](http://caibaojian.com/vertical-centering-with-css.html)\n\n\n\n以下的做法中假定外层的高度和宽度已经固定。通用[HTML](http://caibaojian.com/t/html)和[CSS](http://caibaojian.com/css3/)代码：\n\n\n\n```html\n<div class=\"img\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img {\n  width:300px;\n  height:300px;\n  margin:20px auto;\n  background:#00f;\n}\n```\n\n\n\n### 1.绝对定位+margin:auto\n\n\n\n利用图片相对于外层浮动，加上margin:auto.\n\n\n\n```html\n<div class=\"img img1\">\n<img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n//code from http://caibaojian.com/img-vertical-middle.html\n.img1 {\n  position:relative;\n}\n.img1 img {\n  position:absolute;\n  top:0;\n  bottom:0;\n  left:0;\n  right:0;\n  margin:auto;\n}\n```\n\n\n\n[演示1](http://caibaojian.com/demo/2017/07/img1.html#demo1)\n\n\n\n### 2.flexbox\n\n\n\n利用flexbox里面的[垂直居中](http://caibaojian.com/t/垂直居中)属性：align-items:center(垂直居中)和justify-content:center(水平居中);[·](http://caibaojian.com/img-vertical-middle.html)\n\n\n\n```html\n<div class=\"img img2\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n</div>\n```\n\n\n\n```css\n.img2 {\n  display:-webkit-box;\n  display:-ms-flexbox;\n  display:flex-box;\n  display:flex;\n  -webkit-box-align:center;\n  -ms-flex-align:center;\n  align-items:center;\n  -webkit-box-pack:center;\n  -ms-flex-pack:center;\n  justify-content:center;\n  text-align:center;\n}\n```\n\n\n\n[演示2](http://caibaojian.com/demo/2017/07/img1.html#demo2)\n\n\n\n### 3.table-cell\n\n\n\n利用display:table-cell+图片vertical-align:middle\n\n\n\n```html\n<div class=\"img img3\">\n  <span class=\"icenter\"><img src=\"http://dummyimage.com/200x200/f66/\"/></span>\n</div>\n```\n\n\n\n```css\n.img3 .icenter {\n  display:table-cell;\n  vertical-align:middle;\n  text-align:center;\n  height:300px;\n  width:300px\n}\n.img3 img {\n  vertical-align:middle;\n  display:inline-block\n}\n```\n\n\n\n[演示3](http://caibaojian.com/demo/2017/07/img1.html#demo3)\n\n\n\n### 4.增加一个空白标签\n\n\n\n兼容性较好，支持IE浏览器\n\n\n\n```html\n<div class=\"img img4\">\n  <img src=\"http://dummyimage.com/200x200/f66/\"/>\n  <i class=\"iblock\"></i>\n</div>\n```\n\n\n\n```css\n.img4 {\n  text-align:center\n}\n.img4 img {\n  vertical-align:middle\n}\n.img4 .iblock {\n  display:inline-block;\n  height:100%;\n  width:0;\n  vertical-align:middle\n}\n```\n\n","slug":"CSS之img图片居中","published":1,"updated":"2021-03-24T15:03:18.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls14u0000si356v7sumni","content":"<p>原文链接：<a href=\"http://caibaojian.com/img-vertical-middle.html\" target=\"_blank\" rel=\"noopener\">http://caibaojian.com/img-vertical-middle.html</a></p>\n<p>在<a href=\"http://caibaojian.com/\" target=\"_blank\" rel=\"noopener\">前端开发</a>制作中，图片<a href=\"http://caibaojian.com/t/垂直居中\" target=\"_blank\" rel=\"noopener\">垂直居中</a>对齐是很常见的，有些是固定高度，有些没有固定高度，本文分享我用的四种方法，希望对你有所启发。</p>\n<p>以下说的做法暂不考虑IE浏览器的兼容性，适用于移动端，对兼容性感兴趣的可以看之前的文章：<a href=\"http://caibaojian.com/vertical-centering-with-css.html\" target=\"_blank\" rel=\"noopener\">图片垂直居中对齐的3种方法</a></p>\n<p>以下的做法中假定外层的高度和宽度已经固定。通用<a href=\"http://caibaojian.com/t/html\" target=\"_blank\" rel=\"noopener\">HTML</a>和<a href=\"http://caibaojian.com/css3/\" target=\"_blank\" rel=\"noopener\">CSS</a>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#00f</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-绝对定位-margin-auto\"><a href=\"#1-绝对定位-margin-auto\" class=\"headerlink\" title=\"1.绝对定位+margin:auto\"></a>1.绝对定位+margin:auto</h3><p>利用图片相对于外层浮动，加上margin:auto.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//code from http://caibaojian.com/img-vertical-middle.html</span><br><span class=\"line\"><span class=\"selector-class\">.img1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img1</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://caibaojian.com/demo/2017/07/img1.html#demo1\" target=\"_blank\" rel=\"noopener\">演示1</a></p>\n<h3 id=\"2-flexbox\"><a href=\"#2-flexbox\" class=\"headerlink\" title=\"2.flexbox\"></a>2.flexbox</h3><p>利用flexbox里面的<a href=\"http://caibaojian.com/t/垂直居中\" target=\"_blank\" rel=\"noopener\">垂直居中</a>属性：align-items:center(垂直居中)和justify-content:center(水平居中);<a href=\"http://caibaojian.com/img-vertical-middle.html\" target=\"_blank\" rel=\"noopener\">·</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:-webkit-box;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:-ms-flexbox;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex-box;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-align</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-flex-align</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-pack</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-flex-pack</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://caibaojian.com/demo/2017/07/img1.html#demo2\" target=\"_blank\" rel=\"noopener\">演示2</a></p>\n<h3 id=\"3-table-cell\"><a href=\"#3-table-cell\" class=\"headerlink\" title=\"3.table-cell\"></a>3.table-cell</h3><p>利用display:table-cell+图片vertical-align:middle</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icenter\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img3</span> <span class=\"selector-class\">.icenter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">300px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img3</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://caibaojian.com/demo/2017/07/img1.html#demo3\" target=\"_blank\" rel=\"noopener\">演示3</a></p>\n<h3 id=\"4-增加一个空白标签\"><a href=\"#4-增加一个空白标签\" class=\"headerlink\" title=\"4.增加一个空白标签\"></a>4.增加一个空白标签</h3><p>兼容性较好，支持IE浏览器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img4\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iblock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>:center</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img4</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img4</span> <span class=\"selector-class\">.iblock</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>原文链接：<a href=\"http://caibaojian.com/img-vertical-middle.html\" target=\"_blank\" rel=\"noopener\">http://caibaojian.com/img-vertical-middle.html</a></p>\n<p>在<a href=\"http://caibaojian.com/\" target=\"_blank\" rel=\"noopener\">前端开发</a>制作中，图片<a href=\"http://caibaojian.com/t/垂直居中\" target=\"_blank\" rel=\"noopener\">垂直居中</a>对齐是很常见的，有些是固定高度，有些没有固定高度，本文分享我用的四种方法，希望对你有所启发。</p>\n<p>以下说的做法暂不考虑IE浏览器的兼容性，适用于移动端，对兼容性感兴趣的可以看之前的文章：<a href=\"http://caibaojian.com/vertical-centering-with-css.html\" target=\"_blank\" rel=\"noopener\">图片垂直居中对齐的3种方法</a></p>\n<p>以下的做法中假定外层的高度和宽度已经固定。通用<a href=\"http://caibaojian.com/t/html\" target=\"_blank\" rel=\"noopener\">HTML</a>和<a href=\"http://caibaojian.com/css3/\" target=\"_blank\" rel=\"noopener\">CSS</a>代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:<span class=\"number\">20px</span> auto;</span><br><span class=\"line\">  <span class=\"attribute\">background</span>:<span class=\"number\">#00f</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"1-绝对定位-margin-auto\"><a href=\"#1-绝对定位-margin-auto\" class=\"headerlink\" title=\"1.绝对定位+margin:auto\"></a>1.绝对定位+margin:auto</h3><p>利用图片相对于外层浮动，加上margin:auto.</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img1\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//code from http://caibaojian.com/img-vertical-middle.html</span><br><span class=\"line\"><span class=\"selector-class\">.img1</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img1</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">position</span>:absolute;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">bottom</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">right</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">margin</span>:auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://caibaojian.com/demo/2017/07/img1.html#demo1\" target=\"_blank\" rel=\"noopener\">演示1</a></p>\n<h3 id=\"2-flexbox\"><a href=\"#2-flexbox\" class=\"headerlink\" title=\"2.flexbox\"></a>2.flexbox</h3><p>利用flexbox里面的<a href=\"http://caibaojian.com/t/垂直居中\" target=\"_blank\" rel=\"noopener\">垂直居中</a>属性：align-items:center(垂直居中)和justify-content:center(水平居中);<a href=\"http://caibaojian.com/img-vertical-middle.html\" target=\"_blank\" rel=\"noopener\">·</a></p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img2\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img2</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:-webkit-box;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:-ms-flexbox;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex-box;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:flex;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-align</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-flex-align</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">align-items</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">-webkit-box-pack</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">-ms-flex-pack</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">justify-content</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://caibaojian.com/demo/2017/07/img1.html#demo2\" target=\"_blank\" rel=\"noopener\">演示2</a></p>\n<h3 id=\"3-table-cell\"><a href=\"#3-table-cell\" class=\"headerlink\" title=\"3.table-cell\"></a>3.table-cell</h3><p>利用display:table-cell+图片vertical-align:middle</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img3\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">span</span> <span class=\"attr\">class</span>=<span class=\"string\">\"icenter\"</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">span</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img3</span> <span class=\"selector-class\">.icenter</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:table-cell;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>:center;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">300px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">300px</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img3</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"http://caibaojian.com/demo/2017/07/img1.html#demo3\" target=\"_blank\" rel=\"noopener\">演示3</a></p>\n<h3 id=\"4-增加一个空白标签\"><a href=\"#4-增加一个空白标签\" class=\"headerlink\" title=\"4.增加一个空白标签\"></a>4.增加一个空白标签</h3><p>兼容性较好，支持IE浏览器</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">\"img img4\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">img</span> <span class=\"attr\">src</span>=<span class=\"string\">\"http://dummyimage.com/200x200/f66/\"</span>/&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">i</span> <span class=\"attr\">class</span>=<span class=\"string\">\"iblock\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">i</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.img4</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">text-align</span>:center</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img4</span> <span class=\"selector-tag\">img</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.img4</span> <span class=\"selector-class\">.iblock</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">display</span>:inline-block;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>:<span class=\"number\">100%</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>:<span class=\"number\">0</span>;</span><br><span class=\"line\">  <span class=\"attribute\">vertical-align</span>:middle</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"FormData使用方法详解","date":"2019-09-08T07:08:38.000Z","_content":"\n##### FormData的主要用途有两个：\n\n\n\n###### 1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\n\n\n\n###### 2、异步上传文件\n\n\n\n#### 一、创建formData对象\n\n\n\n###### 1、创建一个空对象：\n\n\n\n```js\n//通过FormData构造函数创建一个空对象\n\nvar formdata=new FormData();\n\n//可以通过append()方法来追加数据\n\nformdata.append(\"name\",\"laotie\");\n\n//通过get方法对值进行读取\n\nconsole.log(formdata.get(\"name\"));//laotie\n\n//通过set方法对值进行设置\n\nformdata.set(\"name\",\"laoliu\");\n\nconsole.log(formdata.get(\"name\"));//laoliu\n```\n\n\n\n\n\n###### 2、通过表单对formData进行初始化\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n通过表单元素作为参数，实现对formData的初始化：\n\n\n\n\n\n```js\n//获得表单按钮元素\nvar btn=document.querySelector(\"#btn\");\n//为按钮添加点击事件\nbtn.onclick=function(){\n//根据ID获得页面当中的form表单元素\nvar form=document.querySelector(\"#advForm\");\n//将获得的表单元素作为参数，对formData进行初始化\nvar formdata=new FormData(form);\n//通过get方法获得name为advName元素的value值\nconsole.log(formdata.get(\"advName\"));//xixi\n//通过get方法获得name为advType元素的value值\nconsole.log(formdata.get(\"advType\"));//1\n}\n```\n\n\n\n#### 二、操作方法\n\n\n\n```js\n1、通过get(key)与getAll(key)来获取相对应的值\n// 获取key为age的第一个值\nformdata.get(\"age\"); \n// 获取key为age的所有值，返回值为数组类型\nformdata.getAll(\"age\");\n2、通过append(key,value)在数据末尾追加数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoli的数据\nformdata.append(\"name\",\"laoli\");\n//通过append()方法在末尾追加key为name值为laotie的数据\nformdata.append(\"name\",\"laotie\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoli\", \"laotie\"]\n3、通过set(key, value)来设置修改数据\nkey的值不存在，会添加一条数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//如果key的值不存在会为数据添加一个key为name值为laoliu的数据\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\nkey的值存在，会修改对应的value值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoliu2的数据\nformdata.append(\"name\",\"laoliu2\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoliu2\"]\n//将存在的key为name的值修改为laoli\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoli\"]\n4、通过has(key)来判断是否存在对应的key值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//判断是否包含key为name的数据\nconsole.log(formdata.has(\"name\"));//true\n//判断是否包含key为age的数据\nconsole.log(formdata.has(\"age\"));//false\n5、通过delete(key)可以删除数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\nconsole.log(formdata.get(\"name\"));//laoliu\n//删除key为name的值\nformdata.delete(\"name\");\nconsole.log(formdata.get(\"name\"));//null\n```\n\n\n\n#### 三、通过XMLHttpRequest发送数据\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p>广告图片：<input type=\"file\" name=\"advPic\"></p>\n<p>广告地址：<input type=\"text\" name=\"advUrl\"></p>\n<p>广告排序：<input type=\"text\" name=\"orderBy\"></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n发送数据：\n\n\n\n```js\nvar btn=document.querySelector(\"#btn\");\nbtn.onclick=function(){\n  var formdata=new FormData(document.getElementById(\"advForm\"));\n  var xhr=new XMLHttpRequest();\n  xhr.open(\"post\",\"http://127.0.0.1/adv\");\n  xhr.send(formdata);\n  xhr.onload=function(){\n    if(xhr.status==200){\n    //...\n    }\n  }\n}\n```","source":"_posts/FormData使用方法详解.md","raw":"---\ntitle: FormData使用方法详解\ndate: 2019-09-08 15:08:38\ntags: formData\n---\n\n##### FormData的主要用途有两个：\n\n\n\n###### 1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\n\n\n\n###### 2、异步上传文件\n\n\n\n#### 一、创建formData对象\n\n\n\n###### 1、创建一个空对象：\n\n\n\n```js\n//通过FormData构造函数创建一个空对象\n\nvar formdata=new FormData();\n\n//可以通过append()方法来追加数据\n\nformdata.append(\"name\",\"laotie\");\n\n//通过get方法对值进行读取\n\nconsole.log(formdata.get(\"name\"));//laotie\n\n//通过set方法对值进行设置\n\nformdata.set(\"name\",\"laoliu\");\n\nconsole.log(formdata.get(\"name\"));//laoliu\n```\n\n\n\n\n\n###### 2、通过表单对formData进行初始化\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n通过表单元素作为参数，实现对formData的初始化：\n\n\n\n\n\n```js\n//获得表单按钮元素\nvar btn=document.querySelector(\"#btn\");\n//为按钮添加点击事件\nbtn.onclick=function(){\n//根据ID获得页面当中的form表单元素\nvar form=document.querySelector(\"#advForm\");\n//将获得的表单元素作为参数，对formData进行初始化\nvar formdata=new FormData(form);\n//通过get方法获得name为advName元素的value值\nconsole.log(formdata.get(\"advName\"));//xixi\n//通过get方法获得name为advType元素的value值\nconsole.log(formdata.get(\"advType\"));//1\n}\n```\n\n\n\n#### 二、操作方法\n\n\n\n```js\n1、通过get(key)与getAll(key)来获取相对应的值\n// 获取key为age的第一个值\nformdata.get(\"age\"); \n// 获取key为age的所有值，返回值为数组类型\nformdata.getAll(\"age\");\n2、通过append(key,value)在数据末尾追加数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoli的数据\nformdata.append(\"name\",\"laoli\");\n//通过append()方法在末尾追加key为name值为laotie的数据\nformdata.append(\"name\",\"laotie\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoli\", \"laotie\"]\n3、通过set(key, value)来设置修改数据\nkey的值不存在，会添加一条数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//如果key的值不存在会为数据添加一个key为name值为laoliu的数据\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\nkey的值存在，会修改对应的value值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//通过append()方法在末尾追加key为name值为laoliu2的数据\nformdata.append(\"name\",\"laoliu2\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoliu\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoliu2\"]\n//将存在的key为name的值修改为laoli\nformdata.set(\"name\",\"laoli\");\n//通过get方法读取key为name的第一个值\nconsole.log(formdata.get(\"name\"));//laoli\n//通过getAll方法读取key为name的所有值\nconsole.log(formdata.getAll(\"name\"));//[\"laoli\"]\n4、通过has(key)来判断是否存在对应的key值\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\n//判断是否包含key为name的数据\nconsole.log(formdata.has(\"name\"));//true\n//判断是否包含key为age的数据\nconsole.log(formdata.has(\"age\"));//false\n5、通过delete(key)可以删除数据\n//通过FormData构造函数创建一个空对象\nvar formdata=new FormData();\n//通过append()方法在末尾追加key为name值为laoliu的数据\nformdata.append(\"name\",\"laoliu\");\nconsole.log(formdata.get(\"name\"));//laoliu\n//删除key为name的值\nformdata.delete(\"name\");\nconsole.log(formdata.get(\"name\"));//null\n```\n\n\n\n#### 三、通过XMLHttpRequest发送数据\n\n\n\n创建表单：\n\n\n\n```html\n<form id=\"advForm\">\n<p>广告名称：<input type=\"text\" name=\"advName\" value=\"xixi\"></p>\n<p>广告类别：<select name=\"advType\">\n<option value=\"1\">轮播图</option>\n<option value=\"2\">轮播图底部广告</option>\n<option value=\"3\">热门回收广告</option>\n<option value=\"4\">优品精选广告</option>\n</select></p>\n<p>广告图片：<input type=\"file\" name=\"advPic\"></p>\n<p>广告地址：<input type=\"text\" name=\"advUrl\"></p>\n<p>广告排序：<input type=\"text\" name=\"orderBy\"></p>\n<p><input type=\"button\" id=\"btn\" value=\"添加\"></p>\n</form>\n```\n\n\n\n发送数据：\n\n\n\n```js\nvar btn=document.querySelector(\"#btn\");\nbtn.onclick=function(){\n  var formdata=new FormData(document.getElementById(\"advForm\"));\n  var xhr=new XMLHttpRequest();\n  xhr.open(\"post\",\"http://127.0.0.1/adv\");\n  xhr.send(formdata);\n  xhr.onload=function(){\n    if(xhr.status==200){\n    //...\n    }\n  }\n}\n```","slug":"FormData使用方法详解","published":1,"updated":"2021-03-24T15:03:18.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls15k0002si35dbgrxhpc","content":"<h5 id=\"FormData的主要用途有两个：\"><a href=\"#FormData的主要用途有两个：\" class=\"headerlink\" title=\"FormData的主要用途有两个：\"></a>FormData的主要用途有两个：</h5><h6 id=\"1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\"><a href=\"#1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\" class=\"headerlink\" title=\"1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\"></a>1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。</h6><h6 id=\"2、异步上传文件\"><a href=\"#2、异步上传文件\" class=\"headerlink\" title=\"2、异步上传文件\"></a>2、异步上传文件</h6><h4 id=\"一、创建formData对象\"><a href=\"#一、创建formData对象\" class=\"headerlink\" title=\"一、创建formData对象\"></a>一、创建formData对象</h4><h6 id=\"1、创建一个空对象：\"><a href=\"#1、创建一个空对象：\" class=\"headerlink\" title=\"1、创建一个空对象：\"></a>1、创建一个空对象：</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过FormData构造函数创建一个空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> formdata=<span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以通过append()方法来追加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">formdata.append(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"laotie\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过get方法对值进行读取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"name\"</span>));<span class=\"comment\">//laotie</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过set方法对值进行设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">formdata.set(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"laoliu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"name\"</span>));<span class=\"comment\">//laoliu</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、通过表单对formData进行初始化\"><a href=\"#2、通过表单对formData进行初始化\" class=\"headerlink\" title=\"2、通过表单对formData进行初始化\"></a>2、通过表单对formData进行初始化</h6><p>创建表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"advForm\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xixi\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告类别：<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>轮播图<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>轮播图底部广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span>&gt;</span>热门回收广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>&gt;</span>优品精选广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"添加\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过表单元素作为参数，实现对formData的初始化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得表单按钮元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#btn\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//为按钮添加点击事件</span></span><br><span class=\"line\">btn.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//根据ID获得页面当中的form表单元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> form=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#advForm\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//将获得的表单元素作为参数，对formData进行初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formdata=<span class=\"keyword\">new</span> FormData(form);</span><br><span class=\"line\"><span class=\"comment\">//通过get方法获得name为advName元素的value值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"advName\"</span>));<span class=\"comment\">//xixi</span></span><br><span class=\"line\"><span class=\"comment\">//通过get方法获得name为advType元素的value值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"advType\"</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、操作方法\"><a href=\"#二、操作方法\" class=\"headerlink\" title=\"二、操作方法\"></a>二、操作方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、通过<span class=\"keyword\">get</span>(key)与getAll(key)来获取相对应的值</span><br><span class=\"line\">// 获取key为age的第一个值</span><br><span class=\"line\">formdata.<span class=\"keyword\">get</span>(\"age\"); </span><br><span class=\"line\">// 获取key为age的所有值，返回值为数组类型</span><br><span class=\"line\">formdata.getAll(\"age\");</span><br><span class=\"line\">2、通过append(key,value)在数据末尾追加数据</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoli的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoli\");</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laotie的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laotie\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoliu</span><br><span class=\"line\">//通过getAll方法读取key为name的所有值</span><br><span class=\"line\">console.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoli\", \"laotie\"]</span><br><span class=\"line\">3、通过<span class=\"keyword\">set</span>(key, value)来设置修改数据</span><br><span class=\"line\">key的值不存在，会添加一条数据</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//如果key的值不存在会为数据添加一个key为name值为laoliu的数据</span><br><span class=\"line\">formdata.<span class=\"keyword\">set</span>(\"name\",\"laoli\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoli</span><br><span class=\"line\">key的值存在，会修改对应的value值</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu2的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu2\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoliu</span><br><span class=\"line\">//通过getAll方法读取key为name的所有值</span><br><span class=\"line\">console.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoliu2\"]</span><br><span class=\"line\">//将存在的key为name的值修改为laoli</span><br><span class=\"line\">formdata.<span class=\"keyword\">set</span>(\"name\",\"laoli\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoli</span><br><span class=\"line\">//通过getAll方法读取key为name的所有值</span><br><span class=\"line\">console.log(formdata.getAll(\"name\"));//[\"laoli\"]</span><br><span class=\"line\">4、通过has(key)来判断是否存在对应的key值</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">//判断是否包含key为name的数据</span><br><span class=\"line\">console.log(formdata.has(\"name\"));//true</span><br><span class=\"line\">//判断是否包含key为age的数据</span><br><span class=\"line\">console.log(formdata.has(\"age\"));//false</span><br><span class=\"line\">5、通过delete(key)可以删除数据</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoliu</span><br><span class=\"line\">//删除key为name的值</span><br><span class=\"line\">formdata.delete(\"name\");</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//null</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、通过XMLHttpRequest发送数据\"><a href=\"#三、通过XMLHttpRequest发送数据\" class=\"headerlink\" title=\"三、通过XMLHttpRequest发送数据\"></a>三、通过XMLHttpRequest发送数据</h4><p>创建表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"advForm\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xixi\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告类别：<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>轮播图<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>轮播图底部广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span>&gt;</span>热门回收广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>&gt;</span>优品精选广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告图片：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advPic\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advUrl\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告排序：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderBy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"添加\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>发送数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#btn\"</span>);</span><br><span class=\"line\">btn.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> formdata=<span class=\"keyword\">new</span> FormData(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"advForm\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.open(<span class=\"string\">\"post\"</span>,<span class=\"string\">\"http://127.0.0.1/adv\"</span>);</span><br><span class=\"line\">  xhr.send(formdata);</span><br><span class=\"line\">  xhr.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h5 id=\"FormData的主要用途有两个：\"><a href=\"#FormData的主要用途有两个：\" class=\"headerlink\" title=\"FormData的主要用途有两个：\"></a>FormData的主要用途有两个：</h5><h6 id=\"1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\"><a href=\"#1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\" class=\"headerlink\" title=\"1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。\"></a>1、将form表单元素的name与value进行组合，实现表单数据的序列化，从而减少表单元素的拼接，提高工作效率。</h6><h6 id=\"2、异步上传文件\"><a href=\"#2、异步上传文件\" class=\"headerlink\" title=\"2、异步上传文件\"></a>2、异步上传文件</h6><h4 id=\"一、创建formData对象\"><a href=\"#一、创建formData对象\" class=\"headerlink\" title=\"一、创建formData对象\"></a>一、创建formData对象</h4><h6 id=\"1、创建一个空对象：\"><a href=\"#1、创建一个空对象：\" class=\"headerlink\" title=\"1、创建一个空对象：\"></a>1、创建一个空对象：</h6><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//通过FormData构造函数创建一个空对象</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> formdata=<span class=\"keyword\">new</span> FormData();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//可以通过append()方法来追加数据</span></span><br><span class=\"line\"></span><br><span class=\"line\">formdata.append(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"laotie\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过get方法对值进行读取</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"name\"</span>));<span class=\"comment\">//laotie</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//通过set方法对值进行设置</span></span><br><span class=\"line\"></span><br><span class=\"line\">formdata.set(<span class=\"string\">\"name\"</span>,<span class=\"string\">\"laoliu\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"name\"</span>));<span class=\"comment\">//laoliu</span></span><br></pre></td></tr></table></figure>\n\n<h6 id=\"2、通过表单对formData进行初始化\"><a href=\"#2、通过表单对formData进行初始化\" class=\"headerlink\" title=\"2、通过表单对formData进行初始化\"></a>2、通过表单对formData进行初始化</h6><p>创建表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"advForm\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xixi\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告类别：<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>轮播图<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>轮播图底部广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span>&gt;</span>热门回收广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>&gt;</span>优品精选广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"添加\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>通过表单元素作为参数，实现对formData的初始化：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//获得表单按钮元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#btn\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//为按钮添加点击事件</span></span><br><span class=\"line\">btn.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"><span class=\"comment\">//根据ID获得页面当中的form表单元素</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> form=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#advForm\"</span>);</span><br><span class=\"line\"><span class=\"comment\">//将获得的表单元素作为参数，对formData进行初始化</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> formdata=<span class=\"keyword\">new</span> FormData(form);</span><br><span class=\"line\"><span class=\"comment\">//通过get方法获得name为advName元素的value值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"advName\"</span>));<span class=\"comment\">//xixi</span></span><br><span class=\"line\"><span class=\"comment\">//通过get方法获得name为advType元素的value值</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formdata.get(<span class=\"string\">\"advType\"</span>));<span class=\"comment\">//1</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"二、操作方法\"><a href=\"#二、操作方法\" class=\"headerlink\" title=\"二、操作方法\"></a>二、操作方法</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">1</span>、通过<span class=\"keyword\">get</span>(key)与getAll(key)来获取相对应的值</span><br><span class=\"line\">// 获取key为age的第一个值</span><br><span class=\"line\">formdata.<span class=\"keyword\">get</span>(\"age\"); </span><br><span class=\"line\">// 获取key为age的所有值，返回值为数组类型</span><br><span class=\"line\">formdata.getAll(\"age\");</span><br><span class=\"line\">2、通过append(key,value)在数据末尾追加数据</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoli的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoli\");</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laotie的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laotie\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoliu</span><br><span class=\"line\">//通过getAll方法读取key为name的所有值</span><br><span class=\"line\">console.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoli\", \"laotie\"]</span><br><span class=\"line\">3、通过<span class=\"keyword\">set</span>(key, value)来设置修改数据</span><br><span class=\"line\">key的值不存在，会添加一条数据</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//如果key的值不存在会为数据添加一个key为name值为laoliu的数据</span><br><span class=\"line\">formdata.<span class=\"keyword\">set</span>(\"name\",\"laoli\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoli</span><br><span class=\"line\">key的值存在，会修改对应的value值</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu2的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu2\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoliu</span><br><span class=\"line\">//通过getAll方法读取key为name的所有值</span><br><span class=\"line\">console.log(formdata.getAll(\"name\"));//[\"laoliu\", \"laoliu2\"]</span><br><span class=\"line\">//将存在的key为name的值修改为laoli</span><br><span class=\"line\">formdata.<span class=\"keyword\">set</span>(\"name\",\"laoli\");</span><br><span class=\"line\">//通过<span class=\"keyword\">get</span>方法读取key为name的第一个值</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoli</span><br><span class=\"line\">//通过getAll方法读取key为name的所有值</span><br><span class=\"line\">console.log(formdata.getAll(\"name\"));//[\"laoli\"]</span><br><span class=\"line\">4、通过has(key)来判断是否存在对应的key值</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">//判断是否包含key为name的数据</span><br><span class=\"line\">console.log(formdata.has(\"name\"));//true</span><br><span class=\"line\">//判断是否包含key为age的数据</span><br><span class=\"line\">console.log(formdata.has(\"age\"));//false</span><br><span class=\"line\">5、通过delete(key)可以删除数据</span><br><span class=\"line\">//通过FormData构造函数创建一个空对象</span><br><span class=\"line\">var formdata=new FormData();</span><br><span class=\"line\">//通过append()方法在末尾追加key为name值为laoliu的数据</span><br><span class=\"line\">formdata.append(\"name\",\"laoliu\");</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//laoliu</span><br><span class=\"line\">//删除key为name的值</span><br><span class=\"line\">formdata.delete(\"name\");</span><br><span class=\"line\">console.log(formdata.<span class=\"keyword\">get</span>(\"name\"));//null</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"三、通过XMLHttpRequest发送数据\"><a href=\"#三、通过XMLHttpRequest发送数据\" class=\"headerlink\" title=\"三、通过XMLHttpRequest发送数据\"></a>三、通过XMLHttpRequest发送数据</h4><p>创建表单：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">form</span> <span class=\"attr\">id</span>=<span class=\"string\">\"advForm\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告名称：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advName\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"xixi\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告类别：<span class=\"tag\">&lt;<span class=\"name\">select</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advType\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"1\"</span>&gt;</span>轮播图<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"2\"</span>&gt;</span>轮播图底部广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"3\"</span>&gt;</span>热门回收广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">option</span> <span class=\"attr\">value</span>=<span class=\"string\">\"4\"</span>&gt;</span>优品精选广告<span class=\"tag\">&lt;/<span class=\"name\">option</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">select</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告图片：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"file\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advPic\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告地址：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"advUrl\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>广告排序：<span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"text\"</span> <span class=\"attr\">name</span>=<span class=\"string\">\"orderBy\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">\"button\"</span> <span class=\"attr\">id</span>=<span class=\"string\">\"btn\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"添加\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">form</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>发送数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> btn=<span class=\"built_in\">document</span>.querySelector(<span class=\"string\">\"#btn\"</span>);</span><br><span class=\"line\">btn.onclick=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> formdata=<span class=\"keyword\">new</span> FormData(<span class=\"built_in\">document</span>.getElementById(<span class=\"string\">\"advForm\"</span>));</span><br><span class=\"line\">  <span class=\"keyword\">var</span> xhr=<span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">  xhr.open(<span class=\"string\">\"post\"</span>,<span class=\"string\">\"http://127.0.0.1/adv\"</span>);</span><br><span class=\"line\">  xhr.send(formdata);</span><br><span class=\"line\">  xhr.onload=<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(xhr.status==<span class=\"number\">200</span>)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//...</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"HTML怎么多行显示三个点","date":"2019-09-08T07:05:44.000Z","_content":"\n限制在一个块元素显示的文本的行数。\n\n\n\n-webkit-line-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。\n\n\n\n为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性：\n\n\n\ndisplay: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。\n\n\n\n-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。\n\n\n\ntext-overflow，可以用来多行文本的情况下，用省略号“...”隐藏超出范围的文本 。\n\n#### css属性： **块元素**\n\n```css\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;//限制文本的行数，只显示两行\n-webkit-box-orient: vertical;\noverflow: hidden;\n```\n\n#### 如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：\n\n```css\n/* autoprefixer: off */\n  -webkit-box-orient: vertical;        // 参考 https://github.com/postcss/autoprefixer/issues/776\n/* autoprefixer: on */\t\n```\n\n#### 例子：\n\n```css\np{\n    /* autoprefixer: off */\n    -webkit-box-orient: vertical;\n    /* autoprefixer: on */\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    overflow: hidden;\n}\n```","source":"_posts/HTML怎么多行显示三个点.md","raw":"---\ntitle: HTML怎么多行显示三个点\ndate: 2019-09-08 15:05:44\ntags: [html, 多行, 三个点, ...]\n---\n\n限制在一个块元素显示的文本的行数。\n\n\n\n-webkit-line-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。\n\n\n\n为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性：\n\n\n\ndisplay: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。\n\n\n\n-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。\n\n\n\ntext-overflow，可以用来多行文本的情况下，用省略号“...”隐藏超出范围的文本 。\n\n#### css属性： **块元素**\n\n```css\ndisplay: -webkit-box;\n-webkit-line-clamp: 2;//限制文本的行数，只显示两行\n-webkit-box-orient: vertical;\noverflow: hidden;\n```\n\n#### 如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：\n\n```css\n/* autoprefixer: off */\n  -webkit-box-orient: vertical;        // 参考 https://github.com/postcss/autoprefixer/issues/776\n/* autoprefixer: on */\t\n```\n\n#### 例子：\n\n```css\np{\n    /* autoprefixer: off */\n    -webkit-box-orient: vertical;\n    /* autoprefixer: on */\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    overflow: hidden;\n}\n```","slug":"HTML怎么多行显示三个点","published":1,"updated":"2021-03-24T15:03:18.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1630004si356y2eih62","content":"<p>限制在一个块元素显示的文本的行数。</p>\n<p>-webkit-line-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p>\n<p>为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性：</p>\n<p>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</p>\n<p>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</p>\n<p>text-overflow，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。</p>\n<h4 id=\"css属性：-块元素\"><a href=\"#css属性：-块元素\" class=\"headerlink\" title=\"css属性： 块元素\"></a>css属性： <strong>块元素</strong></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\">-webkit-line-clamp: 2;//限制文本的行数，只显示两行</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果遇到-webpack-编译或打包后属性消失-可以用下面的解决：\"><a href=\"#如果遇到-webpack-编译或打包后属性消失-可以用下面的解决：\" class=\"headerlink\" title=\"如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：\"></a>如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* autoprefixer: off */</span></span><br><span class=\"line\">  -webkit-box-orient: vertical;        // 参考 https://github.com/postcss/autoprefixer/issues/776</span><br><span class=\"line\"><span class=\"comment\">/* autoprefixer: on */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* autoprefixer: off */</span></span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">    <span class=\"comment\">/* autoprefixer: on */</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p>限制在一个块元素显示的文本的行数。</p>\n<p>-webkit-line-clamp 是一个 不规范的属性（unsupported WebKit property），它没有出现在 CSS 规范草案中。</p>\n<p>为了实现该效果，它需要组合其他外来的WebKit属性。常见结合属性：</p>\n<p>display: -webkit-box; 必须结合的属性 ，将对象作为弹性伸缩盒子模型显示 。</p>\n<p>-webkit-box-orient 必须结合的属性 ，设置或检索伸缩盒对象的子元素的排列方式 。</p>\n<p>text-overflow，可以用来多行文本的情况下，用省略号“…”隐藏超出范围的文本 。</p>\n<h4 id=\"css属性：-块元素\"><a href=\"#css属性：-块元素\" class=\"headerlink\" title=\"css属性： 块元素\"></a>css属性： <strong>块元素</strong></h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">display</span>: <span class=\"selector-tag\">-webkit-box</span>;</span><br><span class=\"line\">-webkit-line-clamp: 2;//限制文本的行数，只显示两行</span><br><span class=\"line\"><span class=\"selector-tag\">-webkit-box-orient</span>: <span class=\"selector-tag\">vertical</span>;</span><br><span class=\"line\"><span class=\"selector-tag\">overflow</span>: <span class=\"selector-tag\">hidden</span>;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"如果遇到-webpack-编译或打包后属性消失-可以用下面的解决：\"><a href=\"#如果遇到-webpack-编译或打包后属性消失-可以用下面的解决：\" class=\"headerlink\" title=\"如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：\"></a>如果遇到 webpack 编译或打包后属性消失 可以用下面的解决：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* autoprefixer: off */</span></span><br><span class=\"line\">  -webkit-box-orient: vertical;        // 参考 https://github.com/postcss/autoprefixer/issues/776</span><br><span class=\"line\"><span class=\"comment\">/* autoprefixer: on */</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"例子：\"><a href=\"#例子：\" class=\"headerlink\" title=\"例子：\"></a>例子：</h4><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">p</span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/* autoprefixer: off */</span></span><br><span class=\"line\">    <span class=\"attribute\">-webkit-box-orient</span>: vertical;</span><br><span class=\"line\">    <span class=\"comment\">/* autoprefixer: on */</span></span><br><span class=\"line\">    <span class=\"attribute\">display</span>: -webkit-box;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-line-clamp</span>: <span class=\"number\">3</span>;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"JS如何通用判断数据类型","date":"2021-03-24T12:55:32.000Z","_content":"typeof对于原始类型（除了Null)是可以检测到的，但是引用类型就统一返回object\ninstance of 用于检测构造函数的原型是否出现在某个实例函数的原型链上\n最好的方法是使用 Object.prototype.toString方法，它可以检测到任何类型，\n返回的结果是[object Type]的形式,基本可以实现所有类型的检测\n```\nfunction type(data){\n  const toString = Object.prototype.toString;\n  const objType = toString.call(data);\n  const arr = objType.slice(1, -1).split(' ');\n  const type = arr[1].toLowerCase();\n    // const type = .call(data).slice(1,-1).split(' ')[1].toLowerCase()\n  return type;\n}\ntype([])\n\"array\"\ntype(123)\n\"number\"\ntype('123')\n\"string\"\ntype({})\n\"object\"\ntype(type)\n\"function\"\ntype(null)\n\"null\"\ntype(undefined)\n\"undefined\"\ntype(Symbol())\n\"symbol\"\n```\n","source":"_posts/JS如何通用判断数据类型.md","raw":"---\ntitle: JS如何通用判断数据类型\ndate: 2021-03-24 20:55:32\ntags:\n---\ntypeof对于原始类型（除了Null)是可以检测到的，但是引用类型就统一返回object\ninstance of 用于检测构造函数的原型是否出现在某个实例函数的原型链上\n最好的方法是使用 Object.prototype.toString方法，它可以检测到任何类型，\n返回的结果是[object Type]的形式,基本可以实现所有类型的检测\n```\nfunction type(data){\n  const toString = Object.prototype.toString;\n  const objType = toString.call(data);\n  const arr = objType.slice(1, -1).split(' ');\n  const type = arr[1].toLowerCase();\n    // const type = .call(data).slice(1,-1).split(' ')[1].toLowerCase()\n  return type;\n}\ntype([])\n\"array\"\ntype(123)\n\"number\"\ntype('123')\n\"string\"\ntype({})\n\"object\"\ntype(type)\n\"function\"\ntype(null)\n\"null\"\ntype(undefined)\n\"undefined\"\ntype(Symbol())\n\"symbol\"\n```\n","slug":"JS如何通用判断数据类型","published":1,"updated":"2021-03-24T15:09:42.895Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls16a0005si35kk2vbbsd","content":"<p>typeof对于原始类型（除了Null)是可以检测到的，但是引用类型就统一返回object<br>instance of 用于检测构造函数的原型是否出现在某个实例函数的原型链上<br>最好的方法是使用 Object.prototype.toString方法，它可以检测到任何类型，<br>返回的结果是[object Type]的形式,基本可以实现所有类型的检测</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function type(data)&#123;</span><br><span class=\"line\">  const toString = Object.prototype.toString;</span><br><span class=\"line\">  const objType = toString.call(data);</span><br><span class=\"line\">  const arr = objType.slice(1, -1).split(&apos; &apos;);</span><br><span class=\"line\">  const type = arr[1].toLowerCase();</span><br><span class=\"line\">    // const type = .call(data).slice(1,-1).split(&apos; &apos;)[1].toLowerCase()</span><br><span class=\"line\">  return type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type([])</span><br><span class=\"line\">&quot;array&quot;</span><br><span class=\"line\">type(123)</span><br><span class=\"line\">&quot;number&quot;</span><br><span class=\"line\">type(&apos;123&apos;)</span><br><span class=\"line\">&quot;string&quot;</span><br><span class=\"line\">type(&#123;&#125;)</span><br><span class=\"line\">&quot;object&quot;</span><br><span class=\"line\">type(type)</span><br><span class=\"line\">&quot;function&quot;</span><br><span class=\"line\">type(null)</span><br><span class=\"line\">&quot;null&quot;</span><br><span class=\"line\">type(undefined)</span><br><span class=\"line\">&quot;undefined&quot;</span><br><span class=\"line\">type(Symbol())</span><br><span class=\"line\">&quot;symbol&quot;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>typeof对于原始类型（除了Null)是可以检测到的，但是引用类型就统一返回object<br>instance of 用于检测构造函数的原型是否出现在某个实例函数的原型链上<br>最好的方法是使用 Object.prototype.toString方法，它可以检测到任何类型，<br>返回的结果是[object Type]的形式,基本可以实现所有类型的检测</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function type(data)&#123;</span><br><span class=\"line\">  const toString = Object.prototype.toString;</span><br><span class=\"line\">  const objType = toString.call(data);</span><br><span class=\"line\">  const arr = objType.slice(1, -1).split(&apos; &apos;);</span><br><span class=\"line\">  const type = arr[1].toLowerCase();</span><br><span class=\"line\">    // const type = .call(data).slice(1,-1).split(&apos; &apos;)[1].toLowerCase()</span><br><span class=\"line\">  return type;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type([])</span><br><span class=\"line\">&quot;array&quot;</span><br><span class=\"line\">type(123)</span><br><span class=\"line\">&quot;number&quot;</span><br><span class=\"line\">type(&apos;123&apos;)</span><br><span class=\"line\">&quot;string&quot;</span><br><span class=\"line\">type(&#123;&#125;)</span><br><span class=\"line\">&quot;object&quot;</span><br><span class=\"line\">type(type)</span><br><span class=\"line\">&quot;function&quot;</span><br><span class=\"line\">type(null)</span><br><span class=\"line\">&quot;null&quot;</span><br><span class=\"line\">type(undefined)</span><br><span class=\"line\">&quot;undefined&quot;</span><br><span class=\"line\">type(Symbol())</span><br><span class=\"line\">&quot;symbol&quot;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"Moment.js-输出明天、今天和昨天","date":"2019-09-08T07:23:25.000Z","_content":"\n\n\n```js\nlet today     = moment(new Date());\n\nlet tomorrow  = moment(new Date()).add(1,'days');\n\nlet yesterday = moment(new Date()).add(-1, 'days');\n```\n\n\n\n\n\n```js\nimport moment from '@src/plugins/moment';\n\nfunction rangeDays(start, end, current) {\n  return current && (moment().subtract(start, 'days').valueOf() > current.valueOf() || moment().add(end, 'days').valueOf() < current.valueOf());\n}\n\n// 今天之前不可用\nexport const beforeToday = current => current && moment().subtract(1, 'days').valueOf() > current.valueOf();\n\n// 今天之前可用\nexport const afterToday = current => current && moment().subtract(1, 'days').valueOf() < current.valueOf();\n\n// 明天之前不可用\nexport const beforeTomorrow = current => current && current.valueOf() < Date.now();\n\n// 今天至6天后可用\nexport const fromTodayTo6Days = current => rangeDays(1, 6, current);\n\n// 今天至30天后可用\nexport const fromTodayTo30Days = current => rangeDays(1, 30, current);\n\n// 今天以后的一年可用\nexport const fromTodayTo1Year = current => rangeDays(1, 365, current);\n\n// 今天以后的两年可用\nexport const fromTodayTo2Years = current => rangeDays(1, 730, current);\n\n// 明天至30天后可用\nexport const fromTomorrowTo30Days = current => rangeDays(0, 30, current);\n\n// 禁用时间区域 从指定日期到昨天\n(current && current.valueOf() < moment(this.startDate)).valueOf() || current.valueOf() > moment().subtract(1, 'days').valueOf()\n```","source":"_posts/Moment-js-输出明天、今天和昨天.md","raw":"---\ntitle: Moment.js-输出明天、今天和昨天\ndate: 2019-09-08 15:23:25\ntags: moment \n---\n\n\n\n```js\nlet today     = moment(new Date());\n\nlet tomorrow  = moment(new Date()).add(1,'days');\n\nlet yesterday = moment(new Date()).add(-1, 'days');\n```\n\n\n\n\n\n```js\nimport moment from '@src/plugins/moment';\n\nfunction rangeDays(start, end, current) {\n  return current && (moment().subtract(start, 'days').valueOf() > current.valueOf() || moment().add(end, 'days').valueOf() < current.valueOf());\n}\n\n// 今天之前不可用\nexport const beforeToday = current => current && moment().subtract(1, 'days').valueOf() > current.valueOf();\n\n// 今天之前可用\nexport const afterToday = current => current && moment().subtract(1, 'days').valueOf() < current.valueOf();\n\n// 明天之前不可用\nexport const beforeTomorrow = current => current && current.valueOf() < Date.now();\n\n// 今天至6天后可用\nexport const fromTodayTo6Days = current => rangeDays(1, 6, current);\n\n// 今天至30天后可用\nexport const fromTodayTo30Days = current => rangeDays(1, 30, current);\n\n// 今天以后的一年可用\nexport const fromTodayTo1Year = current => rangeDays(1, 365, current);\n\n// 今天以后的两年可用\nexport const fromTodayTo2Years = current => rangeDays(1, 730, current);\n\n// 明天至30天后可用\nexport const fromTomorrowTo30Days = current => rangeDays(0, 30, current);\n\n// 禁用时间区域 从指定日期到昨天\n(current && current.valueOf() < moment(this.startDate)).valueOf() || current.valueOf() > moment().subtract(1, 'days').valueOf()\n```","slug":"Moment-js-输出明天、今天和昨天","published":1,"updated":"2021-03-24T15:03:18.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls16h0006si35ektz89lx","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> today     = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tomorrow  = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).add(<span class=\"number\">1</span>,<span class=\"string\">'days'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> yesterday = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).add(<span class=\"number\">-1</span>, <span class=\"string\">'days'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">'@src/plugins/moment'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rangeDays</span>(<span class=\"params\">start, end, current</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current &amp;&amp; (moment().subtract(start, <span class=\"string\">'days'</span>).valueOf() &gt; current.valueOf() || moment().add(end, <span class=\"string\">'days'</span>).valueOf() &lt; current.valueOf());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天之前不可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> beforeToday = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> current &amp;&amp; moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).valueOf() &gt; current.valueOf();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天之前可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> afterToday = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> current &amp;&amp; moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).valueOf() &lt; current.valueOf();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 明天之前不可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> beforeTomorrow = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> current &amp;&amp; current.valueOf() &lt; <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天至6天后可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo6Days = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">6</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天至30天后可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo30Days = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">30</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天以后的一年可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo1Year = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">365</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天以后的两年可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo2Years = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">730</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 明天至30天后可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTomorrowTo30Days = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">0</span>, <span class=\"number\">30</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 禁用时间区域 从指定日期到昨天</span></span><br><span class=\"line\">(current &amp;&amp; current.valueOf() &lt; moment(<span class=\"keyword\">this</span>.startDate)).valueOf() || current.valueOf() &gt; moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).valueOf()</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> today     = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>());</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> tomorrow  = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).add(<span class=\"number\">1</span>,<span class=\"string\">'days'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> yesterday = moment(<span class=\"keyword\">new</span> <span class=\"built_in\">Date</span>()).add(<span class=\"number\">-1</span>, <span class=\"string\">'days'</span>);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> moment <span class=\"keyword\">from</span> <span class=\"string\">'@src/plugins/moment'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">rangeDays</span>(<span class=\"params\">start, end, current</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> current &amp;&amp; (moment().subtract(start, <span class=\"string\">'days'</span>).valueOf() &gt; current.valueOf() || moment().add(end, <span class=\"string\">'days'</span>).valueOf() &lt; current.valueOf());</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天之前不可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> beforeToday = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> current &amp;&amp; moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).valueOf() &gt; current.valueOf();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天之前可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> afterToday = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> current &amp;&amp; moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).valueOf() &lt; current.valueOf();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 明天之前不可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> beforeTomorrow = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> current &amp;&amp; current.valueOf() &lt; <span class=\"built_in\">Date</span>.now();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天至6天后可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo6Days = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">6</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天至30天后可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo30Days = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">30</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天以后的一年可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo1Year = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">365</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 今天以后的两年可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTodayTo2Years = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">1</span>, <span class=\"number\">730</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 明天至30天后可用</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> fromTomorrowTo30Days = <span class=\"function\"><span class=\"params\">current</span> =&gt;</span> rangeDays(<span class=\"number\">0</span>, <span class=\"number\">30</span>, current);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 禁用时间区域 从指定日期到昨天</span></span><br><span class=\"line\">(current &amp;&amp; current.valueOf() &lt; moment(<span class=\"keyword\">this</span>.startDate)).valueOf() || current.valueOf() &gt; moment().subtract(<span class=\"number\">1</span>, <span class=\"string\">'days'</span>).valueOf()</span><br></pre></td></tr></table></figure>"},{"title":"antd table列表分页删除时要注意的page current","date":"2019-11-23T02:55:42.000Z","_content":"\n### 当列表项被删除时判断删除后的page current 的取值:\n\n\n\n```js\n// 当删除项为最后一页且只有一项时 page current 需要向前一页即 -1 否则都是 当前current\n(current > 1 && total % pageSize === 1 && current === Math.ceil(total / pageSize)) ? current - 1 : current\n```\n\n","source":"_posts/antd table列表分页删除时要注意的page current.md","raw":"---\ntitle: antd table列表分页删除时要注意的page current\ndate: 2019-11-23 10:55:42\ntags: ['antd', 'table', '分页']\n\n---\n\n### 当列表项被删除时判断删除后的page current 的取值:\n\n\n\n```js\n// 当删除项为最后一页且只有一项时 page current 需要向前一页即 -1 否则都是 当前current\n(current > 1 && total % pageSize === 1 && current === Math.ceil(total / pageSize)) ? current - 1 : current\n```\n\n","slug":"antd table列表分页删除时要注意的page current","published":1,"updated":"2021-03-24T15:03:18.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls16p0008si35nl8fl9jo","content":"<h3 id=\"当列表项被删除时判断删除后的page-current-的取值\"><a href=\"#当列表项被删除时判断删除后的page-current-的取值\" class=\"headerlink\" title=\"当列表项被删除时判断删除后的page current 的取值:\"></a>当列表项被删除时判断删除后的page current 的取值:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当删除项为最后一页且只有一项时 page current 需要向前一页即 -1 否则都是 当前current</span></span><br><span class=\"line\">(current &gt; <span class=\"number\">1</span> &amp;&amp; total % pageSize === <span class=\"number\">1</span> &amp;&amp; current === <span class=\"built_in\">Math</span>.ceil(total / pageSize)) ? current - <span class=\"number\">1</span> : current</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"当列表项被删除时判断删除后的page-current-的取值\"><a href=\"#当列表项被删除时判断删除后的page-current-的取值\" class=\"headerlink\" title=\"当列表项被删除时判断删除后的page current 的取值:\"></a>当列表项被删除时判断删除后的page current 的取值:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 当删除项为最后一页且只有一项时 page current 需要向前一页即 -1 否则都是 当前current</span></span><br><span class=\"line\">(current &gt; <span class=\"number\">1</span> &amp;&amp; total % pageSize === <span class=\"number\">1</span> &amp;&amp; current === <span class=\"built_in\">Math</span>.ceil(total / pageSize)) ? current - <span class=\"number\">1</span> : current</span><br></pre></td></tr></table></figure>\n\n"},{"title":"antd 之Alert警告提示框如何给内容添加链接","date":"2019-09-08T06:34:55.000Z","_content":"\n### 看antd的官方文档知道 message 就是 React.Node\n\n```jsx\nconst message =  (\n  <div>\n    请完善你们的企业信息 >><Link href=\"/message/baseinfo\">我要完善</Link>;\n  </div>\n );\n\n<Alert message={message} type=\"warning\" />\n```\n\n\n\n```jsX\nrender() {\n  const {\n    header,\n    freshFlag\n  } = this.Store;\n\n  const message = (\n    <div>\n      xxxxxxxxxxxxx<a href='#'>点我</a>xxxxxxxxxx\n    </div>\n  )\n\n  return (\n    <div className=\"Create-App-Page\" data-fresh={freshFlag}>\n      <Commonheader {...header} />\n      <Alert showIcon type=\"info\" closable message={ message }  className=\"Alert\"/>\n      <ContentWrap newclass=\"newclass\">\n      </ContentWrap>\n    </div>\n  );\n}\n```\n\n","source":"_posts/antd之Alert警告提示框如何给内容添加链接.md","raw":"---\ntitle: antd 之Alert警告提示框如何给内容添加链接\ndate: 2019-09-08 14:34:55\ntags: [antd, Alert, 链接]\n---\n\n### 看antd的官方文档知道 message 就是 React.Node\n\n```jsx\nconst message =  (\n  <div>\n    请完善你们的企业信息 >><Link href=\"/message/baseinfo\">我要完善</Link>;\n  </div>\n );\n\n<Alert message={message} type=\"warning\" />\n```\n\n\n\n```jsX\nrender() {\n  const {\n    header,\n    freshFlag\n  } = this.Store;\n\n  const message = (\n    <div>\n      xxxxxxxxxxxxx<a href='#'>点我</a>xxxxxxxxxx\n    </div>\n  )\n\n  return (\n    <div className=\"Create-App-Page\" data-fresh={freshFlag}>\n      <Commonheader {...header} />\n      <Alert showIcon type=\"info\" closable message={ message }  className=\"Alert\"/>\n      <ContentWrap newclass=\"newclass\">\n      </ContentWrap>\n    </div>\n  );\n}\n```\n\n","slug":"antd之Alert警告提示框如何给内容添加链接","published":1,"updated":"2021-03-24T15:03:18.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls16w0009si35va3s4a1u","content":"<h3 id=\"看antd的官方文档知道-message-就是-React-Node\"><a href=\"#看antd的官方文档知道-message-就是-React-Node\" class=\"headerlink\" title=\"看antd的官方文档知道 message 就是 React.Node\"></a>看antd的官方文档知道 message 就是 React.Node</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message =  (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    请完善你们的企业信息 &gt;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/message/baseinfo\"</span>&gt;</span>我要完善<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;Alert message=&#123;message&#125; type=\"warning\" /</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    header,</span><br><span class=\"line\">    freshFlag</span><br><span class=\"line\">  &#125; = <span class=\"keyword\">this</span>.Store;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      xxxxxxxxxxxxx&lt;a href=<span class=\"string\">'#'</span>&gt;点我&lt;<span class=\"regexp\">/a&gt;xxxxxxxxxx</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Create-App-Page\"</span> data-fresh=&#123;freshFlag&#125;&gt;</span><br><span class=\"line\">      &lt;Commonheader &#123;...header&#125; /&gt;</span><br><span class=\"line\">      &lt;Alert showIcon type=<span class=\"string\">\"info\"</span> closable message=&#123; message &#125;  className=<span class=\"string\">\"Alert\"</span>/&gt;</span><br><span class=\"line\">      &lt;ContentWrap newclass=<span class=\"string\">\"newclass\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ContentWrap&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"看antd的官方文档知道-message-就是-React-Node\"><a href=\"#看antd的官方文档知道-message-就是-React-Node\" class=\"headerlink\" title=\"看antd的官方文档知道 message 就是 React.Node\"></a>看antd的官方文档知道 message 就是 React.Node</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> message =  (</span><br><span class=\"line\">  &lt;div&gt;</span><br><span class=\"line\">    请完善你们的企业信息 &gt;&gt;<span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">Link</span> <span class=\"attr\">href</span>=<span class=\"string\">\"/message/baseinfo\"</span>&gt;</span>我要完善<span class=\"tag\">&lt;/<span class=\"name\">Link</span>&gt;</span></span>;</span><br><span class=\"line\">  &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\"> );</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">&lt;Alert message=&#123;message&#125; type=\"warning\" /</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">render() &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> &#123;</span><br><span class=\"line\">    header,</span><br><span class=\"line\">    freshFlag</span><br><span class=\"line\">  &#125; = <span class=\"keyword\">this</span>.Store;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">const</span> message = (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      xxxxxxxxxxxxx&lt;a href=<span class=\"string\">'#'</span>&gt;点我&lt;<span class=\"regexp\">/a&gt;xxxxxxxxxx</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"Create-App-Page\"</span> data-fresh=&#123;freshFlag&#125;&gt;</span><br><span class=\"line\">      &lt;Commonheader &#123;...header&#125; /&gt;</span><br><span class=\"line\">      &lt;Alert showIcon type=<span class=\"string\">\"info\"</span> closable message=&#123; message &#125;  className=<span class=\"string\">\"Alert\"</span>/&gt;</span><br><span class=\"line\">      &lt;ContentWrap newclass=<span class=\"string\">\"newclass\"</span>&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/ContentWrap&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    &lt;/</span>div&gt;</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"antd之table组件的columns属性filter","date":"2019-09-08T06:23:57.000Z","_content":"\n## filteredValue\n官方解释:\n\n> 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组     string[]\n\n  **外界通过此属性,去设置筛选的value值(可多选)**\n\n## filters\n官方解释:\n\n> 表头的筛选菜单项\n\n  **设置要筛选的value值,会出现筛选的图标,里面的项为value值, 如果外界通过filteredValue来筛选此值也可不设置**\n\n## onFilter\n官方解释:\n\n> 本地模式下，确定筛选的运行函数\n\n  **filter的回调函数(value,record) 两个参数,record为这一行,value为fitlers或filteredValue里面值,通过此值来    筛选record里面的项**\n\n","source":"_posts/antd之table组件的columns属性filter.md","raw":"---\ntitle: antd之table组件的columns属性filter\ndate: 2019-09-08 14:23:57\ntags: [antd, table, columns, filter]\n---\n\n## filteredValue\n官方解释:\n\n> 筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组     string[]\n\n  **外界通过此属性,去设置筛选的value值(可多选)**\n\n## filters\n官方解释:\n\n> 表头的筛选菜单项\n\n  **设置要筛选的value值,会出现筛选的图标,里面的项为value值, 如果外界通过filteredValue来筛选此值也可不设置**\n\n## onFilter\n官方解释:\n\n> 本地模式下，确定筛选的运行函数\n\n  **filter的回调函数(value,record) 两个参数,record为这一行,value为fitlers或filteredValue里面值,通过此值来    筛选record里面的项**\n\n","slug":"antd之table组件的columns属性filter","published":1,"updated":"2021-03-24T15:03:18.275Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls174000bsi35omgkgr7n","content":"<h2 id=\"filteredValue\"><a href=\"#filteredValue\" class=\"headerlink\" title=\"filteredValue\"></a>filteredValue</h2><p>官方解释:</p>\n<blockquote>\n<p>筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组     string[]</p>\n</blockquote>\n<p>  <strong>外界通过此属性,去设置筛选的value值(可多选)</strong></p>\n<h2 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h2><p>官方解释:</p>\n<blockquote>\n<p>表头的筛选菜单项</p>\n</blockquote>\n<p>  <strong>设置要筛选的value值,会出现筛选的图标,里面的项为value值, 如果外界通过filteredValue来筛选此值也可不设置</strong></p>\n<h2 id=\"onFilter\"><a href=\"#onFilter\" class=\"headerlink\" title=\"onFilter\"></a>onFilter</h2><p>官方解释:</p>\n<blockquote>\n<p>本地模式下，确定筛选的运行函数</p>\n</blockquote>\n<p>  <strong>filter的回调函数(value,record) 两个参数,record为这一行,value为fitlers或filteredValue里面值,通过此值来    筛选record里面的项</strong></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"filteredValue\"><a href=\"#filteredValue\" class=\"headerlink\" title=\"filteredValue\"></a>filteredValue</h2><p>官方解释:</p>\n<blockquote>\n<p>筛选的受控属性，外界可用此控制列的筛选状态，值为已筛选的 value 数组     string[]</p>\n</blockquote>\n<p>  <strong>外界通过此属性,去设置筛选的value值(可多选)</strong></p>\n<h2 id=\"filters\"><a href=\"#filters\" class=\"headerlink\" title=\"filters\"></a>filters</h2><p>官方解释:</p>\n<blockquote>\n<p>表头的筛选菜单项</p>\n</blockquote>\n<p>  <strong>设置要筛选的value值,会出现筛选的图标,里面的项为value值, 如果外界通过filteredValue来筛选此值也可不设置</strong></p>\n<h2 id=\"onFilter\"><a href=\"#onFilter\" class=\"headerlink\" title=\"onFilter\"></a>onFilter</h2><p>官方解释:</p>\n<blockquote>\n<p>本地模式下，确定筛选的运行函数</p>\n</blockquote>\n<p>  <strong>filter的回调函数(value,record) 两个参数,record为这一行,value为fitlers或filteredValue里面值,通过此值来    筛选record里面的项</strong></p>\n"},{"title":"antd 之table sort 鼠标放上去提示修改","date":"2019-09-08T06:31:17.000Z","_content":"\n```jsx\nimport React from 'react';\nimport { Table } from 'antd';\n\nconst DEFAULTPROPS = {\n  locale: {\n    emptyText: '暂无数据',\n    sortTitle:'' //为空不显示提示\n  }\n}\n\n\nexport default class TableCmp extends React.Component {\n  render = () => {\n    return (\n      <Table {DEFAULTPROPS} />\n    )\n  }\n}\n```\n\n","source":"_posts/antd之鼠标放上去提示修改.md","raw":"---\ntitle: antd 之table sort 鼠标放上去提示修改\ndate: 2019-09-08 14:31:17\ntags: [antd, table, sort, 提示]\n---\n\n```jsx\nimport React from 'react';\nimport { Table } from 'antd';\n\nconst DEFAULTPROPS = {\n  locale: {\n    emptyText: '暂无数据',\n    sortTitle:'' //为空不显示提示\n  }\n}\n\n\nexport default class TableCmp extends React.Component {\n  render = () => {\n    return (\n      <Table {DEFAULTPROPS} />\n    )\n  }\n}\n```\n\n","slug":"antd之鼠标放上去提示修改","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls17b000csi351iad6lff","content":"<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Table &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> DEFAULTPROPS = &#123;</span><br><span class=\"line\">  locale: &#123;</span><br><span class=\"line\">    emptyText: <span class=\"string\">'暂无数据'</span>,</span><br><span class=\"line\">    sortTitle:<span class=\"string\">''</span> <span class=\"comment\">//为空不显示提示</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableCmp</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Table &#123;DEFAULTPROPS&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123; Table &#125; <span class=\"keyword\">from</span> <span class=\"string\">'antd'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> DEFAULTPROPS = &#123;</span><br><span class=\"line\">  locale: &#123;</span><br><span class=\"line\">    emptyText: <span class=\"string\">'暂无数据'</span>,</span><br><span class=\"line\">    sortTitle:<span class=\"string\">''</span> <span class=\"comment\">//为空不显示提示</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TableCmp</span> <span class=\"keyword\">extends</span> <span class=\"title\">React</span>.<span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;Table &#123;DEFAULTPROPS&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"antd的坑之checkbox的冒泡和捕获问题","date":"2019-09-08T06:29:48.000Z","_content":"\n可以在checkbox里面添加event\n\nonClick=(e) =>e.stopPropagation()\n\n只能阻止checkbox不能阻止里面的lable\n\n\n\nstopPropagation()函数用于**阻止当前事件在DOM树上冒泡**。\n\n\n\n使用stopPropagation()函数可以阻止当前事件向祖辈元素的冒泡传递，也就是说该事件不会触发执行当前元素的任何祖辈元素的任何事件处理函数。\n\n\n\n如果antd里面的组件里面还有label之类的则添加阻止冒泡事件不能添加到组件内部，所以还会产生冒泡\n\n\n\n可以根据stopPropagaion的原理只阻止祖辈元素的冒泡传递，可以在组件外部添加一个div\n\n在div上添加对应事件添加stopPropagaion即可阻止冒泡向上传递","source":"_posts/antd的坑之checkbox的冒泡和捕获问题.md","raw":"---\ntitle: antd的坑之checkbox的冒泡和捕获问题\ndate: 2019-09-08 14:29:48\ntags: [antd, checkbox, 冒泡, 捕获]\n---\n\n可以在checkbox里面添加event\n\nonClick=(e) =>e.stopPropagation()\n\n只能阻止checkbox不能阻止里面的lable\n\n\n\nstopPropagation()函数用于**阻止当前事件在DOM树上冒泡**。\n\n\n\n使用stopPropagation()函数可以阻止当前事件向祖辈元素的冒泡传递，也就是说该事件不会触发执行当前元素的任何祖辈元素的任何事件处理函数。\n\n\n\n如果antd里面的组件里面还有label之类的则添加阻止冒泡事件不能添加到组件内部，所以还会产生冒泡\n\n\n\n可以根据stopPropagaion的原理只阻止祖辈元素的冒泡传递，可以在组件外部添加一个div\n\n在div上添加对应事件添加stopPropagaion即可阻止冒泡向上传递","slug":"antd的坑之checkbox的冒泡和捕获问题","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls17r000esi35wmmdlgsp","content":"<p>可以在checkbox里面添加event</p>\n<p>onClick=(e) =&gt;e.stopPropagation()</p>\n<p>只能阻止checkbox不能阻止里面的lable</p>\n<p>stopPropagation()函数用于<strong>阻止当前事件在DOM树上冒泡</strong>。</p>\n<p>使用stopPropagation()函数可以阻止当前事件向祖辈元素的冒泡传递，也就是说该事件不会触发执行当前元素的任何祖辈元素的任何事件处理函数。</p>\n<p>如果antd里面的组件里面还有label之类的则添加阻止冒泡事件不能添加到组件内部，所以还会产生冒泡</p>\n<p>可以根据stopPropagaion的原理只阻止祖辈元素的冒泡传递，可以在组件外部添加一个div</p>\n<p>在div上添加对应事件添加stopPropagaion即可阻止冒泡向上传递</p>\n","site":{"data":{}},"excerpt":"","more":"<p>可以在checkbox里面添加event</p>\n<p>onClick=(e) =&gt;e.stopPropagation()</p>\n<p>只能阻止checkbox不能阻止里面的lable</p>\n<p>stopPropagation()函数用于<strong>阻止当前事件在DOM树上冒泡</strong>。</p>\n<p>使用stopPropagation()函数可以阻止当前事件向祖辈元素的冒泡传递，也就是说该事件不会触发执行当前元素的任何祖辈元素的任何事件处理函数。</p>\n<p>如果antd里面的组件里面还有label之类的则添加阻止冒泡事件不能添加到组件内部，所以还会产生冒泡</p>\n<p>可以根据stopPropagaion的原理只阻止祖辈元素的冒泡传递，可以在组件外部添加一个div</p>\n<p>在div上添加对应事件添加stopPropagaion即可阻止冒泡向上传递</p>\n"},{"title":"antd的坑之menu默认选中和当前选中","date":"2019-09-08T06:48:44.000Z","_content":"\n#### 在menu 组件中:\n\n- defaultSelectedKeys是一打开默认选中项\n\n- selectedKeys 则是切换时显示的默认项（就是一切换就让它选中你想让他默认显示的项）\n\n","source":"_posts/antd的坑之menu默认选中和当前选中.md","raw":"---\ntitle: antd的坑之menu默认选中和当前选中\ndate: 2019-09-08 14:48:44\ntags: [antd, menu]\n---\n\n#### 在menu 组件中:\n\n- defaultSelectedKeys是一打开默认选中项\n\n- selectedKeys 则是切换时显示的默认项（就是一切换就让它选中你想让他默认显示的项）\n\n","slug":"antd的坑之menu默认选中和当前选中","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls17y000gsi35be417hsu","content":"<h4 id=\"在menu-组件中\"><a href=\"#在menu-组件中\" class=\"headerlink\" title=\"在menu 组件中:\"></a>在menu 组件中:</h4><ul>\n<li><p>defaultSelectedKeys是一打开默认选中项</p>\n</li>\n<li><p>selectedKeys 则是切换时显示的默认项（就是一切换就让它选中你想让他默认显示的项）</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h4 id=\"在menu-组件中\"><a href=\"#在menu-组件中\" class=\"headerlink\" title=\"在menu 组件中:\"></a>在menu 组件中:</h4><ul>\n<li><p>defaultSelectedKeys是一打开默认选中项</p>\n</li>\n<li><p>selectedKeys 则是切换时显示的默认项（就是一切换就让它选中你想让他默认显示的项）</p>\n</li>\n</ul>\n"},{"title":"antd的走马灯carousel的next和prv及go的method用法","date":"2019-09-08T06:57:10.000Z","_content":"\n\n\n> https://react-slick.neostack.com/docs/api#onReInit\n>\n> 更多的属性和方法以上网址查看\n\n如果页面需要手动render的时候用的手动更新的方式\n\ncarousel的下标index为非受控的值,重新render的时候 initialSlide默认为0；\n\n此时可以同过initialSlide这个属性将其设成受控属性，在重新render的时候就可以了\n\n#### antd的carousel里面提供了method：\n\n- goTo()\n- next()\n- prev()\n\n但是没详细说明怎么用\n这个主要用到ref={node => (this.slider = node)}\n这样就可以通过使用:\n\n- this.slider.next()\n- this.slider.prev()","source":"_posts/antd的走马灯carousel的next和prv及go的method用法.md","raw":"---\ntitle: antd的走马灯carousel的next和prv及go的method用法\ndate: 2019-09-08 14:57:10\ntags: [走马灯, carousel, next, pro, go, antd]\n---\n\n\n\n> https://react-slick.neostack.com/docs/api#onReInit\n>\n> 更多的属性和方法以上网址查看\n\n如果页面需要手动render的时候用的手动更新的方式\n\ncarousel的下标index为非受控的值,重新render的时候 initialSlide默认为0；\n\n此时可以同过initialSlide这个属性将其设成受控属性，在重新render的时候就可以了\n\n#### antd的carousel里面提供了method：\n\n- goTo()\n- next()\n- prev()\n\n但是没详细说明怎么用\n这个主要用到ref={node => (this.slider = node)}\n这样就可以通过使用:\n\n- this.slider.next()\n- this.slider.prev()","slug":"antd的走马灯carousel的next和prv及go的method用法","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls186000jsi35a7ngp3l0","content":"<blockquote>\n<p><a href=\"https://react-slick.neostack.com/docs/api#onReInit\" target=\"_blank\" rel=\"noopener\">https://react-slick.neostack.com/docs/api#onReInit</a></p>\n<p>更多的属性和方法以上网址查看</p>\n</blockquote>\n<p>如果页面需要手动render的时候用的手动更新的方式</p>\n<p>carousel的下标index为非受控的值,重新render的时候 initialSlide默认为0；</p>\n<p>此时可以同过initialSlide这个属性将其设成受控属性，在重新render的时候就可以了</p>\n<h4 id=\"antd的carousel里面提供了method：\"><a href=\"#antd的carousel里面提供了method：\" class=\"headerlink\" title=\"antd的carousel里面提供了method：\"></a>antd的carousel里面提供了method：</h4><ul>\n<li>goTo()</li>\n<li>next()</li>\n<li>prev()</li>\n</ul>\n<p>但是没详细说明怎么用<br>这个主要用到ref={node =&gt; (this.slider = node)}<br>这样就可以通过使用:</p>\n<ul>\n<li>this.slider.next()</li>\n<li>this.slider.prev()</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><a href=\"https://react-slick.neostack.com/docs/api#onReInit\" target=\"_blank\" rel=\"noopener\">https://react-slick.neostack.com/docs/api#onReInit</a></p>\n<p>更多的属性和方法以上网址查看</p>\n</blockquote>\n<p>如果页面需要手动render的时候用的手动更新的方式</p>\n<p>carousel的下标index为非受控的值,重新render的时候 initialSlide默认为0；</p>\n<p>此时可以同过initialSlide这个属性将其设成受控属性，在重新render的时候就可以了</p>\n<h4 id=\"antd的carousel里面提供了method：\"><a href=\"#antd的carousel里面提供了method：\" class=\"headerlink\" title=\"antd的carousel里面提供了method：\"></a>antd的carousel里面提供了method：</h4><ul>\n<li>goTo()</li>\n<li>next()</li>\n<li>prev()</li>\n</ul>\n<p>但是没详细说明怎么用<br>这个主要用到ref={node =&gt; (this.slider = node)}<br>这样就可以通过使用:</p>\n<ul>\n<li>this.slider.next()</li>\n<li>this.slider.prev()</li>\n</ul>\n"},{"title":"a标签实现下载文件","date":"2019-11-23T02:53:30.000Z","_content":"\n```html\n<a href=\"url\" download=\"233233\">233</a>\n```\n\n\n\nhref: 文件地址 注意 这个链接要和所在服务器 为同源 否则等同于跳转\n\ndownload: 此属性当href同源是为下载， 否则无效\n\n","source":"_posts/a标签实现下载文件.md","raw":"---\ntitle: a标签实现下载文件\ndate: 2019-11-23 10:53:30\ntags: ['a', '下载']\n---\n\n```html\n<a href=\"url\" download=\"233233\">233</a>\n```\n\n\n\nhref: 文件地址 注意 这个链接要和所在服务器 为同源 否则等同于跳转\n\ndownload: 此属性当href同源是为下载， 否则无效\n\n","slug":"a标签实现下载文件","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls18d000lsi35mo1xkkn4","content":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"233233\"</span>&gt;</span>233<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>href: 文件地址 注意 这个链接要和所在服务器 为同源 否则等同于跳转</p>\n<p>download: 此属性当href同源是为下载， 否则无效</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">a</span> <span class=\"attr\">href</span>=<span class=\"string\">\"url\"</span> <span class=\"attr\">download</span>=<span class=\"string\">\"233233\"</span>&gt;</span>233<span class=\"tag\">&lt;/<span class=\"name\">a</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>href: 文件地址 注意 这个链接要和所在服务器 为同源 否则等同于跳转</p>\n<p>download: 此属性当href同源是为下载， 否则无效</p>\n"},{"title":"hashHistory和browserHistory的区别","date":"2019-09-08T07:17:55.000Z","_content":"\n- browserHistory\n\n- hashHistory\n\n- createMemoryHistory\n\n\n\n官方推荐使用browserHistory\n\n\n\n使用hashHistory,浏览器的url是这样的：/#/user/liuna?_k=adseis\n\n\n\n使用browserHistory,浏览器的url是这样的：/user/liuna\n\n\n\n这样看起来当然是browerHistory更好一些，但是它需要server端支持。\n\n\n\n使用hashHistory时，因为有 # 的存在，浏览器不会发送request,react-router 自己根据 url 去 render 相应的模块。\n\n\n\n使用browserHistory时，从 / 到 /user/liuna, 浏览器会向server发送request，所以server要做特殊请求，比如用的 express 的话，你需要 handle 所有的路由 `app.get('*', (req, res) => { ... })`，使用了 nginx 的话，nginx也要做相应的配置。\n\n\n\n \n\n\n\n如果只是静态页面，就不需要用browserHistory,直接hashHistory就好了。","source":"_posts/hashHistory和browserHistory的区别.md","raw":"---\ntitle: hashHistory和browserHistory的区别\ndate: 2019-09-08 15:17:55\ntags: [hash, browser, history]\n---\n\n- browserHistory\n\n- hashHistory\n\n- createMemoryHistory\n\n\n\n官方推荐使用browserHistory\n\n\n\n使用hashHistory,浏览器的url是这样的：/#/user/liuna?_k=adseis\n\n\n\n使用browserHistory,浏览器的url是这样的：/user/liuna\n\n\n\n这样看起来当然是browerHistory更好一些，但是它需要server端支持。\n\n\n\n使用hashHistory时，因为有 # 的存在，浏览器不会发送request,react-router 自己根据 url 去 render 相应的模块。\n\n\n\n使用browserHistory时，从 / 到 /user/liuna, 浏览器会向server发送request，所以server要做特殊请求，比如用的 express 的话，你需要 handle 所有的路由 `app.get('*', (req, res) => { ... })`，使用了 nginx 的话，nginx也要做相应的配置。\n\n\n\n \n\n\n\n如果只是静态页面，就不需要用browserHistory,直接hashHistory就好了。","slug":"hashHistory和browserHistory的区别","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls18l000nsi35b0qq1o9s","content":"<ul>\n<li><p>browserHistory</p>\n</li>\n<li><p>hashHistory</p>\n</li>\n<li><p>createMemoryHistory</p>\n</li>\n</ul>\n<p>官方推荐使用browserHistory</p>\n<p>使用hashHistory,浏览器的url是这样的：/#/user/liuna?_k=adseis</p>\n<p>使用browserHistory,浏览器的url是这样的：/user/liuna</p>\n<p>这样看起来当然是browerHistory更好一些，但是它需要server端支持。</p>\n<p>使用hashHistory时，因为有 # 的存在，浏览器不会发送request,react-router 自己根据 url 去 render 相应的模块。</p>\n<p>使用browserHistory时，从 / 到 /user/liuna, 浏览器会向server发送request，所以server要做特殊请求，比如用的 express 的话，你需要 handle 所有的路由 <code>app.get(&#39;*&#39;, (req, res) =&gt; { ... })</code>，使用了 nginx 的话，nginx也要做相应的配置。</p>\n<p>如果只是静态页面，就不需要用browserHistory,直接hashHistory就好了。</p>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>browserHistory</p>\n</li>\n<li><p>hashHistory</p>\n</li>\n<li><p>createMemoryHistory</p>\n</li>\n</ul>\n<p>官方推荐使用browserHistory</p>\n<p>使用hashHistory,浏览器的url是这样的：/#/user/liuna?_k=adseis</p>\n<p>使用browserHistory,浏览器的url是这样的：/user/liuna</p>\n<p>这样看起来当然是browerHistory更好一些，但是它需要server端支持。</p>\n<p>使用hashHistory时，因为有 # 的存在，浏览器不会发送request,react-router 自己根据 url 去 render 相应的模块。</p>\n<p>使用browserHistory时，从 / 到 /user/liuna, 浏览器会向server发送request，所以server要做特殊请求，比如用的 express 的话，你需要 handle 所有的路由 <code>app.get(&#39;*&#39;, (req, res) =&gt; { ... })</code>，使用了 nginx 的话，nginx也要做相应的配置。</p>\n<p>如果只是静态页面，就不需要用browserHistory,直接hashHistory就好了。</p>\n"},{"title":"hooks和Ts","date":"2021-03-24T15:27:52.000Z","_content":"<a name=\"Y6XDX\"></a>\n### useState\n```javascript\nimport React from 'react'\n\ntype UserInfo = {\n  name: string,\n  age: number,\n}\n\nexport const User:React.FC<UserInfo> = ({ name, age }) => {\n  return (\n    <div className=\"User\">\n      <p>{ name }</p>\n      <p>{ age }</p>\n    </div>\n  )\n}\n\nconst user = <User name='vortesnail' age={25} />\n\n```\n\n- 在我们的参数为对象类型时，需要特别注意的是， `setXxx` 并不会像 `this.setState` 合并旧的状态，它是完全替代了旧的状态，所以我们要实现合并，可以这样写\n```javascript\nsetArticle({\n  title: '下一篇',\n  content: '下一篇的内容',\n  ...article\n})\n```\n<a name=\"5efa7793\"></a>\n### 为啥使用useEffect?\n你可以把 `useEffect` 看做 `componentDidMount` ， `componentDidUpdate` 和 `componentWillUnmount` 这三个函数的组合。<br />\n\n<a name=\"756dc977\"></a>\n### 怎么使用useEffect?\n```\nuseEffect(() => {\n  ...\n  return () => {...}\n},[...])\n```\n\n- 每当状态改变 每次都执行useEffect\n```javascript\nimport React, { useState, useEffect } from 'react'\n\nlet switchCount: number = 0\n\nconst User = () => {\n  const [name, setName] = useState<string>('')\n  useEffect(() => {\n    switchCount += 1\n  })\n\n  return (\n    <div>\n      <p>Current Name: { name }</p>\n      <p>switchCount: { switchCount }</p>\n      <button onClick={() => setName('Jack')}>Jack</button>\n      <button onClick={() => setName('Marry')}>Marry</button>\n    </div>\n  )\n}\n\nexport default User\n```\n\n- 只执行一次 useEffect\n```javascript\nuseEffect(() => {\n  switchCount += 1\n}, [])\n```\n\n- 根据某个状态去改变 只有该状态改变 useEffect才会执行\n```javascript\nconst [value, setValue] = useState<string>('I never change')\nuseEffect(() => {\n  switchCount += 1\n}, [value])\n```\n\n- 组件卸载时处理一些内存问题，比如清除定时器、清除事件监听 需要卸载的时候要处理一些事件的时候需要return\n```javascript\nuseEffect(() => {\n  const handler = () => {\n    document.title = Math.random().toString()\n  }\n\n  window.addEventListener('resize', handler)\n\n  return () => {\n    window.removeEventListener('resize', handler)\n  }\n}, [])\n\n```\n<a name=\"V2lmw\"></a>\n## useRef\n<a name=\"ZszIx\"></a>\n### 为啥使用useRef?\n它不仅仅是用来管理 DOM ref 的，它还相当于 this , 可以存放任何变量，很好的解决闭包带来的不方便性。\n<a name=\"6Mz2f\"></a>\n### 怎么使用useRef?\n```\nconst [count, setCount] = useState<number>(0)\nconst countRef = useRef<number>(count)\n复制代码\n```\n<a name=\"sp4Se\"></a>\n### 场景举例\n<a name=\"wl3x8\"></a>\n##### 1.闭包问题：\n想想看，我们先点击 **加** 按钮 3 次，再点 **弹框显示** 1次，再点 **加** 按钮 2 次，最终 `alert` 会是什么结果？\n```\nimport React, { useState, useEffect, useRef } from 'react'\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + count)\n    }, 3000);\n  }\n  return (\n    <div>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n      <button onClick={() => handleCount()}>弹框显示</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n结果是弹框内容为 **current count: 3** ，为什么？\n> 当我们更新状态的时候, **React 会重新渲染组件, 每一次渲染都会拿到独立的 count 状态,  并重新渲染一个  handleCount 函数.  每一个 handleCount 里面都有它自己的 count 。**\n\n** 那如何显示最新的当前 count 呢？\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const countRef = useRef<number>(count)\n  useEffect(() => {\n    countRef.current = count\n  })\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + countRef.current)\n    }, 3000);\n  }\n  //...\n}\nexport default Counter\n复制代码\n```\n<a name=\"Fhl8b\"></a>\n##### 2.因为变更 `.current` 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const preCountRef = useRef<number>(count)\n  useEffect(() => {\n    preCountRef.current = count\n  })\n  return (\n    <div>\n      <p>pre count: { preCountRef.current }</p>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n    </div>\n  )\n}\n复制代码\n```\n我们可以看到，显示的总是状态的前一个值：<br />![](https://cdn.nlark.com/yuque/0/2020/webp/206259/1602836948895-4537e142-aa02-4c5f-be00-0a899ee3cf16.webp#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=212&originWidth=344&size=0&status=done&style=none&width=344)\n<a name=\"Xvb5c\"></a>\n##### 3.操作 Dom 节点，类似 createRef()：\n```\nimport React, { useRef } from 'react'\nconst TextInput = () => {\n  const inputEl = useRef<HTMLInputElement>(null)\n  const onFocusClick = () => {\n    if(inputEl && inputEl.current) {\n      inputEl.current.focus()\n    } \n  }\n  return (\n    <div>\n      <input type=\"text\" ref={inputEl}/>\n      <button onClick={onFocusClick}>Focus the input</button>\n    </div>\n  )\n}\nexport default TextInput\n复制代码\n```\n<a name=\"WOf6t\"></a>\n## useMemo\n<a name=\"efknj\"></a>\n### 为啥使用useMemo?\n从 **useEffect** 可以知道，可以通过向其传递一些参数来影响某些函数的执行。 React 检查这些参数是否已更改，并且只有在存在差异的情况下才会执行此。<br />**useMemo** 做类似的事情，假设有大量方法，并且只想在其参数更改时运行它们，而不是每次组件更新时都运行它们，那就可以使用 **useMemo** 来进行性能优化。\n> 记住，传入 `useMemo` 的函数会在**渲染期间执行**。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 `useEffect` 的适用范畴，而不是 `useMemo` 。\n\n<a name=\"WCw2S\"></a>\n### 怎么使用useMemo?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst newName = useMemo(() => {\n\treturn changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"OVvUh\"></a>\n### 场景举例\n<a name=\"wDl3N\"></a>\n##### 1.常规使用，避免重复执行没必要的方法：\n我们先来看一个很简单的例子，以下是还未使用 `useMemo` 的代码：\n```\nimport React, { useState, useMemo } from 'react'\n// 父组件\nconst Example = () => {\n  const [time, setTime] = useState<number>(0)\n  const [random, setRandom] = useState<number>(0)\n  return (\n    <div>\n      <button onClick={() => setTime(new Date().getTime())}>获取当前时间</button>\n      <button onClick={() => setRandom(Math.random())}>获取当前随机数</button>\n      <Show time={time}>{random}</Show>\n    </div>\n  )\n}\ntype Data = {\n  time: number\n}\n// 子组件\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  return (\n    <div>\n      <p>Time is: { changeTime(time) }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\nexport default Example\n复制代码\n```\n在这个例子中，无论你点击的是 **获取当前时间** 按钮还是 **获取当前随机数** 按钮， `<Show />` 这个组件中的方法 `changeTime` 都会执行。<br />但事实上，点击 **获取当前随机数** 按钮改变的只会是 `children` 这个参数，但我们的 `changeTime` 也会因为子组件的重新渲染而重新执行，这个操作是很没必要的，消耗了无关的性能。<br />使用 `useMemo` 改造我们的 `<Show />` 子组件：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  return (\n    <div>\n      <p>Time is: { newTime }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n这个时候只有点击 **获取当前时间** 才会执行 `changeTime` 这个函数，而点击 **获取当前随机数** 已经不会触发该函数执行了。\n<a name=\"16VwH\"></a>\n##### 2.你可能会好奇， `useMemo` 能做的难道不能用 `useEffect` 来做吗？\n答案是否定的！如果你在子组件中加入以下代码：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n\t//...\n  \n  useEffect(() => {\n    console.log('effect function here...')\n  }, [time])\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  \n\t//...\n}\n复制代码\n```\n你会发现，控制台会打印如下信息：\n```\n> changeTime excuted...\n> effect function here...\n复制代码\n```\n正如我们一开始说的：传入 `useMemo` 的函数会在**渲染期间执行**。 在此不得不提 `React.memo` ，它的作用是实现整个组件的 `Pure` 功能：\n```\nconst Show:React.FC<Data> = React.memo(({ time, children }) => {...}\n复制代码\n```\n所以简单用一句话来概括 `useMemo` 和 `React.memo` 的区别就是：前者在某些情况下不希望组件对所有 `props` 做浅比较，只想实现局部 `Pure` 功能，即只想对特定的 `props` 做比较，并决定是否局部更新。\n<a name=\"tFpIu\"></a>\n## useCallback\n<a name=\"fkNyV\"></a>\n### 为啥使用useCallback?\n`useMemo` 和 `useCallback` 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 `useMemo` 返回的是函数运行的结果， `useCallback` 返回的是函数。\n> useCallback(fn, deps) 相当于 useMemo(() => fn, deps)\n\n<a name=\"TZOSP\"></a>\n### 怎么使用useCallback?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst getNewName = useMemo(() => {\n  return changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"J1yKA\"></a>\n### 场景举例\n将之前 `useMemo` 的例子，改一下子组件以下地方就OK了：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  //...\n  const getNewTime = useCallback(() => changeTime(time), [time])\n  return (\n    <div>\n      <p>Time is: { getNewTime() }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n<a name=\"nW3xY\"></a>\n## useReducer\n<a name=\"LTBBo\"></a>\n### 为什么使用useReducer?\n有没有想过你在某个组件里写了很多很多的 `useState` 是什么观感？比如以下：\n```\nconst [name, setName] = useState<string>('')\nconst [islogin, setIsLogin] = useState<boolean>(false)\nconst [avatar, setAvatar] = useState<string>('')\nconst [age, setAge] = useState<number>(0)\n//...\n复制代码\n```\n<a name=\"6etYW\"></a>\n### 怎么使用useReducer?\n```\nimport React, { useState, useReducer } from 'react'\ntype StateType = {\n  count: number\n}\ntype ActionType = {\n  type: 'reset' | 'decrement' | 'increment'\n}\nconst initialState = { count: 0 }\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    case 'reset':\n      return initialState\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return state\n  }\n}\nfunction Counter({ initialCount = 0}) {\n  const [state, dispatch] = useReducer(reducer, { count: initialCount })\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n<a name=\"V7CtP\"></a>\n### 场景举例：\n与 `useContext` 结合代替 Redux 方案，往下阅读。\n<a name=\"nzCzR\"></a>\n## useContext\n<a name=\"ovovY\"></a>\n### 为啥使用useContext?\n简单来说 `Context` 的作用就是对它所包含的组件树提供全局共享数据的一种技术。\n<a name=\"vpfrh\"></a>\n### 怎么使用useContext？\n```\nexport const ColorContext = React.createContext({ color: '#1890ff' })\nconst { color } = useContext(ColorContext)\n// 或\nexport const ColorContext = React.createContext(null)\n<ColorContext.Provider value='#1890ff'>\n  <App />\n</ColorContext.Provider>\n// App 或以下的所有子组件都可拿到 value\nconst color = useContext(ColorContext) // '#1890ff'\n复制代码\n```\n<a name=\"Dknz0\"></a>\n### 场景举例\n<a name=\"eaUTS\"></a>\n##### 1.根组件注册，所有子组件都可拿到注册的值：\n```\nimport React, { useContext } from 'react'\nconst ColorContext = React.createContext<string>('')\nconst App = () => {\n  return (\n    <ColorContext.Provider value='#1890ff'>\n      <Father />\n    </ColorContext.Provider>\n  )\n}\nconst Father = () => {\n  return (\n    <Child />\n  )\n}\nconst Child = () => {\n  const color = useContext(ColorContext)\n  return (\n    <div style={{ backgroundColor: color }}>Background color is: { color }</div>\n  )\n}\nexport default App\n复制代码\n```\n<a name=\"Lz4av\"></a>\n##### 2.配合 `useReducer` 实现 Redux 的代替方案：\n```\nimport React, { useReducer, useContext } from 'react'\nconst UPDATE_COLOR = 'UPDATE_COLOR'\ntype StateType = {\n  color: string\n}\ntype ActionType = {\n  type: string,\n  color: string\n}\ntype MixStateAndDispatch = {\n  state: StateType,\n  dispatch?: React.Dispatch<ActionType>\n}\nconst reducer = (state: StateType, action: ActionType) => {\n  switch(action.type) {\n    case UPDATE_COLOR:\n      return { color: action.color }\n    default:\n      return state  \n  }\n}\nconst ColorContext = React.createContext<MixStateAndDispatch>({\n  state: { color: 'black' },\n})\nconst Show = () => {\n  const { state, dispatch } = useContext(ColorContext)\n  return (\n    <div style={{ color: state.color }}>\n      当前字体颜色为: {state.color}\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'red'})}>红色</button>\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'green'})}>绿色</button>\n    </div>\n  )\n}\nconst Example = ({ initialColor = '#000000' }) => {\n  const [state, dispatch] = useReducer(reducer, { color: initialColor })\n  return (\n    <ColorContext.Provider value={{state, dispatch}}>\n      <div>\n        <Show />\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'blue'})}>蓝色</button>\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'lightblue'})}>轻绿色</button>\n      </div>\n    </ColorContext.Provider>\n  )\n}\nexport default Example\n```\n\n\n\n\n","source":"_posts/hooksAndTs.md","raw":"---\ntitle: hooks和Ts\ndate: 2021-03-24 23:27:52\ntags:\n---\n<a name=\"Y6XDX\"></a>\n### useState\n```javascript\nimport React from 'react'\n\ntype UserInfo = {\n  name: string,\n  age: number,\n}\n\nexport const User:React.FC<UserInfo> = ({ name, age }) => {\n  return (\n    <div className=\"User\">\n      <p>{ name }</p>\n      <p>{ age }</p>\n    </div>\n  )\n}\n\nconst user = <User name='vortesnail' age={25} />\n\n```\n\n- 在我们的参数为对象类型时，需要特别注意的是， `setXxx` 并不会像 `this.setState` 合并旧的状态，它是完全替代了旧的状态，所以我们要实现合并，可以这样写\n```javascript\nsetArticle({\n  title: '下一篇',\n  content: '下一篇的内容',\n  ...article\n})\n```\n<a name=\"5efa7793\"></a>\n### 为啥使用useEffect?\n你可以把 `useEffect` 看做 `componentDidMount` ， `componentDidUpdate` 和 `componentWillUnmount` 这三个函数的组合。<br />\n\n<a name=\"756dc977\"></a>\n### 怎么使用useEffect?\n```\nuseEffect(() => {\n  ...\n  return () => {...}\n},[...])\n```\n\n- 每当状态改变 每次都执行useEffect\n```javascript\nimport React, { useState, useEffect } from 'react'\n\nlet switchCount: number = 0\n\nconst User = () => {\n  const [name, setName] = useState<string>('')\n  useEffect(() => {\n    switchCount += 1\n  })\n\n  return (\n    <div>\n      <p>Current Name: { name }</p>\n      <p>switchCount: { switchCount }</p>\n      <button onClick={() => setName('Jack')}>Jack</button>\n      <button onClick={() => setName('Marry')}>Marry</button>\n    </div>\n  )\n}\n\nexport default User\n```\n\n- 只执行一次 useEffect\n```javascript\nuseEffect(() => {\n  switchCount += 1\n}, [])\n```\n\n- 根据某个状态去改变 只有该状态改变 useEffect才会执行\n```javascript\nconst [value, setValue] = useState<string>('I never change')\nuseEffect(() => {\n  switchCount += 1\n}, [value])\n```\n\n- 组件卸载时处理一些内存问题，比如清除定时器、清除事件监听 需要卸载的时候要处理一些事件的时候需要return\n```javascript\nuseEffect(() => {\n  const handler = () => {\n    document.title = Math.random().toString()\n  }\n\n  window.addEventListener('resize', handler)\n\n  return () => {\n    window.removeEventListener('resize', handler)\n  }\n}, [])\n\n```\n<a name=\"V2lmw\"></a>\n## useRef\n<a name=\"ZszIx\"></a>\n### 为啥使用useRef?\n它不仅仅是用来管理 DOM ref 的，它还相当于 this , 可以存放任何变量，很好的解决闭包带来的不方便性。\n<a name=\"6Mz2f\"></a>\n### 怎么使用useRef?\n```\nconst [count, setCount] = useState<number>(0)\nconst countRef = useRef<number>(count)\n复制代码\n```\n<a name=\"sp4Se\"></a>\n### 场景举例\n<a name=\"wl3x8\"></a>\n##### 1.闭包问题：\n想想看，我们先点击 **加** 按钮 3 次，再点 **弹框显示** 1次，再点 **加** 按钮 2 次，最终 `alert` 会是什么结果？\n```\nimport React, { useState, useEffect, useRef } from 'react'\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + count)\n    }, 3000);\n  }\n  return (\n    <div>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n      <button onClick={() => handleCount()}>弹框显示</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n结果是弹框内容为 **current count: 3** ，为什么？\n> 当我们更新状态的时候, **React 会重新渲染组件, 每一次渲染都会拿到独立的 count 状态,  并重新渲染一个  handleCount 函数.  每一个 handleCount 里面都有它自己的 count 。**\n\n** 那如何显示最新的当前 count 呢？\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const countRef = useRef<number>(count)\n  useEffect(() => {\n    countRef.current = count\n  })\n  const handleCount = () => {\n    setTimeout(() => {\n      alert('current count: ' + countRef.current)\n    }, 3000);\n  }\n  //...\n}\nexport default Counter\n复制代码\n```\n<a name=\"Fhl8b\"></a>\n##### 2.因为变更 `.current` 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\n```\nconst Counter = () => {\n  const [count, setCount] = useState<number>(0)\n  const preCountRef = useRef<number>(count)\n  useEffect(() => {\n    preCountRef.current = count\n  })\n  return (\n    <div>\n      <p>pre count: { preCountRef.current }</p>\n      <p>current count: { count }</p>\n      <button onClick={() => setCount(count + 1)}>加</button>\n    </div>\n  )\n}\n复制代码\n```\n我们可以看到，显示的总是状态的前一个值：<br />![](https://cdn.nlark.com/yuque/0/2020/webp/206259/1602836948895-4537e142-aa02-4c5f-be00-0a899ee3cf16.webp#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=212&originWidth=344&size=0&status=done&style=none&width=344)\n<a name=\"Xvb5c\"></a>\n##### 3.操作 Dom 节点，类似 createRef()：\n```\nimport React, { useRef } from 'react'\nconst TextInput = () => {\n  const inputEl = useRef<HTMLInputElement>(null)\n  const onFocusClick = () => {\n    if(inputEl && inputEl.current) {\n      inputEl.current.focus()\n    } \n  }\n  return (\n    <div>\n      <input type=\"text\" ref={inputEl}/>\n      <button onClick={onFocusClick}>Focus the input</button>\n    </div>\n  )\n}\nexport default TextInput\n复制代码\n```\n<a name=\"WOf6t\"></a>\n## useMemo\n<a name=\"efknj\"></a>\n### 为啥使用useMemo?\n从 **useEffect** 可以知道，可以通过向其传递一些参数来影响某些函数的执行。 React 检查这些参数是否已更改，并且只有在存在差异的情况下才会执行此。<br />**useMemo** 做类似的事情，假设有大量方法，并且只想在其参数更改时运行它们，而不是每次组件更新时都运行它们，那就可以使用 **useMemo** 来进行性能优化。\n> 记住，传入 `useMemo` 的函数会在**渲染期间执行**。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 `useEffect` 的适用范畴，而不是 `useMemo` 。\n\n<a name=\"WCw2S\"></a>\n### 怎么使用useMemo?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst newName = useMemo(() => {\n\treturn changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"OVvUh\"></a>\n### 场景举例\n<a name=\"wDl3N\"></a>\n##### 1.常规使用，避免重复执行没必要的方法：\n我们先来看一个很简单的例子，以下是还未使用 `useMemo` 的代码：\n```\nimport React, { useState, useMemo } from 'react'\n// 父组件\nconst Example = () => {\n  const [time, setTime] = useState<number>(0)\n  const [random, setRandom] = useState<number>(0)\n  return (\n    <div>\n      <button onClick={() => setTime(new Date().getTime())}>获取当前时间</button>\n      <button onClick={() => setRandom(Math.random())}>获取当前随机数</button>\n      <Show time={time}>{random}</Show>\n    </div>\n  )\n}\ntype Data = {\n  time: number\n}\n// 子组件\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  return (\n    <div>\n      <p>Time is: { changeTime(time) }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\nexport default Example\n复制代码\n```\n在这个例子中，无论你点击的是 **获取当前时间** 按钮还是 **获取当前随机数** 按钮， `<Show />` 这个组件中的方法 `changeTime` 都会执行。<br />但事实上，点击 **获取当前随机数** 按钮改变的只会是 `children` 这个参数，但我们的 `changeTime` 也会因为子组件的重新渲染而重新执行，这个操作是很没必要的，消耗了无关的性能。<br />使用 `useMemo` 改造我们的 `<Show />` 子组件：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  function changeTime(time: number): string {\n    console.log('changeTime excuted...')\n    return new Date(time).toISOString()\n  }\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  return (\n    <div>\n      <p>Time is: { newTime }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n这个时候只有点击 **获取当前时间** 才会执行 `changeTime` 这个函数，而点击 **获取当前随机数** 已经不会触发该函数执行了。\n<a name=\"16VwH\"></a>\n##### 2.你可能会好奇， `useMemo` 能做的难道不能用 `useEffect` 来做吗？\n答案是否定的！如果你在子组件中加入以下代码：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n\t//...\n  \n  useEffect(() => {\n    console.log('effect function here...')\n  }, [time])\n  const newTime: string = useMemo(() => {\n    return changeTime(time)\n  }, [time])\n  \n\t//...\n}\n复制代码\n```\n你会发现，控制台会打印如下信息：\n```\n> changeTime excuted...\n> effect function here...\n复制代码\n```\n正如我们一开始说的：传入 `useMemo` 的函数会在**渲染期间执行**。 在此不得不提 `React.memo` ，它的作用是实现整个组件的 `Pure` 功能：\n```\nconst Show:React.FC<Data> = React.memo(({ time, children }) => {...}\n复制代码\n```\n所以简单用一句话来概括 `useMemo` 和 `React.memo` 的区别就是：前者在某些情况下不希望组件对所有 `props` 做浅比较，只想实现局部 `Pure` 功能，即只想对特定的 `props` 做比较，并决定是否局部更新。\n<a name=\"tFpIu\"></a>\n## useCallback\n<a name=\"fkNyV\"></a>\n### 为啥使用useCallback?\n`useMemo` 和 `useCallback` 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 `useMemo` 返回的是函数运行的结果， `useCallback` 返回的是函数。\n> useCallback(fn, deps) 相当于 useMemo(() => fn, deps)\n\n<a name=\"TZOSP\"></a>\n### 怎么使用useCallback?\n```\nfunction changeName(name) {\n  return name + '给name做点操作返回新name'\n}\nconst getNewName = useMemo(() => {\n  return changeName(name)\n}, [name])\n复制代码\n```\n<a name=\"J1yKA\"></a>\n### 场景举例\n将之前 `useMemo` 的例子，改一下子组件以下地方就OK了：\n```\nconst Show:React.FC<Data> = ({ time, children }) => {\n  //...\n  const getNewTime = useCallback(() => changeTime(time), [time])\n  return (\n    <div>\n      <p>Time is: { getNewTime() }</p>\n      <p>Random is: { children }</p>\n    </div>\n  )\n}\n复制代码\n```\n<a name=\"nW3xY\"></a>\n## useReducer\n<a name=\"LTBBo\"></a>\n### 为什么使用useReducer?\n有没有想过你在某个组件里写了很多很多的 `useState` 是什么观感？比如以下：\n```\nconst [name, setName] = useState<string>('')\nconst [islogin, setIsLogin] = useState<boolean>(false)\nconst [avatar, setAvatar] = useState<string>('')\nconst [age, setAge] = useState<number>(0)\n//...\n复制代码\n```\n<a name=\"6etYW\"></a>\n### 怎么使用useReducer?\n```\nimport React, { useState, useReducer } from 'react'\ntype StateType = {\n  count: number\n}\ntype ActionType = {\n  type: 'reset' | 'decrement' | 'increment'\n}\nconst initialState = { count: 0 }\nfunction reducer(state: StateType, action: ActionType) {\n  switch (action.type) {\n    case 'reset':\n      return initialState\n    case 'increment':\n      return { count: state.count + 1 }\n    case 'decrement':\n      return { count: state.count - 1 }\n    default:\n      return state\n  }\n}\nfunction Counter({ initialCount = 0}) {\n  const [state, dispatch] = useReducer(reducer, { count: initialCount })\n  return (\n    <div>\n      Count: {state.count}\n      <button onClick={() => dispatch({ type: 'reset' })}>Reset</button>\n      <button onClick={() => dispatch({ type: 'increment' })}>+</button>\n      <button onClick={() => dispatch({ type: 'decrement' })}>-</button>\n    </div>\n  )\n}\nexport default Counter\n复制代码\n```\n<a name=\"V7CtP\"></a>\n### 场景举例：\n与 `useContext` 结合代替 Redux 方案，往下阅读。\n<a name=\"nzCzR\"></a>\n## useContext\n<a name=\"ovovY\"></a>\n### 为啥使用useContext?\n简单来说 `Context` 的作用就是对它所包含的组件树提供全局共享数据的一种技术。\n<a name=\"vpfrh\"></a>\n### 怎么使用useContext？\n```\nexport const ColorContext = React.createContext({ color: '#1890ff' })\nconst { color } = useContext(ColorContext)\n// 或\nexport const ColorContext = React.createContext(null)\n<ColorContext.Provider value='#1890ff'>\n  <App />\n</ColorContext.Provider>\n// App 或以下的所有子组件都可拿到 value\nconst color = useContext(ColorContext) // '#1890ff'\n复制代码\n```\n<a name=\"Dknz0\"></a>\n### 场景举例\n<a name=\"eaUTS\"></a>\n##### 1.根组件注册，所有子组件都可拿到注册的值：\n```\nimport React, { useContext } from 'react'\nconst ColorContext = React.createContext<string>('')\nconst App = () => {\n  return (\n    <ColorContext.Provider value='#1890ff'>\n      <Father />\n    </ColorContext.Provider>\n  )\n}\nconst Father = () => {\n  return (\n    <Child />\n  )\n}\nconst Child = () => {\n  const color = useContext(ColorContext)\n  return (\n    <div style={{ backgroundColor: color }}>Background color is: { color }</div>\n  )\n}\nexport default App\n复制代码\n```\n<a name=\"Lz4av\"></a>\n##### 2.配合 `useReducer` 实现 Redux 的代替方案：\n```\nimport React, { useReducer, useContext } from 'react'\nconst UPDATE_COLOR = 'UPDATE_COLOR'\ntype StateType = {\n  color: string\n}\ntype ActionType = {\n  type: string,\n  color: string\n}\ntype MixStateAndDispatch = {\n  state: StateType,\n  dispatch?: React.Dispatch<ActionType>\n}\nconst reducer = (state: StateType, action: ActionType) => {\n  switch(action.type) {\n    case UPDATE_COLOR:\n      return { color: action.color }\n    default:\n      return state  \n  }\n}\nconst ColorContext = React.createContext<MixStateAndDispatch>({\n  state: { color: 'black' },\n})\nconst Show = () => {\n  const { state, dispatch } = useContext(ColorContext)\n  return (\n    <div style={{ color: state.color }}>\n      当前字体颜色为: {state.color}\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'red'})}>红色</button>\n      <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'green'})}>绿色</button>\n    </div>\n  )\n}\nconst Example = ({ initialColor = '#000000' }) => {\n  const [state, dispatch] = useReducer(reducer, { color: initialColor })\n  return (\n    <ColorContext.Provider value={{state, dispatch}}>\n      <div>\n        <Show />\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'blue'})}>蓝色</button>\n        <button onClick={() => dispatch && dispatch({type: UPDATE_COLOR, color: 'lightblue'})}>轻绿色</button>\n      </div>\n    </ColorContext.Provider>\n  )\n}\nexport default Example\n```\n\n\n\n\n","slug":"hooksAndTs","published":1,"updated":"2021-03-24T15:29:21.340Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls18t000psi35yqx603yf","content":"<p><a name=\"Y6XDX\"></a></p>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\">type UserInfo = &#123;</span><br><span class=\"line\">  name: string,</span><br><span class=\"line\">  age: number,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> User:React.FC&lt;UserInfo&gt; = <span class=\"function\">(<span class=\"params\">&#123; name, age &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"User\"</span>&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123; name &#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;&#123; age &#125;&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const user = &lt;User name='vortesnail' age=&#123;25&#125; /</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在我们的参数为对象类型时，需要特别注意的是， <code>setXxx</code> 并不会像 <code>this.setState</code> 合并旧的状态，它是完全替代了旧的状态，所以我们要实现合并，可以这样写<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setArticle(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'下一篇'</span>,</span><br><span class=\"line\">  content: <span class=\"string\">'下一篇的内容'</span>,</span><br><span class=\"line\">  ...article</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><a name=\"5efa7793\"></a></p>\n<h3 id=\"为啥使用useEffect\"><a href=\"#为啥使用useEffect\" class=\"headerlink\" title=\"为啥使用useEffect?\"></a>为啥使用useEffect?</h3><p>你可以把 <code>useEffect</code> 看做 <code>componentDidMount</code> ， <code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。<br></p>\n<p><a name=\"756dc977\"></a></p>\n<h3 id=\"怎么使用useEffect\"><a href=\"#怎么使用useEffect\" class=\"headerlink\" title=\"怎么使用useEffect?\"></a>怎么使用useEffect?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  return () =&gt; &#123;...&#125;</span><br><span class=\"line\">&#125;,[...])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>每当状态改变 每次都执行useEffect</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> switchCount: number = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = useState&lt;string&gt;(<span class=\"string\">''</span>)</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    switchCount += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Current Name: &#123; name &#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;switchCount: &#123; switchCount &#125;&lt;/</span>p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setName(<span class=\"string\">'Jack'</span>)&#125;&gt;Jack&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setName('Marry')&#125;&gt;Marry&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default User</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只执行一次 useEffect</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  switchCount += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;, [])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据某个状态去改变 只有该状态改变 useEffect才会执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [value, setValue] = useState&lt;string&gt;(<span class=\"string\">'I never change'</span>)</span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  switchCount += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;, [value])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件卸载时处理一些内存问题，比如清除定时器、清除事件监听 需要卸载的时候要处理一些事件的时候需要return</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"built_in\">Math</span>.random().toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, handler)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [])</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><a name=\"V2lmw\"></a></p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><a name=\"ZszIx\"></a></p>\n<h3 id=\"为啥使用useRef\"><a href=\"#为啥使用useRef\" class=\"headerlink\" title=\"为啥使用useRef?\"></a>为啥使用useRef?</h3><p>它不仅仅是用来管理 DOM ref 的，它还相当于 this , 可以存放任何变量，很好的解决闭包带来的不方便性。<br><a name=\"6Mz2f\"></a></p>\n<h3 id=\"怎么使用useRef\"><a href=\"#怎么使用useRef\" class=\"headerlink\" title=\"怎么使用useRef?\"></a>怎么使用useRef?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">const countRef = useRef&lt;number&gt;(count)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"sp4Se\"></a></p>\n<h3 id=\"场景举例\"><a href=\"#场景举例\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p><a name=\"wl3x8\"></a></p>\n<h5 id=\"1-闭包问题：\"><a href=\"#1-闭包问题：\" class=\"headerlink\" title=\"1.闭包问题：\"></a>1.闭包问题：</h5><p>想想看，我们先点击 <strong>加</strong> 按钮 3 次，再点 <strong>弹框显示</strong> 1次，再点 <strong>加</strong> 按钮 2 次，最终 <code>alert</code> 会是什么结果？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useEffect, useRef &#125; from &apos;react&apos;</span><br><span class=\"line\">const Counter = () =&gt; &#123;</span><br><span class=\"line\">  const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const handleCount = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      alert(&apos;current count: &apos; + count)</span><br><span class=\"line\">    &#125;, 3000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;current count: &#123; count &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;加&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; handleCount()&#125;&gt;弹框显示&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Counter</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>结果是弹框内容为 <strong>current count: 3</strong> ，为什么？</p>\n<blockquote>\n<p>当我们更新状态的时候, <strong>React 会重新渲染组件, 每一次渲染都会拿到独立的 count 状态,  并重新渲染一个  handleCount 函数.  每一个 handleCount 里面都有它自己的 count 。</strong></p>\n</blockquote>\n<p>** 那如何显示最新的当前 count 呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Counter = () =&gt; &#123;</span><br><span class=\"line\">  const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const countRef = useRef&lt;number&gt;(count)</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    countRef.current = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  const handleCount = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      alert(&apos;current count: &apos; + countRef.current)</span><br><span class=\"line\">    &#125;, 3000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Counter</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Fhl8b\"></a></p>\n<h5 id=\"2-因为变更-current-属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\"><a href=\"#2-因为变更-current-属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\" class=\"headerlink\" title=\"2.因为变更 .current 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\"></a>2.因为变更 <code>.current</code> 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Counter = () =&gt; &#123;</span><br><span class=\"line\">  const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const preCountRef = useRef&lt;number&gt;(count)</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    preCountRef.current = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;pre count: &#123; preCountRef.current &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;current count: &#123; count &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;加&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到，显示的总是状态的前一个值：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/webp/206259/1602836948895-4537e142-aa02-4c5f-be00-0a899ee3cf16.webp#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=212&originWidth=344&size=0&status=done&style=none&width=344\" alt><br><a name=\"Xvb5c\"></a></p>\n<h5 id=\"3-操作-Dom-节点，类似-createRef-：\"><a href=\"#3-操作-Dom-节点，类似-createRef-：\" class=\"headerlink\" title=\"3.操作 Dom 节点，类似 createRef()：\"></a>3.操作 Dom 节点，类似 createRef()：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useRef &#125; from &apos;react&apos;</span><br><span class=\"line\">const TextInput = () =&gt; &#123;</span><br><span class=\"line\">  const inputEl = useRef&lt;HTMLInputElement&gt;(null)</span><br><span class=\"line\">  const onFocusClick = () =&gt; &#123;</span><br><span class=\"line\">    if(inputEl &amp;&amp; inputEl.current) &#123;</span><br><span class=\"line\">      inputEl.current.focus()</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;text&quot; ref=&#123;inputEl&#125;/&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;onFocusClick&#125;&gt;Focus the input&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default TextInput</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"WOf6t\"></a></p>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p><a name=\"efknj\"></a></p>\n<h3 id=\"为啥使用useMemo\"><a href=\"#为啥使用useMemo\" class=\"headerlink\" title=\"为啥使用useMemo?\"></a>为啥使用useMemo?</h3><p>从 <strong>useEffect</strong> 可以知道，可以通过向其传递一些参数来影响某些函数的执行。 React 检查这些参数是否已更改，并且只有在存在差异的情况下才会执行此。<br><strong>useMemo</strong> 做类似的事情，假设有大量方法，并且只想在其参数更改时运行它们，而不是每次组件更新时都运行它们，那就可以使用 <strong>useMemo</strong> 来进行性能优化。</p>\n<blockquote>\n<p>记住，传入 <code>useMemo</code> 的函数会在<strong>渲染期间执行</strong>。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 <code>useEffect</code> 的适用范畴，而不是 <code>useMemo</code> 。</p>\n</blockquote>\n<p><a name=\"WCw2S\"></a></p>\n<h3 id=\"怎么使用useMemo\"><a href=\"#怎么使用useMemo\" class=\"headerlink\" title=\"怎么使用useMemo?\"></a>怎么使用useMemo?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function changeName(name) &#123;</span><br><span class=\"line\">  return name + &apos;给name做点操作返回新name&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const newName = useMemo(() =&gt; &#123;</span><br><span class=\"line\">\treturn changeName(name)</span><br><span class=\"line\">&#125;, [name])</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"OVvUh\"></a></p>\n<h3 id=\"场景举例-1\"><a href=\"#场景举例-1\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p><a name=\"wDl3N\"></a></p>\n<h5 id=\"1-常规使用，避免重复执行没必要的方法：\"><a href=\"#1-常规使用，避免重复执行没必要的方法：\" class=\"headerlink\" title=\"1.常规使用，避免重复执行没必要的方法：\"></a>1.常规使用，避免重复执行没必要的方法：</h5><p>我们先来看一个很简单的例子，以下是还未使用 <code>useMemo</code> 的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useMemo &#125; from &apos;react&apos;</span><br><span class=\"line\">// 父组件</span><br><span class=\"line\">const Example = () =&gt; &#123;</span><br><span class=\"line\">  const [time, setTime] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const [random, setRandom] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setTime(new Date().getTime())&#125;&gt;获取当前时间&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setRandom(Math.random())&#125;&gt;获取当前随机数&lt;/button&gt;</span><br><span class=\"line\">      &lt;Show time=&#123;time&#125;&gt;&#123;random&#125;&lt;/Show&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type Data = &#123;</span><br><span class=\"line\">  time: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 子组件</span><br><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">  function changeTime(time: number): string &#123;</span><br><span class=\"line\">    console.log(&apos;changeTime excuted...&apos;)</span><br><span class=\"line\">    return new Date(time).toISOString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Time is: &#123; changeTime(time) &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;Random is: &#123; children &#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Example</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，无论你点击的是 <strong>获取当前时间</strong> 按钮还是 <strong>获取当前随机数</strong> 按钮， <code>&lt;Show /&gt;</code> 这个组件中的方法 <code>changeTime</code> 都会执行。<br>但事实上，点击 <strong>获取当前随机数</strong> 按钮改变的只会是 <code>children</code> 这个参数，但我们的 <code>changeTime</code> 也会因为子组件的重新渲染而重新执行，这个操作是很没必要的，消耗了无关的性能。<br>使用 <code>useMemo</code> 改造我们的 <code>&lt;Show /&gt;</code> 子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">  function changeTime(time: number): string &#123;</span><br><span class=\"line\">    console.log(&apos;changeTime excuted...&apos;)</span><br><span class=\"line\">    return new Date(time).toISOString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const newTime: string = useMemo(() =&gt; &#123;</span><br><span class=\"line\">    return changeTime(time)</span><br><span class=\"line\">  &#125;, [time])</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Time is: &#123; newTime &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;Random is: &#123; children &#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这个时候只有点击 <strong>获取当前时间</strong> 才会执行 <code>changeTime</code> 这个函数，而点击 <strong>获取当前随机数</strong> 已经不会触发该函数执行了。<br><a name=\"16VwH\"></a></p>\n<h5 id=\"2-你可能会好奇，-useMemo-能做的难道不能用-useEffect-来做吗？\"><a href=\"#2-你可能会好奇，-useMemo-能做的难道不能用-useEffect-来做吗？\" class=\"headerlink\" title=\"2.你可能会好奇， useMemo 能做的难道不能用 useEffect 来做吗？\"></a>2.你可能会好奇， <code>useMemo</code> 能做的难道不能用 <code>useEffect</code> 来做吗？</h5><p>答案是否定的！如果你在子组件中加入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\">  </span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;effect function here...&apos;)</span><br><span class=\"line\">  &#125;, [time])</span><br><span class=\"line\">  const newTime: string = useMemo(() =&gt; &#123;</span><br><span class=\"line\">    return changeTime(time)</span><br><span class=\"line\">  &#125;, [time])</span><br><span class=\"line\">  </span><br><span class=\"line\">\t//...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>你会发现，控制台会打印如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; changeTime excuted...</span><br><span class=\"line\">&gt; effect function here...</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>正如我们一开始说的：传入 <code>useMemo</code> 的函数会在<strong>渲染期间执行</strong>。 在此不得不提 <code>React.memo</code> ，它的作用是实现整个组件的 <code>Pure</code> 功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = React.memo((&#123; time, children &#125;) =&gt; &#123;...&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>所以简单用一句话来概括 <code>useMemo</code> 和 <code>React.memo</code> 的区别就是：前者在某些情况下不希望组件对所有 <code>props</code> 做浅比较，只想实现局部 <code>Pure</code> 功能，即只想对特定的 <code>props</code> 做比较，并决定是否局部更新。<br><a name=\"tFpIu\"></a></p>\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p><a name=\"fkNyV\"></a></p>\n<h3 id=\"为啥使用useCallback\"><a href=\"#为啥使用useCallback\" class=\"headerlink\" title=\"为啥使用useCallback?\"></a>为啥使用useCallback?</h3><p><code>useMemo</code> 和 <code>useCallback</code> 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 <code>useMemo</code> 返回的是函数运行的结果， <code>useCallback</code> 返回的是函数。</p>\n<blockquote>\n<p>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)</p>\n</blockquote>\n<p><a name=\"TZOSP\"></a></p>\n<h3 id=\"怎么使用useCallback\"><a href=\"#怎么使用useCallback\" class=\"headerlink\" title=\"怎么使用useCallback?\"></a>怎么使用useCallback?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function changeName(name) &#123;</span><br><span class=\"line\">  return name + &apos;给name做点操作返回新name&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const getNewName = useMemo(() =&gt; &#123;</span><br><span class=\"line\">  return changeName(name)</span><br><span class=\"line\">&#125;, [name])</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"J1yKA\"></a></p>\n<h3 id=\"场景举例-2\"><a href=\"#场景举例-2\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p>将之前 <code>useMemo</code> 的例子，改一下子组件以下地方就OK了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">  const getNewTime = useCallback(() =&gt; changeTime(time), [time])</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Time is: &#123; getNewTime() &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;Random is: &#123; children &#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"nW3xY\"></a></p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p><a name=\"LTBBo\"></a></p>\n<h3 id=\"为什么使用useReducer\"><a href=\"#为什么使用useReducer\" class=\"headerlink\" title=\"为什么使用useReducer?\"></a>为什么使用useReducer?</h3><p>有没有想过你在某个组件里写了很多很多的 <code>useState</code> 是什么观感？比如以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [name, setName] = useState&lt;string&gt;(&apos;&apos;)</span><br><span class=\"line\">const [islogin, setIsLogin] = useState&lt;boolean&gt;(false)</span><br><span class=\"line\">const [avatar, setAvatar] = useState&lt;string&gt;(&apos;&apos;)</span><br><span class=\"line\">const [age, setAge] = useState&lt;number&gt;(0)</span><br><span class=\"line\">//...</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"6etYW\"></a></p>\n<h3 id=\"怎么使用useReducer\"><a href=\"#怎么使用useReducer\" class=\"headerlink\" title=\"怎么使用useReducer?\"></a>怎么使用useReducer?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useReducer &#125; from &apos;react&apos;</span><br><span class=\"line\">type StateType = &#123;</span><br><span class=\"line\">  count: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type ActionType = &#123;</span><br><span class=\"line\">  type: &apos;reset&apos; | &apos;decrement&apos; | &apos;increment&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const initialState = &#123; count: 0 &#125;</span><br><span class=\"line\">function reducer(state: StateType, action: ActionType) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &apos;reset&apos;:</span><br><span class=\"line\">      return initialState</span><br><span class=\"line\">    case &apos;increment&apos;:</span><br><span class=\"line\">      return &#123; count: state.count + 1 &#125;</span><br><span class=\"line\">    case &apos;decrement&apos;:</span><br><span class=\"line\">      return &#123; count: state.count - 1 &#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Counter(&#123; initialCount = 0&#125;) &#123;</span><br><span class=\"line\">  const [state, dispatch] = useReducer(reducer, &#123; count: initialCount &#125;)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      Count: &#123;state.count&#125;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;reset&apos; &#125;)&#125;&gt;Reset&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;increment&apos; &#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;decrement&apos; &#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Counter</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"V7CtP\"></a></p>\n<h3 id=\"场景举例：\"><a href=\"#场景举例：\" class=\"headerlink\" title=\"场景举例：\"></a>场景举例：</h3><p>与 <code>useContext</code> 结合代替 Redux 方案，往下阅读。<br><a name=\"nzCzR\"></a></p>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p><a name=\"ovovY\"></a></p>\n<h3 id=\"为啥使用useContext\"><a href=\"#为啥使用useContext\" class=\"headerlink\" title=\"为啥使用useContext?\"></a>为啥使用useContext?</h3><p>简单来说 <code>Context</code> 的作用就是对它所包含的组件树提供全局共享数据的一种技术。<br><a name=\"vpfrh\"></a></p>\n<h3 id=\"怎么使用useContext？\"><a href=\"#怎么使用useContext？\" class=\"headerlink\" title=\"怎么使用useContext？\"></a>怎么使用useContext？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const ColorContext = React.createContext(&#123; color: &apos;#1890ff&apos; &#125;)</span><br><span class=\"line\">const &#123; color &#125; = useContext(ColorContext)</span><br><span class=\"line\">// 或</span><br><span class=\"line\">export const ColorContext = React.createContext(null)</span><br><span class=\"line\">&lt;ColorContext.Provider value=&apos;#1890ff&apos;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;/ColorContext.Provider&gt;</span><br><span class=\"line\">// App 或以下的所有子组件都可拿到 value</span><br><span class=\"line\">const color = useContext(ColorContext) // &apos;#1890ff&apos;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Dknz0\"></a></p>\n<h3 id=\"场景举例-3\"><a href=\"#场景举例-3\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p><a name=\"eaUTS\"></a></p>\n<h5 id=\"1-根组件注册，所有子组件都可拿到注册的值：\"><a href=\"#1-根组件注册，所有子组件都可拿到注册的值：\" class=\"headerlink\" title=\"1.根组件注册，所有子组件都可拿到注册的值：\"></a>1.根组件注册，所有子组件都可拿到注册的值：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useContext &#125; from &apos;react&apos;</span><br><span class=\"line\">const ColorContext = React.createContext&lt;string&gt;(&apos;&apos;)</span><br><span class=\"line\">const App = () =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;ColorContext.Provider value=&apos;#1890ff&apos;&gt;</span><br><span class=\"line\">      &lt;Father /&gt;</span><br><span class=\"line\">    &lt;/ColorContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Father = () =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Child /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Child = () =&gt; &#123;</span><br><span class=\"line\">  const color = useContext(ColorContext)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; backgroundColor: color &#125;&#125;&gt;Background color is: &#123; color &#125;&lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default App</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Lz4av\"></a></p>\n<h5 id=\"2-配合-useReducer-实现-Redux-的代替方案：\"><a href=\"#2-配合-useReducer-实现-Redux-的代替方案：\" class=\"headerlink\" title=\"2.配合 useReducer 实现 Redux 的代替方案：\"></a>2.配合 <code>useReducer</code> 实现 Redux 的代替方案：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useReducer, useContext &#125; from &apos;react&apos;</span><br><span class=\"line\">const UPDATE_COLOR = &apos;UPDATE_COLOR&apos;</span><br><span class=\"line\">type StateType = &#123;</span><br><span class=\"line\">  color: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type ActionType = &#123;</span><br><span class=\"line\">  type: string,</span><br><span class=\"line\">  color: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type MixStateAndDispatch = &#123;</span><br><span class=\"line\">  state: StateType,</span><br><span class=\"line\">  dispatch?: React.Dispatch&lt;ActionType&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const reducer = (state: StateType, action: ActionType) =&gt; &#123;</span><br><span class=\"line\">  switch(action.type) &#123;</span><br><span class=\"line\">    case UPDATE_COLOR:</span><br><span class=\"line\">      return &#123; color: action.color &#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const ColorContext = React.createContext&lt;MixStateAndDispatch&gt;(&#123;</span><br><span class=\"line\">  state: &#123; color: &apos;black&apos; &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const Show = () =&gt; &#123;</span><br><span class=\"line\">  const &#123; state, dispatch &#125; = useContext(ColorContext)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; color: state.color &#125;&#125;&gt;</span><br><span class=\"line\">      当前字体颜色为: &#123;state.color&#125;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;red&apos;&#125;)&#125;&gt;红色&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;green&apos;&#125;)&#125;&gt;绿色&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Example = (&#123; initialColor = &apos;#000000&apos; &#125;) =&gt; &#123;</span><br><span class=\"line\">  const [state, dispatch] = useReducer(reducer, &#123; color: initialColor &#125;)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;ColorContext.Provider value=&#123;&#123;state, dispatch&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Show /&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;blue&apos;&#125;)&#125;&gt;蓝色&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;lightblue&apos;&#125;)&#125;&gt;轻绿色&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/ColorContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Example</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p><a name=\"Y6XDX\"></a></p>\n<h3 id=\"useState\"><a href=\"#useState\" class=\"headerlink\" title=\"useState\"></a>useState</h3><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\">type UserInfo = &#123;</span><br><span class=\"line\">  name: string,</span><br><span class=\"line\">  age: number,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> User:React.FC&lt;UserInfo&gt; = <span class=\"function\">(<span class=\"params\">&#123; name, age &#125;</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div className=<span class=\"string\">\"User\"</span>&gt;</span><br><span class=\"line\">      &lt;p&gt;&#123; name &#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;&#123; age &#125;&lt;/</span>p&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">const user = &lt;User name='vortesnail' age=&#123;25&#125; /</span>&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>在我们的参数为对象类型时，需要特别注意的是， <code>setXxx</code> 并不会像 <code>this.setState</code> 合并旧的状态，它是完全替代了旧的状态，所以我们要实现合并，可以这样写<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">setArticle(&#123;</span><br><span class=\"line\">  title: <span class=\"string\">'下一篇'</span>,</span><br><span class=\"line\">  content: <span class=\"string\">'下一篇的内容'</span>,</span><br><span class=\"line\">  ...article</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><a name=\"5efa7793\"></a></p>\n<h3 id=\"为啥使用useEffect\"><a href=\"#为啥使用useEffect\" class=\"headerlink\" title=\"为啥使用useEffect?\"></a>为啥使用useEffect?</h3><p>你可以把 <code>useEffect</code> 看做 <code>componentDidMount</code> ， <code>componentDidUpdate</code> 和 <code>componentWillUnmount</code> 这三个函数的组合。<br></p>\n<p><a name=\"756dc977\"></a></p>\n<h3 id=\"怎么使用useEffect\"><a href=\"#怎么使用useEffect\" class=\"headerlink\" title=\"怎么使用useEffect?\"></a>怎么使用useEffect?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(() =&gt; &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  return () =&gt; &#123;...&#125;</span><br><span class=\"line\">&#125;,[...])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>每当状态改变 每次都执行useEffect</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; useState, useEffect &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> switchCount: number = <span class=\"number\">0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> User = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> [name, setName] = useState&lt;string&gt;(<span class=\"string\">''</span>)</span><br><span class=\"line\">  useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    switchCount += <span class=\"number\">1</span></span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Current Name: &#123; name &#125;&lt;<span class=\"regexp\">/p&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;p&gt;switchCount: &#123; switchCount &#125;&lt;/</span>p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setName(<span class=\"string\">'Jack'</span>)&#125;&gt;Jack&lt;<span class=\"regexp\">/button&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">      &lt;button onClick=&#123;() =&gt; setName('Marry')&#125;&gt;Marry&lt;/</span>button&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br><span class=\"line\"><span class=\"regexp\"></span></span><br><span class=\"line\"><span class=\"regexp\">export default User</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>只执行一次 useEffect</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  switchCount += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;, [])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>根据某个状态去改变 只有该状态改变 useEffect才会执行</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> [value, setValue] = useState&lt;string&gt;(<span class=\"string\">'I never change'</span>)</span><br><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  switchCount += <span class=\"number\">1</span></span><br><span class=\"line\">&#125;, [value])</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>组件卸载时处理一些内存问题，比如清除定时器、清除事件监听 需要卸载的时候要处理一些事件的时候需要return</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">useEffect(<span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> handler = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">document</span>.title = <span class=\"built_in\">Math</span>.random().toString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"built_in\">window</span>.addEventListener(<span class=\"string\">'resize'</span>, handler)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">window</span>.removeEventListener(<span class=\"string\">'resize'</span>, handler)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;, [])</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<p><a name=\"V2lmw\"></a></p>\n<h2 id=\"useRef\"><a href=\"#useRef\" class=\"headerlink\" title=\"useRef\"></a>useRef</h2><p><a name=\"ZszIx\"></a></p>\n<h3 id=\"为啥使用useRef\"><a href=\"#为啥使用useRef\" class=\"headerlink\" title=\"为啥使用useRef?\"></a>为啥使用useRef?</h3><p>它不仅仅是用来管理 DOM ref 的，它还相当于 this , 可以存放任何变量，很好的解决闭包带来的不方便性。<br><a name=\"6Mz2f\"></a></p>\n<h3 id=\"怎么使用useRef\"><a href=\"#怎么使用useRef\" class=\"headerlink\" title=\"怎么使用useRef?\"></a>怎么使用useRef?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">const countRef = useRef&lt;number&gt;(count)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"sp4Se\"></a></p>\n<h3 id=\"场景举例\"><a href=\"#场景举例\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p><a name=\"wl3x8\"></a></p>\n<h5 id=\"1-闭包问题：\"><a href=\"#1-闭包问题：\" class=\"headerlink\" title=\"1.闭包问题：\"></a>1.闭包问题：</h5><p>想想看，我们先点击 <strong>加</strong> 按钮 3 次，再点 <strong>弹框显示</strong> 1次，再点 <strong>加</strong> 按钮 2 次，最终 <code>alert</code> 会是什么结果？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useEffect, useRef &#125; from &apos;react&apos;</span><br><span class=\"line\">const Counter = () =&gt; &#123;</span><br><span class=\"line\">  const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const handleCount = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      alert(&apos;current count: &apos; + count)</span><br><span class=\"line\">    &#125;, 3000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;current count: &#123; count &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;加&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; handleCount()&#125;&gt;弹框显示&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Counter</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>结果是弹框内容为 <strong>current count: 3</strong> ，为什么？</p>\n<blockquote>\n<p>当我们更新状态的时候, <strong>React 会重新渲染组件, 每一次渲染都会拿到独立的 count 状态,  并重新渲染一个  handleCount 函数.  每一个 handleCount 里面都有它自己的 count 。</strong></p>\n</blockquote>\n<p>** 那如何显示最新的当前 count 呢？</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Counter = () =&gt; &#123;</span><br><span class=\"line\">  const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const countRef = useRef&lt;number&gt;(count)</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    countRef.current = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  const handleCount = () =&gt; &#123;</span><br><span class=\"line\">    setTimeout(() =&gt; &#123;</span><br><span class=\"line\">      alert(&apos;current count: &apos; + countRef.current)</span><br><span class=\"line\">    &#125;, 3000);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Counter</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Fhl8b\"></a></p>\n<h5 id=\"2-因为变更-current-属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\"><a href=\"#2-因为变更-current-属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\" class=\"headerlink\" title=\"2.因为变更 .current 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：\"></a>2.因为变更 <code>.current</code> 属性不会引发组件重新渲染，根据这个特性可以获取状态的前一个值：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Counter = () =&gt; &#123;</span><br><span class=\"line\">  const [count, setCount] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const preCountRef = useRef&lt;number&gt;(count)</span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    preCountRef.current = count</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;pre count: &#123; preCountRef.current &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;current count: &#123; count &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setCount(count + 1)&#125;&gt;加&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>我们可以看到，显示的总是状态的前一个值：<br><img src=\"https://cdn.nlark.com/yuque/0/2020/webp/206259/1602836948895-4537e142-aa02-4c5f-be00-0a899ee3cf16.webp#align=left&display=inline&height=212&margin=%5Bobject%20Object%5D&originHeight=212&originWidth=344&size=0&status=done&style=none&width=344\" alt><br><a name=\"Xvb5c\"></a></p>\n<h5 id=\"3-操作-Dom-节点，类似-createRef-：\"><a href=\"#3-操作-Dom-节点，类似-createRef-：\" class=\"headerlink\" title=\"3.操作 Dom 节点，类似 createRef()：\"></a>3.操作 Dom 节点，类似 createRef()：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useRef &#125; from &apos;react&apos;</span><br><span class=\"line\">const TextInput = () =&gt; &#123;</span><br><span class=\"line\">  const inputEl = useRef&lt;HTMLInputElement&gt;(null)</span><br><span class=\"line\">  const onFocusClick = () =&gt; &#123;</span><br><span class=\"line\">    if(inputEl &amp;&amp; inputEl.current) &#123;</span><br><span class=\"line\">      inputEl.current.focus()</span><br><span class=\"line\">    &#125; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;input type=&quot;text&quot; ref=&#123;inputEl&#125;/&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;onFocusClick&#125;&gt;Focus the input&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default TextInput</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"WOf6t\"></a></p>\n<h2 id=\"useMemo\"><a href=\"#useMemo\" class=\"headerlink\" title=\"useMemo\"></a>useMemo</h2><p><a name=\"efknj\"></a></p>\n<h3 id=\"为啥使用useMemo\"><a href=\"#为啥使用useMemo\" class=\"headerlink\" title=\"为啥使用useMemo?\"></a>为啥使用useMemo?</h3><p>从 <strong>useEffect</strong> 可以知道，可以通过向其传递一些参数来影响某些函数的执行。 React 检查这些参数是否已更改，并且只有在存在差异的情况下才会执行此。<br><strong>useMemo</strong> 做类似的事情，假设有大量方法，并且只想在其参数更改时运行它们，而不是每次组件更新时都运行它们，那就可以使用 <strong>useMemo</strong> 来进行性能优化。</p>\n<blockquote>\n<p>记住，传入 <code>useMemo</code> 的函数会在<strong>渲染期间执行</strong>。请不要在这个函数内部执行与渲染无关的操作，诸如副作用这类的操作属于 <code>useEffect</code> 的适用范畴，而不是 <code>useMemo</code> 。</p>\n</blockquote>\n<p><a name=\"WCw2S\"></a></p>\n<h3 id=\"怎么使用useMemo\"><a href=\"#怎么使用useMemo\" class=\"headerlink\" title=\"怎么使用useMemo?\"></a>怎么使用useMemo?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function changeName(name) &#123;</span><br><span class=\"line\">  return name + &apos;给name做点操作返回新name&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const newName = useMemo(() =&gt; &#123;</span><br><span class=\"line\">\treturn changeName(name)</span><br><span class=\"line\">&#125;, [name])</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"OVvUh\"></a></p>\n<h3 id=\"场景举例-1\"><a href=\"#场景举例-1\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p><a name=\"wDl3N\"></a></p>\n<h5 id=\"1-常规使用，避免重复执行没必要的方法：\"><a href=\"#1-常规使用，避免重复执行没必要的方法：\" class=\"headerlink\" title=\"1.常规使用，避免重复执行没必要的方法：\"></a>1.常规使用，避免重复执行没必要的方法：</h5><p>我们先来看一个很简单的例子，以下是还未使用 <code>useMemo</code> 的代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useMemo &#125; from &apos;react&apos;</span><br><span class=\"line\">// 父组件</span><br><span class=\"line\">const Example = () =&gt; &#123;</span><br><span class=\"line\">  const [time, setTime] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  const [random, setRandom] = useState&lt;number&gt;(0)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setTime(new Date().getTime())&#125;&gt;获取当前时间&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; setRandom(Math.random())&#125;&gt;获取当前随机数&lt;/button&gt;</span><br><span class=\"line\">      &lt;Show time=&#123;time&#125;&gt;&#123;random&#125;&lt;/Show&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type Data = &#123;</span><br><span class=\"line\">  time: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 子组件</span><br><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">  function changeTime(time: number): string &#123;</span><br><span class=\"line\">    console.log(&apos;changeTime excuted...&apos;)</span><br><span class=\"line\">    return new Date(time).toISOString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Time is: &#123; changeTime(time) &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;Random is: &#123; children &#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Example</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>在这个例子中，无论你点击的是 <strong>获取当前时间</strong> 按钮还是 <strong>获取当前随机数</strong> 按钮， <code>&lt;Show /&gt;</code> 这个组件中的方法 <code>changeTime</code> 都会执行。<br>但事实上，点击 <strong>获取当前随机数</strong> 按钮改变的只会是 <code>children</code> 这个参数，但我们的 <code>changeTime</code> 也会因为子组件的重新渲染而重新执行，这个操作是很没必要的，消耗了无关的性能。<br>使用 <code>useMemo</code> 改造我们的 <code>&lt;Show /&gt;</code> 子组件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">  function changeTime(time: number): string &#123;</span><br><span class=\"line\">    console.log(&apos;changeTime excuted...&apos;)</span><br><span class=\"line\">    return new Date(time).toISOString()</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  const newTime: string = useMemo(() =&gt; &#123;</span><br><span class=\"line\">    return changeTime(time)</span><br><span class=\"line\">  &#125;, [time])</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Time is: &#123; newTime &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;Random is: &#123; children &#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这个时候只有点击 <strong>获取当前时间</strong> 才会执行 <code>changeTime</code> 这个函数，而点击 <strong>获取当前随机数</strong> 已经不会触发该函数执行了。<br><a name=\"16VwH\"></a></p>\n<h5 id=\"2-你可能会好奇，-useMemo-能做的难道不能用-useEffect-来做吗？\"><a href=\"#2-你可能会好奇，-useMemo-能做的难道不能用-useEffect-来做吗？\" class=\"headerlink\" title=\"2.你可能会好奇， useMemo 能做的难道不能用 useEffect 来做吗？\"></a>2.你可能会好奇， <code>useMemo</code> 能做的难道不能用 <code>useEffect</code> 来做吗？</h5><p>答案是否定的！如果你在子组件中加入以下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">\t//...</span><br><span class=\"line\">  </span><br><span class=\"line\">  useEffect(() =&gt; &#123;</span><br><span class=\"line\">    console.log(&apos;effect function here...&apos;)</span><br><span class=\"line\">  &#125;, [time])</span><br><span class=\"line\">  const newTime: string = useMemo(() =&gt; &#123;</span><br><span class=\"line\">    return changeTime(time)</span><br><span class=\"line\">  &#125;, [time])</span><br><span class=\"line\">  </span><br><span class=\"line\">\t//...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>你会发现，控制台会打印如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; changeTime excuted...</span><br><span class=\"line\">&gt; effect function here...</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>正如我们一开始说的：传入 <code>useMemo</code> 的函数会在<strong>渲染期间执行</strong>。 在此不得不提 <code>React.memo</code> ，它的作用是实现整个组件的 <code>Pure</code> 功能：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = React.memo((&#123; time, children &#125;) =&gt; &#123;...&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>所以简单用一句话来概括 <code>useMemo</code> 和 <code>React.memo</code> 的区别就是：前者在某些情况下不希望组件对所有 <code>props</code> 做浅比较，只想实现局部 <code>Pure</code> 功能，即只想对特定的 <code>props</code> 做比较，并决定是否局部更新。<br><a name=\"tFpIu\"></a></p>\n<h2 id=\"useCallback\"><a href=\"#useCallback\" class=\"headerlink\" title=\"useCallback\"></a>useCallback</h2><p><a name=\"fkNyV\"></a></p>\n<h3 id=\"为啥使用useCallback\"><a href=\"#为啥使用useCallback\" class=\"headerlink\" title=\"为啥使用useCallback?\"></a>为啥使用useCallback?</h3><p><code>useMemo</code> 和 <code>useCallback</code> 接收的参数都是一样，都是在其依赖项发生变化后才执行，都是返回缓存的值，区别在于 <code>useMemo</code> 返回的是函数运行的结果， <code>useCallback</code> 返回的是函数。</p>\n<blockquote>\n<p>useCallback(fn, deps) 相当于 useMemo(() =&gt; fn, deps)</p>\n</blockquote>\n<p><a name=\"TZOSP\"></a></p>\n<h3 id=\"怎么使用useCallback\"><a href=\"#怎么使用useCallback\" class=\"headerlink\" title=\"怎么使用useCallback?\"></a>怎么使用useCallback?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function changeName(name) &#123;</span><br><span class=\"line\">  return name + &apos;给name做点操作返回新name&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const getNewName = useMemo(() =&gt; &#123;</span><br><span class=\"line\">  return changeName(name)</span><br><span class=\"line\">&#125;, [name])</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"J1yKA\"></a></p>\n<h3 id=\"场景举例-2\"><a href=\"#场景举例-2\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p>将之前 <code>useMemo</code> 的例子，改一下子组件以下地方就OK了：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const Show:React.FC&lt;Data&gt; = (&#123; time, children &#125;) =&gt; &#123;</span><br><span class=\"line\">  //...</span><br><span class=\"line\">  const getNewTime = useCallback(() =&gt; changeTime(time), [time])</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      &lt;p&gt;Time is: &#123; getNewTime() &#125;&lt;/p&gt;</span><br><span class=\"line\">      &lt;p&gt;Random is: &#123; children &#125;&lt;/p&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"nW3xY\"></a></p>\n<h2 id=\"useReducer\"><a href=\"#useReducer\" class=\"headerlink\" title=\"useReducer\"></a>useReducer</h2><p><a name=\"LTBBo\"></a></p>\n<h3 id=\"为什么使用useReducer\"><a href=\"#为什么使用useReducer\" class=\"headerlink\" title=\"为什么使用useReducer?\"></a>为什么使用useReducer?</h3><p>有没有想过你在某个组件里写了很多很多的 <code>useState</code> 是什么观感？比如以下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const [name, setName] = useState&lt;string&gt;(&apos;&apos;)</span><br><span class=\"line\">const [islogin, setIsLogin] = useState&lt;boolean&gt;(false)</span><br><span class=\"line\">const [avatar, setAvatar] = useState&lt;string&gt;(&apos;&apos;)</span><br><span class=\"line\">const [age, setAge] = useState&lt;number&gt;(0)</span><br><span class=\"line\">//...</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"6etYW\"></a></p>\n<h3 id=\"怎么使用useReducer\"><a href=\"#怎么使用useReducer\" class=\"headerlink\" title=\"怎么使用useReducer?\"></a>怎么使用useReducer?</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useState, useReducer &#125; from &apos;react&apos;</span><br><span class=\"line\">type StateType = &#123;</span><br><span class=\"line\">  count: number</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type ActionType = &#123;</span><br><span class=\"line\">  type: &apos;reset&apos; | &apos;decrement&apos; | &apos;increment&apos;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const initialState = &#123; count: 0 &#125;</span><br><span class=\"line\">function reducer(state: StateType, action: ActionType) &#123;</span><br><span class=\"line\">  switch (action.type) &#123;</span><br><span class=\"line\">    case &apos;reset&apos;:</span><br><span class=\"line\">      return initialState</span><br><span class=\"line\">    case &apos;increment&apos;:</span><br><span class=\"line\">      return &#123; count: state.count + 1 &#125;</span><br><span class=\"line\">    case &apos;decrement&apos;:</span><br><span class=\"line\">      return &#123; count: state.count - 1 &#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function Counter(&#123; initialCount = 0&#125;) &#123;</span><br><span class=\"line\">  const [state, dispatch] = useReducer(reducer, &#123; count: initialCount &#125;)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div&gt;</span><br><span class=\"line\">      Count: &#123;state.count&#125;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;reset&apos; &#125;)&#125;&gt;Reset&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;increment&apos; &#125;)&#125;&gt;+&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch(&#123; type: &apos;decrement&apos; &#125;)&#125;&gt;-&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Counter</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"V7CtP\"></a></p>\n<h3 id=\"场景举例：\"><a href=\"#场景举例：\" class=\"headerlink\" title=\"场景举例：\"></a>场景举例：</h3><p>与 <code>useContext</code> 结合代替 Redux 方案，往下阅读。<br><a name=\"nzCzR\"></a></p>\n<h2 id=\"useContext\"><a href=\"#useContext\" class=\"headerlink\" title=\"useContext\"></a>useContext</h2><p><a name=\"ovovY\"></a></p>\n<h3 id=\"为啥使用useContext\"><a href=\"#为啥使用useContext\" class=\"headerlink\" title=\"为啥使用useContext?\"></a>为啥使用useContext?</h3><p>简单来说 <code>Context</code> 的作用就是对它所包含的组件树提供全局共享数据的一种技术。<br><a name=\"vpfrh\"></a></p>\n<h3 id=\"怎么使用useContext？\"><a href=\"#怎么使用useContext？\" class=\"headerlink\" title=\"怎么使用useContext？\"></a>怎么使用useContext？</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export const ColorContext = React.createContext(&#123; color: &apos;#1890ff&apos; &#125;)</span><br><span class=\"line\">const &#123; color &#125; = useContext(ColorContext)</span><br><span class=\"line\">// 或</span><br><span class=\"line\">export const ColorContext = React.createContext(null)</span><br><span class=\"line\">&lt;ColorContext.Provider value=&apos;#1890ff&apos;&gt;</span><br><span class=\"line\">  &lt;App /&gt;</span><br><span class=\"line\">&lt;/ColorContext.Provider&gt;</span><br><span class=\"line\">// App 或以下的所有子组件都可拿到 value</span><br><span class=\"line\">const color = useContext(ColorContext) // &apos;#1890ff&apos;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Dknz0\"></a></p>\n<h3 id=\"场景举例-3\"><a href=\"#场景举例-3\" class=\"headerlink\" title=\"场景举例\"></a>场景举例</h3><p><a name=\"eaUTS\"></a></p>\n<h5 id=\"1-根组件注册，所有子组件都可拿到注册的值：\"><a href=\"#1-根组件注册，所有子组件都可拿到注册的值：\" class=\"headerlink\" title=\"1.根组件注册，所有子组件都可拿到注册的值：\"></a>1.根组件注册，所有子组件都可拿到注册的值：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useContext &#125; from &apos;react&apos;</span><br><span class=\"line\">const ColorContext = React.createContext&lt;string&gt;(&apos;&apos;)</span><br><span class=\"line\">const App = () =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;ColorContext.Provider value=&apos;#1890ff&apos;&gt;</span><br><span class=\"line\">      &lt;Father /&gt;</span><br><span class=\"line\">    &lt;/ColorContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Father = () =&gt; &#123;</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;Child /&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Child = () =&gt; &#123;</span><br><span class=\"line\">  const color = useContext(ColorContext)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; backgroundColor: color &#125;&#125;&gt;Background color is: &#123; color &#125;&lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default App</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p><a name=\"Lz4av\"></a></p>\n<h5 id=\"2-配合-useReducer-实现-Redux-的代替方案：\"><a href=\"#2-配合-useReducer-实现-Redux-的代替方案：\" class=\"headerlink\" title=\"2.配合 useReducer 实现 Redux 的代替方案：\"></a>2.配合 <code>useReducer</code> 实现 Redux 的代替方案：</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import React, &#123; useReducer, useContext &#125; from &apos;react&apos;</span><br><span class=\"line\">const UPDATE_COLOR = &apos;UPDATE_COLOR&apos;</span><br><span class=\"line\">type StateType = &#123;</span><br><span class=\"line\">  color: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type ActionType = &#123;</span><br><span class=\"line\">  type: string,</span><br><span class=\"line\">  color: string</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">type MixStateAndDispatch = &#123;</span><br><span class=\"line\">  state: StateType,</span><br><span class=\"line\">  dispatch?: React.Dispatch&lt;ActionType&gt;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const reducer = (state: StateType, action: ActionType) =&gt; &#123;</span><br><span class=\"line\">  switch(action.type) &#123;</span><br><span class=\"line\">    case UPDATE_COLOR:</span><br><span class=\"line\">      return &#123; color: action.color &#125;</span><br><span class=\"line\">    default:</span><br><span class=\"line\">      return state  </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const ColorContext = React.createContext&lt;MixStateAndDispatch&gt;(&#123;</span><br><span class=\"line\">  state: &#123; color: &apos;black&apos; &#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">const Show = () =&gt; &#123;</span><br><span class=\"line\">  const &#123; state, dispatch &#125; = useContext(ColorContext)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;div style=&#123;&#123; color: state.color &#125;&#125;&gt;</span><br><span class=\"line\">      当前字体颜色为: &#123;state.color&#125;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;red&apos;&#125;)&#125;&gt;红色&lt;/button&gt;</span><br><span class=\"line\">      &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;green&apos;&#125;)&#125;&gt;绿色&lt;/button&gt;</span><br><span class=\"line\">    &lt;/div&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const Example = (&#123; initialColor = &apos;#000000&apos; &#125;) =&gt; &#123;</span><br><span class=\"line\">  const [state, dispatch] = useReducer(reducer, &#123; color: initialColor &#125;)</span><br><span class=\"line\">  return (</span><br><span class=\"line\">    &lt;ColorContext.Provider value=&#123;&#123;state, dispatch&#125;&#125;&gt;</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Show /&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;blue&apos;&#125;)&#125;&gt;蓝色&lt;/button&gt;</span><br><span class=\"line\">        &lt;button onClick=&#123;() =&gt; dispatch &amp;&amp; dispatch(&#123;type: UPDATE_COLOR, color: &apos;lightblue&apos;&#125;)&#125;&gt;轻绿色&lt;/button&gt;</span><br><span class=\"line\">      &lt;/div&gt;</span><br><span class=\"line\">    &lt;/ColorContext.Provider&gt;</span><br><span class=\"line\">  )</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export default Example</span><br></pre></td></tr></table></figure>\n\n"},{"title":"mac去除系统更新小红点","date":"2020-04-05T08:18:36.000Z","_content":"\n### 屏蔽和去除mac系统的设置图标的系统更新提示小红点!\n  - 先设置取消系统自动更新\n  - 打开终端运行:\n```shell\n  defaults write com.apple.systempreferences AttentionPrefBundleIDs 0\n```\n  - 一般就会解决如果没有解决可以试试以下操作:\n```shell\n  killall Dock\n```\n\n\n","source":"_posts/mac去除系统更新小红点.md","raw":"---\ntitle: mac去除系统更新小红点\ndate: 2020-04-05 16:18:36\ntags: ['mac', '小红点', '更新']\n---\n\n### 屏蔽和去除mac系统的设置图标的系统更新提示小红点!\n  - 先设置取消系统自动更新\n  - 打开终端运行:\n```shell\n  defaults write com.apple.systempreferences AttentionPrefBundleIDs 0\n```\n  - 一般就会解决如果没有解决可以试试以下操作:\n```shell\n  killall Dock\n```\n\n\n","slug":"mac去除系统更新小红点","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls18z000qsi35uxv6egvm","content":"<h3 id=\"屏蔽和去除mac系统的设置图标的系统更新提示小红点\"><a href=\"#屏蔽和去除mac系统的设置图标的系统更新提示小红点\" class=\"headerlink\" title=\"屏蔽和去除mac系统的设置图标的系统更新提示小红点!\"></a>屏蔽和去除mac系统的设置图标的系统更新提示小红点!</h3><ul>\n<li><p>先设置取消系统自动更新</p>\n</li>\n<li><p>打开终端运行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.systempreferences AttentionPrefBundleIDs 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一般就会解决如果没有解决可以试试以下操作:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall Dock</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"屏蔽和去除mac系统的设置图标的系统更新提示小红点\"><a href=\"#屏蔽和去除mac系统的设置图标的系统更新提示小红点\" class=\"headerlink\" title=\"屏蔽和去除mac系统的设置图标的系统更新提示小红点!\"></a>屏蔽和去除mac系统的设置图标的系统更新提示小红点!</h3><ul>\n<li><p>先设置取消系统自动更新</p>\n</li>\n<li><p>打开终端运行:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">defaults write com.apple.systempreferences AttentionPrefBundleIDs 0</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>一般就会解决如果没有解决可以试试以下操作:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">killall Dock</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n"},{"title":"mysql的增删改查","date":"2019-11-23T02:50:02.000Z","_content":"\n- 插入数据\n\n```mysql\n语法： \n    INSERT INTO 表名(列名) VALUES(列名值)\n栗子：\n    INSERT INTO tags(name,id,url) VALUES('爬虫',10,'https://news.so.com/hotnews')\n解释：\n    向标签表(tags)里插入一条，姓名，id和访问地址分别为VALUES内对应的值\n\n```\n\n- 更新数据\n\n```mysql\n语法：\n    UPDATE 表名 SET 列名=更新值 WHERE 更新条件\n栗子：\n    UPDATE articles SET title='你好，世界',content='世界没你想的那么糟！' WHERE id=1\n解释：\n    更新id为1的文章，标题和内容都进行了修改\n\n```\n\n- 删除数据\n\n```mysql\n语法：\n    DELETE FROM 表名 WHERE 删除条件\n栗子：\n    DELETE FROM tags WHERE id=11\n解释：\n    从标签表(tags)里删除id为11的数据\n\n```\n\n- 查询\n\n```mysql\n语法：\n    SELECT 列名 FROM 表名 WHERE 查询条件 ORDER BY 排序列名\n栗子：\n    SELECT name,title,content FROM tags WHERE id=8\n解释：\n    查询id为8的标签表里对应信息\n```","source":"_posts/mysql的增删改查.md","raw":"---\ntitle: mysql的增删改查\ndate: 2019-11-23 10:50:02\ntags: ['mysql']\n---\n\n- 插入数据\n\n```mysql\n语法： \n    INSERT INTO 表名(列名) VALUES(列名值)\n栗子：\n    INSERT INTO tags(name,id,url) VALUES('爬虫',10,'https://news.so.com/hotnews')\n解释：\n    向标签表(tags)里插入一条，姓名，id和访问地址分别为VALUES内对应的值\n\n```\n\n- 更新数据\n\n```mysql\n语法：\n    UPDATE 表名 SET 列名=更新值 WHERE 更新条件\n栗子：\n    UPDATE articles SET title='你好，世界',content='世界没你想的那么糟！' WHERE id=1\n解释：\n    更新id为1的文章，标题和内容都进行了修改\n\n```\n\n- 删除数据\n\n```mysql\n语法：\n    DELETE FROM 表名 WHERE 删除条件\n栗子：\n    DELETE FROM tags WHERE id=11\n解释：\n    从标签表(tags)里删除id为11的数据\n\n```\n\n- 查询\n\n```mysql\n语法：\n    SELECT 列名 FROM 表名 WHERE 查询条件 ORDER BY 排序列名\n栗子：\n    SELECT name,title,content FROM tags WHERE id=8\n解释：\n    查询id为8的标签表里对应信息\n```","slug":"mysql的增删改查","published":1,"updated":"2021-03-24T15:03:18.276Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls196000ssi352h908yau","content":"<ul>\n<li>插入数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法： </span><br><span class=\"line\">    INSERT INTO 表名(列名) VALUES(列名值)</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    INSERT INTO tags(name,id,url) VALUES(&apos;爬虫&apos;,10,&apos;https://news.so.com/hotnews&apos;)</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    向标签表(tags)里插入一条，姓名，id和访问地址分别为VALUES内对应的值</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">    UPDATE 表名 SET 列名=更新值 WHERE 更新条件</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    UPDATE articles SET title=&apos;你好，世界&apos;,content=&apos;世界没你想的那么糟！&apos; WHERE id=1</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    更新id为1的文章，标题和内容都进行了修改</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">    DELETE FROM 表名 WHERE 删除条件</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    DELETE FROM tags WHERE id=11</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    从标签表(tags)里删除id为11的数据</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">    SELECT 列名 FROM 表名 WHERE 查询条件 ORDER BY 排序列名</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    SELECT name,title,content FROM tags WHERE id=8</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    查询id为8的标签表里对应信息</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<ul>\n<li>插入数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法： </span><br><span class=\"line\">    INSERT INTO 表名(列名) VALUES(列名值)</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    INSERT INTO tags(name,id,url) VALUES(&apos;爬虫&apos;,10,&apos;https://news.so.com/hotnews&apos;)</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    向标签表(tags)里插入一条，姓名，id和访问地址分别为VALUES内对应的值</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">    UPDATE 表名 SET 列名=更新值 WHERE 更新条件</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    UPDATE articles SET title=&apos;你好，世界&apos;,content=&apos;世界没你想的那么糟！&apos; WHERE id=1</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    更新id为1的文章，标题和内容都进行了修改</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除数据</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">    DELETE FROM 表名 WHERE 删除条件</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    DELETE FROM tags WHERE id=11</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    从标签表(tags)里删除id为11的数据</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>查询</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">语法：</span><br><span class=\"line\">    SELECT 列名 FROM 表名 WHERE 查询条件 ORDER BY 排序列名</span><br><span class=\"line\">栗子：</span><br><span class=\"line\">    SELECT name,title,content FROM tags WHERE id=8</span><br><span class=\"line\">解释：</span><br><span class=\"line\">    查询id为8的标签表里对应信息</span><br></pre></td></tr></table></figure>"},{"title":"react-native-ios保存图片到相册","date":"2019-11-23T02:41:17.000Z","_content":"\n1. 现在CameraRoll 已经独立到一个库中了,需要单独安装:\n\n\n\n```js\nnpm install @react-native-community/cameraroll --save\n```\n\n- react-native 目前已经可以自动link 一般不需要再手动link\n\n- 如果此时不行的化,需要pod install 一下:\n\n\n\n```shell\ncd ios\npod install\n```\n\n2. xcode 需要设置下权限, 在info.plist 里面通过➕按钮添加一个键\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742057752-d6a70aba-815c-45b1-bbcf-f9f3c4a1d9ed.png)\n\n\n\n3. 选择 Privacy - Photo Library Additions Usage Description\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742149363-9275c09a-b7aa-445b-83ea-80e11ab2c160.png)\n\n4. 重启项目","source":"_posts/react-native-ios保存图片到相册.md","raw":"---\ntitle: react-native-ios保存图片到相册\ndate: 2019-11-23 10:41:17\ntags: ['ios', 'react-native', '保存到相册']\n---\n\n1. 现在CameraRoll 已经独立到一个库中了,需要单独安装:\n\n\n\n```js\nnpm install @react-native-community/cameraroll --save\n```\n\n- react-native 目前已经可以自动link 一般不需要再手动link\n\n- 如果此时不行的化,需要pod install 一下:\n\n\n\n```shell\ncd ios\npod install\n```\n\n2. xcode 需要设置下权限, 在info.plist 里面通过➕按钮添加一个键\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742057752-d6a70aba-815c-45b1-bbcf-f9f3c4a1d9ed.png)\n\n\n\n3. 选择 Privacy - Photo Library Additions Usage Description\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1569742149363-9275c09a-b7aa-445b-83ea-80e11ab2c160.png)\n\n4. 重启项目","slug":"react-native-ios保存图片到相册","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls19c000tsi35fwpkkfi1","content":"<ol>\n<li>现在CameraRoll 已经独立到一个库中了,需要单独安装:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @react-native-community/cameraroll --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>react-native 目前已经可以自动link 一般不需要再手动link</p>\n</li>\n<li><p>如果此时不行的化,需要pod install 一下:</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ios</span><br><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>xcode 需要设置下权限, 在info.plist 里面通过➕按钮添加一个键</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1569742057752-d6a70aba-815c-45b1-bbcf-f9f3c4a1d9ed.png\" alt=\"图片.png\"></p>\n<ol start=\"3\">\n<li>选择 Privacy - Photo Library Additions Usage Description</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1569742149363-9275c09a-b7aa-445b-83ea-80e11ab2c160.png\" alt=\"图片.png\"></p>\n<ol start=\"4\">\n<li>重启项目</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li>现在CameraRoll 已经独立到一个库中了,需要单独安装:</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @react-native-community/cameraroll --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>react-native 目前已经可以自动link 一般不需要再手动link</p>\n</li>\n<li><p>如果此时不行的化,需要pod install 一下:</p>\n</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ios</span><br><span class=\"line\">pod install</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>xcode 需要设置下权限, 在info.plist 里面通过➕按钮添加一个键</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1569742057752-d6a70aba-815c-45b1-bbcf-f9f3c4a1d9ed.png\" alt=\"图片.png\"></p>\n<ol start=\"3\">\n<li>选择 Privacy - Photo Library Additions Usage Description</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1569742149363-9275c09a-b7aa-445b-83ea-80e11ab2c160.png\" alt=\"图片.png\"></p>\n<ol start=\"4\">\n<li>重启项目</li>\n</ol>\n"},{"title":"react-native ios环境搭建 关于pod的坑","date":"2019-09-08T01:56:12.000Z","_content":"\nhttps://reactnative.cn/docs/getting-started/\n\n## 坑\n\n\n\nios 在init项目的时候,第一次安装会遇见安装到info Installing required CocoaPods dependencies这个地方就卡住了不动了,这应该是网路原因导致的,解决办法:\n\n\n\n1. 安装cocoapods 这个安装需要ruby ,mac自带ruby 所以只需要用sudo gem update —system 更新下\n\n```\nsudo gem install cocoapods\n```\n\n1. 进入到项目里的ios目录下有个文件podfile,看到此文件后,执行 pod install 然后会提示你用pod install —repo-update\n2. 如果还是报错就再输入他提示的命令\n3. 基本上就可以了,然后可以重新init项目就不会卡在那里了\n\n\n\n## 安装依赖(以下来自react-native文档)\n\n必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 Xcode。\n\n虽然你可以使用`任何编辑器`来开发应用（编写 js 代码），但你仍然必须安装 Xcode 来获得编译 iOS 应用所需的工具和环境。\n\n### Node, Watchman\n\n我们推荐使用[Homebrew](http://brew.sh/)来安装 Node 和 Watchman。在命令行中执行下列命令安装：\n\n```\nbrew install node\nbrew install watchman\n```\n\n如果你已经安装了 Node，请检查其版本是否在 v10 以上。安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n> 注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n```\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n\n[Watchman](https://facebook.github.io/watchman)则是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。\n\n### Yarn、React Native 的命令行工具（react-native-cli）\n\n[Yarn](http://yarnpkg.com/)是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n```\nnpm install -g yarn react-native-cli\n```\n\n安装完 yarn 后同理也要设置镜像源：\n\n```\nyarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global\n```\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用`yarn`代替`npm install`命令，用`yarn add 某第三方库名`代替`npm install 某第三方库名`。\n\n### Xcode\n\nReact Native 目前需要[Xcode](https://developer.apple.com/xcode/downloads/) 9.4 或更高版本。你可以通过 App Store 或是到[Apple 开发者官网](https://developer.apple.com/xcode/downloads/)上下载。这一步骤会同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。\n\n#### Xcode 的命令行工具\n\n启动 Xcode，并在`Xcode | Preferences | Locations`菜单中检查一下是否装有某个版本的`Command Line Tools`。Xcode 的命令行工具中包含一些必须的工具，比如`git`等。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397089-7a6e4285-8f48-4710-94dd-71a3d8bc3435.png)\n\n## 创建新项目\n\n使用 React Native 命令行工具来创建一个名为\"AwesomeProject\"的新项目：\n\n**！！！注意！！！**：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人`无法运行iOS项目`！！！中文网在论坛中提供了这些库的[国内下载链接](http://bbs.reactnative.cn/topic/4301/)。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建`0.44.3`的版本。\n\n```\nreact-native init AwesomeProject\n```\n\n> 提示：你可以使用`--version`参数（注意是`两`个杠）创建指定版本的项目。例如`react-native init MyApp --version 0.44.3`。注意版本号必须精确到两个小数点。\n\n如果你是想把 React Native 集成到现有的原生项目中，则步骤完全不同，请参考[集成到现有原生应用](https://reactnative.cn/docs/integration-with-existing-apps)。\n\n## 编译并运行 React Native 应用\n\n在你的项目目录中运行`react-native run-ios`：\n\n```\ncd AwesomeProject\nreact-native run-ios\n```\n\n> 提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。\n\n很快就应该能看到 iOS 模拟器自动启动并运行你的项目。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397051-56e1d04c-a7be-456d-bca8-320b5ba28775.png)\n\n`react-native run-ios`只是运行应用的方式之一。你也可以在 Xcode 或是[Nuclide](https://nuclide.io/)中直接运行应用。\n\n> 如果你无法正常运行，先回头`仔细对照文档检查`，然后可以看看论坛的[求助专区](http://bbs.reactnative.cn/category/4)。\n\n### 在真机上运行\n\n上面的命令会自动在 iOS 模拟器上运行应用，如果你想在真机上运行，则请阅读[在设备上运行](https://reactnative.cn/docs/running-on-device)这篇文档。\n\n### 修改项目\n\n现在你已经成功运行了项目，我们可以开始尝试动手改一改了：\n\n- 使用你喜欢的编辑器打开`App.js`并随便改上几行。\n- 在 iOS 模拟器中按下`⌘-R`就可以刷新 APP 并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard 选项是否选中开启）\n\n### 完成了！\n\n恭喜！你已经成功运行并修改了你的第一个 React Native 应用。","source":"_posts/react-native-ios环境搭建.md","raw":"---\ntitle: react-native ios环境搭建 关于pod的坑\ndate: 2019-09-08 09:56:12\ntags: [iOS, react-native, 环境搭建, pod]\n---\n\nhttps://reactnative.cn/docs/getting-started/\n\n## 坑\n\n\n\nios 在init项目的时候,第一次安装会遇见安装到info Installing required CocoaPods dependencies这个地方就卡住了不动了,这应该是网路原因导致的,解决办法:\n\n\n\n1. 安装cocoapods 这个安装需要ruby ,mac自带ruby 所以只需要用sudo gem update —system 更新下\n\n```\nsudo gem install cocoapods\n```\n\n1. 进入到项目里的ios目录下有个文件podfile,看到此文件后,执行 pod install 然后会提示你用pod install —repo-update\n2. 如果还是报错就再输入他提示的命令\n3. 基本上就可以了,然后可以重新init项目就不会卡在那里了\n\n\n\n## 安装依赖(以下来自react-native文档)\n\n必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 Xcode。\n\n虽然你可以使用`任何编辑器`来开发应用（编写 js 代码），但你仍然必须安装 Xcode 来获得编译 iOS 应用所需的工具和环境。\n\n### Node, Watchman\n\n我们推荐使用[Homebrew](http://brew.sh/)来安装 Node 和 Watchman。在命令行中执行下列命令安装：\n\n```\nbrew install node\nbrew install watchman\n```\n\n如果你已经安装了 Node，请检查其版本是否在 v10 以上。安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。\n\n> 注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！\n\n```\nnpm config set registry https://registry.npm.taobao.org --global\nnpm config set disturl https://npm.taobao.org/dist --global\n```\n\n[Watchman](https://facebook.github.io/watchman)则是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。\n\n### Yarn、React Native 的命令行工具（react-native-cli）\n\n[Yarn](http://yarnpkg.com/)是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。\n\n```\nnpm install -g yarn react-native-cli\n```\n\n安装完 yarn 后同理也要设置镜像源：\n\n```\nyarn config set registry https://registry.npm.taobao.org --global\nyarn config set disturl https://npm.taobao.org/dist --global\n```\n\n安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用`yarn`代替`npm install`命令，用`yarn add 某第三方库名`代替`npm install 某第三方库名`。\n\n### Xcode\n\nReact Native 目前需要[Xcode](https://developer.apple.com/xcode/downloads/) 9.4 或更高版本。你可以通过 App Store 或是到[Apple 开发者官网](https://developer.apple.com/xcode/downloads/)上下载。这一步骤会同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。\n\n#### Xcode 的命令行工具\n\n启动 Xcode，并在`Xcode | Preferences | Locations`菜单中检查一下是否装有某个版本的`Command Line Tools`。Xcode 的命令行工具中包含一些必须的工具，比如`git`等。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397089-7a6e4285-8f48-4710-94dd-71a3d8bc3435.png)\n\n## 创建新项目\n\n使用 React Native 命令行工具来创建一个名为\"AwesomeProject\"的新项目：\n\n**！！！注意！！！**：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人`无法运行iOS项目`！！！中文网在论坛中提供了这些库的[国内下载链接](http://bbs.reactnative.cn/topic/4301/)。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建`0.44.3`的版本。\n\n```\nreact-native init AwesomeProject\n```\n\n> 提示：你可以使用`--version`参数（注意是`两`个杠）创建指定版本的项目。例如`react-native init MyApp --version 0.44.3`。注意版本号必须精确到两个小数点。\n\n如果你是想把 React Native 集成到现有的原生项目中，则步骤完全不同，请参考[集成到现有原生应用](https://reactnative.cn/docs/integration-with-existing-apps)。\n\n## 编译并运行 React Native 应用\n\n在你的项目目录中运行`react-native run-ios`：\n\n```\ncd AwesomeProject\nreact-native run-ios\n```\n\n> 提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。\n\n很快就应该能看到 iOS 模拟器自动启动并运行你的项目。\n\n![img](https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397051-56e1d04c-a7be-456d-bca8-320b5ba28775.png)\n\n`react-native run-ios`只是运行应用的方式之一。你也可以在 Xcode 或是[Nuclide](https://nuclide.io/)中直接运行应用。\n\n> 如果你无法正常运行，先回头`仔细对照文档检查`，然后可以看看论坛的[求助专区](http://bbs.reactnative.cn/category/4)。\n\n### 在真机上运行\n\n上面的命令会自动在 iOS 模拟器上运行应用，如果你想在真机上运行，则请阅读[在设备上运行](https://reactnative.cn/docs/running-on-device)这篇文档。\n\n### 修改项目\n\n现在你已经成功运行了项目，我们可以开始尝试动手改一改了：\n\n- 使用你喜欢的编辑器打开`App.js`并随便改上几行。\n- 在 iOS 模拟器中按下`⌘-R`就可以刷新 APP 并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard 选项是否选中开启）\n\n### 完成了！\n\n恭喜！你已经成功运行并修改了你的第一个 React Native 应用。","slug":"react-native-ios环境搭建","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls19j000vsi35jzpt4b56","content":"<p><a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/getting-started/</a></p>\n<h2 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h2><p>ios 在init项目的时候,第一次安装会遇见安装到info Installing required CocoaPods dependencies这个地方就卡住了不动了,这应该是网路原因导致的,解决办法:</p>\n<ol>\n<li>安装cocoapods 这个安装需要ruby ,mac自带ruby 所以只需要用sudo gem update —system 更新下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>进入到项目里的ios目录下有个文件podfile,看到此文件后,执行 pod install 然后会提示你用pod install —repo-update</li>\n<li>如果还是报错就再输入他提示的命令</li>\n<li>基本上就可以了,然后可以重新init项目就不会卡在那里了</li>\n</ol>\n<h2 id=\"安装依赖-以下来自react-native文档\"><a href=\"#安装依赖-以下来自react-native文档\" class=\"headerlink\" title=\"安装依赖(以下来自react-native文档)\"></a>安装依赖(以下来自react-native文档)</h2><p>必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 Xcode。</p>\n<p>虽然你可以使用<code>任何编辑器</code>来开发应用（编写 js 代码），但你仍然必须安装 Xcode 来获得编译 iOS 应用所需的工具和环境。</p>\n<h3 id=\"Node-Watchman\"><a href=\"#Node-Watchman\" class=\"headerlink\" title=\"Node, Watchman\"></a>Node, Watchman</h3><p>我们推荐使用<a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>来安装 Node 和 Watchman。在命令行中执行下列命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br><span class=\"line\">brew install watchman</span><br></pre></td></tr></table></figure>\n\n<p>如果你已经安装了 Node，请检查其版本是否在 v10 以上。安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。</p>\n<blockquote>\n<p>注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org --global</span><br><span class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://facebook.github.io/watchman\" target=\"_blank\" rel=\"noopener\">Watchman</a>则是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。</p>\n<h3 id=\"Yarn、React-Native-的命令行工具（react-native-cli）\"><a href=\"#Yarn、React-Native-的命令行工具（react-native-cli）\" class=\"headerlink\" title=\"Yarn、React Native 的命令行工具（react-native-cli）\"></a>Yarn、React Native 的命令行工具（react-native-cli）</h3><p><a href=\"http://yarnpkg.com/\" target=\"_blank\" rel=\"noopener\">Yarn</a>是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完 yarn 后同理也要设置镜像源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config set registry https://registry.npm.taobao.org --global</span><br><span class=\"line\">yarn config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure>\n\n<p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用<code>yarn</code>代替<code>npm install</code>命令，用<code>yarn add 某第三方库名</code>代替<code>npm install 某第三方库名</code>。</p>\n<h3 id=\"Xcode\"><a href=\"#Xcode\" class=\"headerlink\" title=\"Xcode\"></a>Xcode</h3><p>React Native 目前需要<a href=\"https://developer.apple.com/xcode/downloads/\" target=\"_blank\" rel=\"noopener\">Xcode</a> 9.4 或更高版本。你可以通过 App Store 或是到<a href=\"https://developer.apple.com/xcode/downloads/\" target=\"_blank\" rel=\"noopener\">Apple 开发者官网</a>上下载。这一步骤会同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。</p>\n<h4 id=\"Xcode-的命令行工具\"><a href=\"#Xcode-的命令行工具\" class=\"headerlink\" title=\"Xcode 的命令行工具\"></a>Xcode 的命令行工具</h4><p>启动 Xcode，并在<code>Xcode | Preferences | Locations</code>菜单中检查一下是否装有某个版本的<code>Command Line Tools</code>。Xcode 的命令行工具中包含一些必须的工具，比如<code>git</code>等。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397089-7a6e4285-8f48-4710-94dd-71a3d8bc3435.png\" alt=\"img\"></p>\n<h2 id=\"创建新项目\"><a href=\"#创建新项目\" class=\"headerlink\" title=\"创建新项目\"></a>创建新项目</h2><p>使用 React Native 命令行工具来创建一个名为”AwesomeProject”的新项目：</p>\n<p><strong>！！！注意！！！</strong>：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人<code>无法运行iOS项目</code>！！！中文网在论坛中提供了这些库的<a href=\"http://bbs.reactnative.cn/topic/4301/\" target=\"_blank\" rel=\"noopener\">国内下载链接</a>。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建<code>0.44.3</code>的版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init AwesomeProject</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：你可以使用<code>--version</code>参数（注意是<code>两</code>个杠）创建指定版本的项目。例如<code>react-native init MyApp --version 0.44.3</code>。注意版本号必须精确到两个小数点。</p>\n</blockquote>\n<p>如果你是想把 React Native 集成到现有的原生项目中，则步骤完全不同，请参考<a href=\"https://reactnative.cn/docs/integration-with-existing-apps\" target=\"_blank\" rel=\"noopener\">集成到现有原生应用</a>。</p>\n<h2 id=\"编译并运行-React-Native-应用\"><a href=\"#编译并运行-React-Native-应用\" class=\"headerlink\" title=\"编译并运行 React Native 应用\"></a>编译并运行 React Native 应用</h2><p>在你的项目目录中运行<code>react-native run-ios</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd AwesomeProject</span><br><span class=\"line\">react-native run-ios</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。</p>\n</blockquote>\n<p>很快就应该能看到 iOS 模拟器自动启动并运行你的项目。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397051-56e1d04c-a7be-456d-bca8-320b5ba28775.png\" alt=\"img\"></p>\n<p><code>react-native run-ios</code>只是运行应用的方式之一。你也可以在 Xcode 或是<a href=\"https://nuclide.io/\" target=\"_blank\" rel=\"noopener\">Nuclide</a>中直接运行应用。</p>\n<blockquote>\n<p>如果你无法正常运行，先回头<code>仔细对照文档检查</code>，然后可以看看论坛的<a href=\"http://bbs.reactnative.cn/category/4\" target=\"_blank\" rel=\"noopener\">求助专区</a>。</p>\n</blockquote>\n<h3 id=\"在真机上运行\"><a href=\"#在真机上运行\" class=\"headerlink\" title=\"在真机上运行\"></a>在真机上运行</h3><p>上面的命令会自动在 iOS 模拟器上运行应用，如果你想在真机上运行，则请阅读<a href=\"https://reactnative.cn/docs/running-on-device\" target=\"_blank\" rel=\"noopener\">在设备上运行</a>这篇文档。</p>\n<h3 id=\"修改项目\"><a href=\"#修改项目\" class=\"headerlink\" title=\"修改项目\"></a>修改项目</h3><p>现在你已经成功运行了项目，我们可以开始尝试动手改一改了：</p>\n<ul>\n<li>使用你喜欢的编辑器打开<code>App.js</code>并随便改上几行。</li>\n<li>在 iOS 模拟器中按下<code>⌘-R</code>就可以刷新 APP 并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard 选项是否选中开启）</li>\n</ul>\n<h3 id=\"完成了！\"><a href=\"#完成了！\" class=\"headerlink\" title=\"完成了！\"></a>完成了！</h3><p>恭喜！你已经成功运行并修改了你的第一个 React Native 应用。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><a href=\"https://reactnative.cn/docs/getting-started/\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/getting-started/</a></p>\n<h2 id=\"坑\"><a href=\"#坑\" class=\"headerlink\" title=\"坑\"></a>坑</h2><p>ios 在init项目的时候,第一次安装会遇见安装到info Installing required CocoaPods dependencies这个地方就卡住了不动了,这应该是网路原因导致的,解决办法:</p>\n<ol>\n<li>安装cocoapods 这个安装需要ruby ,mac自带ruby 所以只需要用sudo gem update —system 更新下</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo gem install cocoapods</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>进入到项目里的ios目录下有个文件podfile,看到此文件后,执行 pod install 然后会提示你用pod install —repo-update</li>\n<li>如果还是报错就再输入他提示的命令</li>\n<li>基本上就可以了,然后可以重新init项目就不会卡在那里了</li>\n</ol>\n<h2 id=\"安装依赖-以下来自react-native文档\"><a href=\"#安装依赖-以下来自react-native文档\" class=\"headerlink\" title=\"安装依赖(以下来自react-native文档)\"></a>安装依赖(以下来自react-native文档)</h2><p>必须安装的依赖有：Node、Watchman 和 React Native 命令行工具以及 Xcode。</p>\n<p>虽然你可以使用<code>任何编辑器</code>来开发应用（编写 js 代码），但你仍然必须安装 Xcode 来获得编译 iOS 应用所需的工具和环境。</p>\n<h3 id=\"Node-Watchman\"><a href=\"#Node-Watchman\" class=\"headerlink\" title=\"Node, Watchman\"></a>Node, Watchman</h3><p>我们推荐使用<a href=\"http://brew.sh/\" target=\"_blank\" rel=\"noopener\">Homebrew</a>来安装 Node 和 Watchman。在命令行中执行下列命令安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew install node</span><br><span class=\"line\">brew install watchman</span><br></pre></td></tr></table></figure>\n\n<p>如果你已经安装了 Node，请检查其版本是否在 v10 以上。安装完 Node 后建议设置 npm 镜像以加速后面的过程（或使用科学上网工具）。</p>\n<blockquote>\n<p>注意：不要使用 cnpm！cnpm 安装的模块路径比较奇怪，packager 不能正常识别！</p>\n</blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm config set registry https://registry.npm.taobao.org --global</span><br><span class=\"line\">npm config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://facebook.github.io/watchman\" target=\"_blank\" rel=\"noopener\">Watchman</a>则是由 Facebook 提供的监视文件系统变更的工具。安装此工具可以提高开发时的性能（packager 可以快速捕捉文件的变化从而实现实时刷新）。</p>\n<h3 id=\"Yarn、React-Native-的命令行工具（react-native-cli）\"><a href=\"#Yarn、React-Native-的命令行工具（react-native-cli）\" class=\"headerlink\" title=\"Yarn、React Native 的命令行工具（react-native-cli）\"></a>Yarn、React Native 的命令行工具（react-native-cli）</h3><p><a href=\"http://yarnpkg.com/\" target=\"_blank\" rel=\"noopener\">Yarn</a>是 Facebook 提供的替代 npm 的工具，可以加速 node 模块的下载。React Native 的命令行工具用于执行创建、初始化、更新项目、运行打包服务（packager）等任务。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g yarn react-native-cli</span><br></pre></td></tr></table></figure>\n\n<p>安装完 yarn 后同理也要设置镜像源：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn config set registry https://registry.npm.taobao.org --global</span><br><span class=\"line\">yarn config set disturl https://npm.taobao.org/dist --global</span><br></pre></td></tr></table></figure>\n\n<p>安装完 yarn 之后就可以用 yarn 代替 npm 了，例如用<code>yarn</code>代替<code>npm install</code>命令，用<code>yarn add 某第三方库名</code>代替<code>npm install 某第三方库名</code>。</p>\n<h3 id=\"Xcode\"><a href=\"#Xcode\" class=\"headerlink\" title=\"Xcode\"></a>Xcode</h3><p>React Native 目前需要<a href=\"https://developer.apple.com/xcode/downloads/\" target=\"_blank\" rel=\"noopener\">Xcode</a> 9.4 或更高版本。你可以通过 App Store 或是到<a href=\"https://developer.apple.com/xcode/downloads/\" target=\"_blank\" rel=\"noopener\">Apple 开发者官网</a>上下载。这一步骤会同时安装 Xcode IDE、Xcode 的命令行工具和 iOS 模拟器。</p>\n<h4 id=\"Xcode-的命令行工具\"><a href=\"#Xcode-的命令行工具\" class=\"headerlink\" title=\"Xcode 的命令行工具\"></a>Xcode 的命令行工具</h4><p>启动 Xcode，并在<code>Xcode | Preferences | Locations</code>菜单中检查一下是否装有某个版本的<code>Command Line Tools</code>。Xcode 的命令行工具中包含一些必须的工具，比如<code>git</code>等。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397089-7a6e4285-8f48-4710-94dd-71a3d8bc3435.png\" alt=\"img\"></p>\n<h2 id=\"创建新项目\"><a href=\"#创建新项目\" class=\"headerlink\" title=\"创建新项目\"></a>创建新项目</h2><p>使用 React Native 命令行工具来创建一个名为”AwesomeProject”的新项目：</p>\n<p><strong>！！！注意！！！</strong>：init 命令默认会创建最新的版本，而目前最新的 0.45 及以上版本需要下载 boost 等几个第三方库编译。这些库在国内即便翻墙也很难下载成功，导致很多人<code>无法运行iOS项目</code>！！！中文网在论坛中提供了这些库的<a href=\"http://bbs.reactnative.cn/topic/4301/\" target=\"_blank\" rel=\"noopener\">国内下载链接</a>。如果你嫌麻烦，又没有对新版本的需求，那么可以暂时创建<code>0.44.3</code>的版本。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">react-native init AwesomeProject</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：你可以使用<code>--version</code>参数（注意是<code>两</code>个杠）创建指定版本的项目。例如<code>react-native init MyApp --version 0.44.3</code>。注意版本号必须精确到两个小数点。</p>\n</blockquote>\n<p>如果你是想把 React Native 集成到现有的原生项目中，则步骤完全不同，请参考<a href=\"https://reactnative.cn/docs/integration-with-existing-apps\" target=\"_blank\" rel=\"noopener\">集成到现有原生应用</a>。</p>\n<h2 id=\"编译并运行-React-Native-应用\"><a href=\"#编译并运行-React-Native-应用\" class=\"headerlink\" title=\"编译并运行 React Native 应用\"></a>编译并运行 React Native 应用</h2><p>在你的项目目录中运行<code>react-native run-ios</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd AwesomeProject</span><br><span class=\"line\">react-native run-ios</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>提示：如果 run-ios 无法正常运行，请使用 Xcode 运行来查看具体错误（run-ios 的报错没有任何具体信息）。</p>\n</blockquote>\n<p>很快就应该能看到 iOS 模拟器自动启动并运行你的项目。</p>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1565006397051-56e1d04c-a7be-456d-bca8-320b5ba28775.png\" alt=\"img\"></p>\n<p><code>react-native run-ios</code>只是运行应用的方式之一。你也可以在 Xcode 或是<a href=\"https://nuclide.io/\" target=\"_blank\" rel=\"noopener\">Nuclide</a>中直接运行应用。</p>\n<blockquote>\n<p>如果你无法正常运行，先回头<code>仔细对照文档检查</code>，然后可以看看论坛的<a href=\"http://bbs.reactnative.cn/category/4\" target=\"_blank\" rel=\"noopener\">求助专区</a>。</p>\n</blockquote>\n<h3 id=\"在真机上运行\"><a href=\"#在真机上运行\" class=\"headerlink\" title=\"在真机上运行\"></a>在真机上运行</h3><p>上面的命令会自动在 iOS 模拟器上运行应用，如果你想在真机上运行，则请阅读<a href=\"https://reactnative.cn/docs/running-on-device\" target=\"_blank\" rel=\"noopener\">在设备上运行</a>这篇文档。</p>\n<h3 id=\"修改项目\"><a href=\"#修改项目\" class=\"headerlink\" title=\"修改项目\"></a>修改项目</h3><p>现在你已经成功运行了项目，我们可以开始尝试动手改一改了：</p>\n<ul>\n<li>使用你喜欢的编辑器打开<code>App.js</code>并随便改上几行。</li>\n<li>在 iOS 模拟器中按下<code>⌘-R</code>就可以刷新 APP 并看到你的最新修改！（如果没有反应，请检查模拟器的 Hardware 菜单中，connect hardware keyboard 选项是否选中开启）</li>\n</ul>\n<h3 id=\"完成了！\"><a href=\"#完成了！\" class=\"headerlink\" title=\"完成了！\"></a>完成了！</h3><p>恭喜！你已经成功运行并修改了你的第一个 React Native 应用。</p>\n"},{"title":"react-native webview的坑及(RNCWKWebView\" was not found in the UIManager)错误","date":"2019-09-08T02:47:27.000Z","_content":"\n首先 webview已经从 react-native 移到单独模块 react-native-webview;\n\n### 使用:\n\n1. 安装 yarn add react-native-webview;\n2. 运行 react-native link react-native-webview(native0.6以后会自动link 不知道可不可以 )\n\n### 如果报错:\n\n> ```\n> Invariant Violation: requireNativeComponent: \"RNCWKWebView\" was not found in the UIManager.\n> ```\n\n1. cd  ios\n2. 运行 pod install\n3. 重新运行 react-native run-ios\n\n","source":"_posts/react-native-webview的坑.md","raw":"---\ntitle: react-native webview的坑及(RNCWKWebView\" was not found in the UIManager)错误\ndate: 2019-09-08 10:47:27\ntags: [react-native, webview, RNCWKWebView\" was not found in the UIManager]\n---\n\n首先 webview已经从 react-native 移到单独模块 react-native-webview;\n\n### 使用:\n\n1. 安装 yarn add react-native-webview;\n2. 运行 react-native link react-native-webview(native0.6以后会自动link 不知道可不可以 )\n\n### 如果报错:\n\n> ```\n> Invariant Violation: requireNativeComponent: \"RNCWKWebView\" was not found in the UIManager.\n> ```\n\n1. cd  ios\n2. 运行 pod install\n3. 重新运行 react-native run-ios\n\n","slug":"react-native-webview的坑","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls19p000wsi35k9at7v98","content":"<p>首先 webview已经从 react-native 移到单独模块 react-native-webview;</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用:\"></a>使用:</h3><ol>\n<li>安装 yarn add react-native-webview;</li>\n<li>运行 react-native link react-native-webview(native0.6以后会自动link 不知道可不可以 )</li>\n</ol>\n<h3 id=\"如果报错\"><a href=\"#如果报错\" class=\"headerlink\" title=\"如果报错:\"></a>如果报错:</h3><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Invariant Violation: requireNativeComponent: &quot;RNCWKWebView&quot; was not found in the UIManager.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li>cd  ios</li>\n<li>运行 pod install</li>\n<li>重新运行 react-native run-ios</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>首先 webview已经从 react-native 移到单独模块 react-native-webview;</p>\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用:\"></a>使用:</h3><ol>\n<li>安装 yarn add react-native-webview;</li>\n<li>运行 react-native link react-native-webview(native0.6以后会自动link 不知道可不可以 )</li>\n</ol>\n<h3 id=\"如果报错\"><a href=\"#如果报错\" class=\"headerlink\" title=\"如果报错:\"></a>如果报错:</h3><blockquote>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; Invariant Violation: requireNativeComponent: &quot;RNCWKWebView&quot; was not found in the UIManager.</span><br><span class=\"line\">&gt;</span><br></pre></td></tr></table></figure>\n</blockquote>\n<ol>\n<li>cd  ios</li>\n<li>运行 pod install</li>\n<li>重新运行 react-native run-ios</li>\n</ol>\n"},{"title":"react-native 顶部和底部bar的高度及iphone的安全区域","date":"2019-09-08T02:32:33.000Z","_content":"\n## react-navigtion 底部tab的高度默认为49\n\n![图片.png](https://s2.ax1x.com/2019/09/10/napM5Q.png)\n\n## ipone的安全区域 顶部和底部bar的高度\n\n- ios的statusbar 高度: iPhonex之前20 之后34\n\n- phonex的底部要空出34 空间\n\n![图片.png](https://s2.ax1x.com/2019/09/10/naplCj.png)\n\n链接 https://zhuanlan.zhihu.com/p/46868724\n\n\n\n底部tab颜色可以通过header添加paddingTop 设置颜色 以保持色彩统一","source":"_posts/react-native-顶部和底部bar的高度.md","raw":"---\ntitle: react-native 顶部和底部bar的高度及iphone的安全区域\ndate: 2019-09-08 10:32:33\ntags: [react, native, bar, ios, 高度]\n---\n\n## react-navigtion 底部tab的高度默认为49\n\n![图片.png](https://s2.ax1x.com/2019/09/10/napM5Q.png)\n\n## ipone的安全区域 顶部和底部bar的高度\n\n- ios的statusbar 高度: iPhonex之前20 之后34\n\n- phonex的底部要空出34 空间\n\n![图片.png](https://s2.ax1x.com/2019/09/10/naplCj.png)\n\n链接 https://zhuanlan.zhihu.com/p/46868724\n\n\n\n底部tab颜色可以通过header添加paddingTop 设置颜色 以保持色彩统一","slug":"react-native-顶部和底部bar的高度","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1a0000ysi35psnbdxpx","content":"<h2 id=\"react-navigtion-底部tab的高度默认为49\"><a href=\"#react-navigtion-底部tab的高度默认为49\" class=\"headerlink\" title=\"react-navigtion 底部tab的高度默认为49\"></a>react-navigtion 底部tab的高度默认为49</h2><p><img src=\"https://s2.ax1x.com/2019/09/10/napM5Q.png\" alt=\"图片.png\"></p>\n<h2 id=\"ipone的安全区域-顶部和底部bar的高度\"><a href=\"#ipone的安全区域-顶部和底部bar的高度\" class=\"headerlink\" title=\"ipone的安全区域 顶部和底部bar的高度\"></a>ipone的安全区域 顶部和底部bar的高度</h2><ul>\n<li><p>ios的statusbar 高度: iPhonex之前20 之后34</p>\n</li>\n<li><p>phonex的底部要空出34 空间</p>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/09/10/naplCj.png\" alt=\"图片.png\"></p>\n<p>链接 <a href=\"https://zhuanlan.zhihu.com/p/46868724\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/46868724</a></p>\n<p>底部tab颜色可以通过header添加paddingTop 设置颜色 以保持色彩统一</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"react-navigtion-底部tab的高度默认为49\"><a href=\"#react-navigtion-底部tab的高度默认为49\" class=\"headerlink\" title=\"react-navigtion 底部tab的高度默认为49\"></a>react-navigtion 底部tab的高度默认为49</h2><p><img src=\"https://s2.ax1x.com/2019/09/10/napM5Q.png\" alt=\"图片.png\"></p>\n<h2 id=\"ipone的安全区域-顶部和底部bar的高度\"><a href=\"#ipone的安全区域-顶部和底部bar的高度\" class=\"headerlink\" title=\"ipone的安全区域 顶部和底部bar的高度\"></a>ipone的安全区域 顶部和底部bar的高度</h2><ul>\n<li><p>ios的statusbar 高度: iPhonex之前20 之后34</p>\n</li>\n<li><p>phonex的底部要空出34 空间</p>\n</li>\n</ul>\n<p><img src=\"https://s2.ax1x.com/2019/09/10/naplCj.png\" alt=\"图片.png\"></p>\n<p>链接 <a href=\"https://zhuanlan.zhihu.com/p/46868724\" target=\"_blank\" rel=\"noopener\">https://zhuanlan.zhihu.com/p/46868724</a></p>\n<p>底部tab颜色可以通过header添加paddingTop 设置颜色 以保持色彩统一</p>\n"},{"title":"react-router通过js导航","date":"2019-09-08T07:19:22.000Z","_content":"\n\n\n```js\nimport { browserHistory } from 'react-router'  //引入路由函数\n\nbrowserHistory.push('/some/path')   //js方式跳转\n```\n\n或者使用 hashHistory 代替 browserHistory\n\n\n\n### 1.引入包 \n\n```js\nimport {hashHistory} from 'React-router'\n```\n\n### 2.跳转传值\n\n```js\nhandleClick = (value) => {\n        hashHistory.push({\n            pathname: 'message/detailMessage',\n            query: {\n                title:value.title,\n                time:value.time,\n                text:value.text\n            },\n        })\n    }\n```\n\n### 3.接收值\n\n```js\nconsole.info(this.props.location.query.title)\nconsole.info(this.props.location.query.time)\nconsole.info(this.props.location.query.text)\n```\n\n","source":"_posts/react-router通过js导航.md","raw":"---\ntitle: react-router通过js导航\ndate: 2019-09-08 15:19:22\ntags: [router, js, 导航]\n---\n\n\n\n```js\nimport { browserHistory } from 'react-router'  //引入路由函数\n\nbrowserHistory.push('/some/path')   //js方式跳转\n```\n\n或者使用 hashHistory 代替 browserHistory\n\n\n\n### 1.引入包 \n\n```js\nimport {hashHistory} from 'React-router'\n```\n\n### 2.跳转传值\n\n```js\nhandleClick = (value) => {\n        hashHistory.push({\n            pathname: 'message/detailMessage',\n            query: {\n                title:value.title,\n                time:value.time,\n                text:value.text\n            },\n        })\n    }\n```\n\n### 3.接收值\n\n```js\nconsole.info(this.props.location.query.title)\nconsole.info(this.props.location.query.time)\nconsole.info(this.props.location.query.text)\n```\n\n","slug":"react-router通过js导航","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1a70010si35xxh7t40q","content":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>  <span class=\"comment\">//引入路由函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">browserHistory.push(<span class=\"string\">'/some/path'</span>)   <span class=\"comment\">//js方式跳转</span></span><br></pre></td></tr></table></figure>\n\n<p>或者使用 hashHistory 代替 browserHistory</p>\n<h3 id=\"1-引入包\"><a href=\"#1-引入包\" class=\"headerlink\" title=\"1.引入包\"></a>1.引入包</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;hashHistory&#125; <span class=\"keyword\">from</span> <span class=\"string\">'React-router'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-跳转传值\"><a href=\"#2-跳转传值\" class=\"headerlink\" title=\"2.跳转传值\"></a>2.跳转传值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleClick = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        hashHistory.push(&#123;</span><br><span class=\"line\">            pathname: <span class=\"string\">'message/detailMessage'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                title:value.title,</span><br><span class=\"line\">                time:value.time,</span><br><span class=\"line\">                text:value.text</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-接收值\"><a href=\"#3-接收值\" class=\"headerlink\" title=\"3.接收值\"></a>3.接收值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.props.location.query.title)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.props.location.query.time)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.props.location.query.text)</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; browserHistory &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-router'</span>  <span class=\"comment\">//引入路由函数</span></span><br><span class=\"line\"></span><br><span class=\"line\">browserHistory.push(<span class=\"string\">'/some/path'</span>)   <span class=\"comment\">//js方式跳转</span></span><br></pre></td></tr></table></figure>\n\n<p>或者使用 hashHistory 代替 browserHistory</p>\n<h3 id=\"1-引入包\"><a href=\"#1-引入包\" class=\"headerlink\" title=\"1.引入包\"></a>1.引入包</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123;hashHistory&#125; <span class=\"keyword\">from</span> <span class=\"string\">'React-router'</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"2-跳转传值\"><a href=\"#2-跳转传值\" class=\"headerlink\" title=\"2.跳转传值\"></a>2.跳转传值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">handleClick = <span class=\"function\">(<span class=\"params\">value</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        hashHistory.push(&#123;</span><br><span class=\"line\">            pathname: <span class=\"string\">'message/detailMessage'</span>,</span><br><span class=\"line\">            query: &#123;</span><br><span class=\"line\">                title:value.title,</span><br><span class=\"line\">                time:value.time,</span><br><span class=\"line\">                text:value.text</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"3-接收值\"><a href=\"#3-接收值\" class=\"headerlink\" title=\"3.接收值\"></a>3.接收值</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.props.location.query.title)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.props.location.query.time)</span><br><span class=\"line\"><span class=\"built_in\">console</span>.info(<span class=\"keyword\">this</span>.props.location.query.text)</span><br></pre></td></tr></table></figure>\n\n"},{"title":"react中getDefaultProps和getInitialState的区别是什么","date":"2019-09-08T07:46:48.000Z","_content":"\n- getDefaultProps是设置默认props，如果父组件没有给某个prop那就用默认的(\n\n  源码里显示:\n\n  ​\t假设 defaultProps = { title: 1}, 父组件没有传递title 给props\n\n  ​\t则 props.title = defaultProps.title;\n\n  )\n\n- getInitialState是设置组件mount以后的初始state的\n\n","source":"_posts/react中getDefaultProps和getInitialState的区别是什么.md","raw":"---\ntitle: react中getDefaultProps和getInitialState的区别是什么\ndate: 2019-09-08 15:46:48\ntags: [react, getDefaultProps, getInitIalState]\n---\n\n- getDefaultProps是设置默认props，如果父组件没有给某个prop那就用默认的(\n\n  源码里显示:\n\n  ​\t假设 defaultProps = { title: 1}, 父组件没有传递title 给props\n\n  ​\t则 props.title = defaultProps.title;\n\n  )\n\n- getInitialState是设置组件mount以后的初始state的\n\n","slug":"react中getDefaultProps和getInitialState的区别是什么","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1ae0012si35jf0lp6o6","content":"<ul>\n<li><p>getDefaultProps是设置默认props，如果父组件没有给某个prop那就用默认的(</p>\n<p>源码里显示:</p>\n<p>​    假设 defaultProps = { title: 1}, 父组件没有传递title 给props</p>\n<p>​    则 props.title = defaultProps.title;</p>\n<p>)</p>\n</li>\n<li><p>getInitialState是设置组件mount以后的初始state的</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<ul>\n<li><p>getDefaultProps是设置默认props，如果父组件没有给某个prop那就用默认的(</p>\n<p>源码里显示:</p>\n<p>​    假设 defaultProps = { title: 1}, 父组件没有传递title 给props</p>\n<p>​    则 props.title = defaultProps.title;</p>\n<p>)</p>\n</li>\n<li><p>getInitialState是设置组件mount以后的初始state的</p>\n</li>\n</ul>\n"},{"title":"react中将html字符串渲染到页面","date":"2019-09-08T07:04:41.000Z","_content":"\n```jsx\n<div dangerouslySetInnerHTML={{__html:this.props.content}}></div>\n```\n\nthis.props.content 为要渲染的数据\n\n","source":"_posts/react中将html字符串渲染到页面.md","raw":"---\ntitle: react中将html字符串渲染到页面\ndate: 2019-09-08 15:04:41\ntags: [react, html字符串]\n---\n\n```jsx\n<div dangerouslySetInnerHTML={{__html:this.props.content}}></div>\n```\n\nthis.props.content 为要渲染的数据\n\n","slug":"react中将html字符串渲染到页面","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1al0015si356mrmzhuz","content":"<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div dangerouslySetInnerHTML=&#123;&#123;<span class=\"attr\">__html</span>:<span class=\"keyword\">this</span>.props.content&#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>this.props.content 为要渲染的数据</p>\n","site":{"data":{}},"excerpt":"","more":"<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div dangerouslySetInnerHTML=&#123;&#123;<span class=\"attr\">__html</span>:<span class=\"keyword\">this</span>.props.content&#125;&#125;&gt;<span class=\"xml\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br></pre></td></tr></table></figure>\n\n<p>this.props.content 为要渲染的数据</p>\n"},{"title":"react的context","date":"2019-09-08T07:59:20.000Z","_content":"\n\n\n### 作用:\n\n可以在父级组件上向下共享数据,减少props的传递\n\n### 新版用法:\n\n1. 父组件创建 Context文件\n\n\n\n```jsx\nimport React from 'react';\n\nconst MyContext = React.createContext();\nexport default MyContext;\n```\n\n2. 父级组件里面设置:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Child from './Child';\nimport MyContext from './Context'\nconst { Provider } = MyContext;\n\nexport default class Page extends Component {\n  render = () => (\n    <Provider value='hello world!'>\n      <Child />\n    </Provider>\n  )\n}\n```\n\n3. 子组件:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Sun from './sun';\nexport default class Child extends Component {\n  render() {\n    return (\n      <div>\n        <Sun/>\n      </div>\n    )\n  }\n}\n```\n\n4. 子子组件:\n\nConsumer的children要为一个函数\n\n```jsx\nimport React, { Component } from 'react';\nimport MyContext from './Context';\n\nexport default class Sun extends Component {\n  render () {\n    return (\n    <MyContext.Consumer>\n      {\n        context => context\n      }\n    </MyContext.Consumer>\n  )\n  }\n}\n```","source":"_posts/react的context.md","raw":"---\ntitle: react的context\ndate: 2019-09-08 15:59:20\ntags: [react, context]\n---\n\n\n\n### 作用:\n\n可以在父级组件上向下共享数据,减少props的传递\n\n### 新版用法:\n\n1. 父组件创建 Context文件\n\n\n\n```jsx\nimport React from 'react';\n\nconst MyContext = React.createContext();\nexport default MyContext;\n```\n\n2. 父级组件里面设置:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Child from './Child';\nimport MyContext from './Context'\nconst { Provider } = MyContext;\n\nexport default class Page extends Component {\n  render = () => (\n    <Provider value='hello world!'>\n      <Child />\n    </Provider>\n  )\n}\n```\n\n3. 子组件:\n\n\n\n```jsx\nimport React, { Component } from 'react';\nimport Sun from './sun';\nexport default class Child extends Component {\n  render() {\n    return (\n      <div>\n        <Sun/>\n      </div>\n    )\n  }\n}\n```\n\n4. 子子组件:\n\nConsumer的children要为一个函数\n\n```jsx\nimport React, { Component } from 'react';\nimport MyContext from './Context';\n\nexport default class Sun extends Component {\n  render () {\n    return (\n    <MyContext.Consumer>\n      {\n        context => context\n      }\n    </MyContext.Consumer>\n  )\n  }\n}\n```","slug":"react的context","published":1,"updated":"2021-03-24T15:03:18.277Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1az0017si35pnbkfy5p","content":"<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用:\"></a>作用:</h3><p>可以在父级组件上向下共享数据,减少props的传递</p>\n<h3 id=\"新版用法\"><a href=\"#新版用法\" class=\"headerlink\" title=\"新版用法:\"></a>新版用法:</h3><ol>\n<li>父组件创建 Context文件</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyContext = React.createContext();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyContext;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>父级组件里面设置:</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">'./Child'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MyContext <span class=\"keyword\">from</span> <span class=\"string\">'./Context'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Provider &#125; = MyContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">    &lt;Provider value=<span class=\"string\">'hello world!'</span>&gt;</span><br><span class=\"line\">      &lt;Child /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>子组件:</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Sun <span class=\"keyword\">from</span> <span class=\"string\">'./sun'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Sun/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>子子组件:</li>\n</ol>\n<p>Consumer的children要为一个函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MyContext <span class=\"keyword\">from</span> <span class=\"string\">'./Context'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyContext.Consumer&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        context =&gt; context</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MyContext.Consumer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用:\"></a>作用:</h3><p>可以在父级组件上向下共享数据,减少props的传递</p>\n<h3 id=\"新版用法\"><a href=\"#新版用法\" class=\"headerlink\" title=\"新版用法:\"></a>新版用法:</h3><ol>\n<li>父组件创建 Context文件</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MyContext = React.createContext();</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> MyContext;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>父级组件里面设置:</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Child <span class=\"keyword\">from</span> <span class=\"string\">'./Child'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MyContext <span class=\"keyword\">from</span> <span class=\"string\">'./Context'</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; Provider &#125; = MyContext;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Page</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render = <span class=\"function\"><span class=\"params\">()</span> =&gt;</span> (</span><br><span class=\"line\">    &lt;Provider value=<span class=\"string\">'hello world!'</span>&gt;</span><br><span class=\"line\">      &lt;Child /&gt;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/Provider&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>子组件:</li>\n</ol>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> Sun <span class=\"keyword\">from</span> <span class=\"string\">'./sun'</span>;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Child</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;div&gt;</span><br><span class=\"line\">        &lt;Sun/&gt;</span><br><span class=\"line\">      &lt;<span class=\"regexp\">/div&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">    )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>子子组件:</li>\n</ol>\n<p>Consumer的children要为一个函数</p>\n<figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> React, &#123; Component &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react'</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> MyContext <span class=\"keyword\">from</span> <span class=\"string\">'./Context'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Sun</span> <span class=\"keyword\">extends</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render () &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;MyContext.Consumer&gt;</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        context =&gt; context</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &lt;<span class=\"regexp\">/MyContext.Consumer&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  )</span></span><br><span class=\"line\"><span class=\"regexp\">  &#125;</span></span><br><span class=\"line\"><span class=\"regexp\">&#125;</span></span><br></pre></td></tr></table></figure>"},{"title":"react的displayName、defaultProps、proptype、static到底是什么?","date":"2019-09-08T07:50:55.000Z","_content":"\n### displayName:\n\n> `displayName` 字符串多用于调试消息。通常，你不需要设置它，因为它可以根据函数组件或 class 组件的名称推断出来。如果调试时需要显示不同的名称或创建高阶组件，请参阅[使用 displayname 轻松进行调试](https://zh-hans.reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging)了解更多。\n\n### defaultProps:\n\n   deaultProps用的时候需要添加static 也就是需要添加到class的静态属性里面,当此组件的父级没有传入props属性时, 此组件会用defaultProps里面的属性; defaultProps 会添加到组件的this.props里面,跟从父级传递过来一样\n\n\n\n```js\n// Resolve default props react 源码\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n```\n\n### static:\n\n> ### 类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\n\n父类中的静态方法和属性 不能通过new() 实例化的child继承,\n\n但是 通过extend 继承的child是可以继承父类的静态方法和属性的\n\n### proptype:\n\n类似typescript的react自带的类型检查\n\n\n\n```js\n// 数组、布尔、函数、数字、对象、字符串、symbol\nMyComponent.propTypes = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 你也可以声明一个 prop 是类的一个实例。\n  // 使用 JS 的 instanceof 运算符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以声明 prop 是特定的值，类似于枚举\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 一个对象可以是多种类型其中之一\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 一个某种类型的数组\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 属性值为某种类型的对象\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 一个特定形式的对象\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任何数据类型的值\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，\n  // 因为这不会在 `oneOfType` 类型的验证器中起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。\n  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，\n  // 以及当前元素的键值。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n### 限制单个子代\n\n```jsx\n// 组件\nconst OnlyOneChild = props => {\n  const children = props.children\n  return <div>{children}</div>\n}\nOnlyOneChild.propTypes = {\n  children: PropTypes.element.isRequired\n}\n\n// 容器\n<OnlyOneChild>\n  <h3>第一个子节点</h3>\n  <h3>第二个子节点</h3>\n</OnlyOneChild>\n```","source":"_posts/react的displayName、defaultProps、proptype、static到底是什么.md","raw":"---\ntitle: react的displayName、defaultProps、proptype、static到底是什么?\ndate: 2019-09-08 15:50:55\ntags: [displayName, defaultProps, prototype, static]\n---\n\n### displayName:\n\n> `displayName` 字符串多用于调试消息。通常，你不需要设置它，因为它可以根据函数组件或 class 组件的名称推断出来。如果调试时需要显示不同的名称或创建高阶组件，请参阅[使用 displayname 轻松进行调试](https://zh-hans.reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging)了解更多。\n\n### defaultProps:\n\n   deaultProps用的时候需要添加static 也就是需要添加到class的静态属性里面,当此组件的父级没有传入props属性时, 此组件会用defaultProps里面的属性; defaultProps 会添加到组件的this.props里面,跟从父级传递过来一样\n\n\n\n```js\n// Resolve default props react 源码\n  if (type && type.defaultProps) {\n    const defaultProps = type.defaultProps;\n    for (propName in defaultProps) {\n      if (props[propName] === undefined) {\n        props[propName] = defaultProps[propName];\n      }\n    }\n  }\n```\n\n### static:\n\n> ### 类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\n\n父类中的静态方法和属性 不能通过new() 实例化的child继承,\n\n但是 通过extend 继承的child是可以继承父类的静态方法和属性的\n\n### proptype:\n\n类似typescript的react自带的类型检查\n\n\n\n```js\n// 数组、布尔、函数、数字、对象、字符串、symbol\nMyComponent.propTypes = {\n  optionalArray: PropTypes.array,\n  optionalBool: PropTypes.bool,\n  optionalFunc: PropTypes.func,\n  optionalNumber: PropTypes.number,\n  optionalObject: PropTypes.object,\n  optionalString: PropTypes.string,\n  optionalSymbol: PropTypes.symbol,\n\n  // 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。\n  optionalNode: PropTypes.node,\n\n  // 一个 React 元素。\n  optionalElement: PropTypes.element,\n\n  // 你也可以声明一个 prop 是类的一个实例。\n  // 使用 JS 的 instanceof 运算符。\n  optionalMessage: PropTypes.instanceOf(Message),\n\n  // 你可以声明 prop 是特定的值，类似于枚举\n  optionalEnum: PropTypes.oneOf(['News', 'Photos']),\n\n  // 一个对象可以是多种类型其中之一\n  optionalUnion: PropTypes.oneOfType([\n    PropTypes.string,\n    PropTypes.number,\n    PropTypes.instanceOf(Message)\n  ]),\n\n  // 一个某种类型的数组\n  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),\n\n  // 属性值为某种类型的对象\n  optionalObjectOf: PropTypes.objectOf(PropTypes.number),\n\n  // 一个特定形式的对象\n  optionalObjectWithShape: PropTypes.shape({\n    color: PropTypes.string,\n    fontSize: PropTypes.number\n  }),\n\n  // 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。\n  requiredFunc: PropTypes.func.isRequired,\n\n  // 任何数据类型的值\n  requiredAny: PropTypes.any.isRequired,\n\n  // 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，\n  // 因为这不会在 `oneOfType` 类型的验证器中起作用。\n  customProp: function(props, propName, componentName) {\n    if (!/matchme/.test(props[propName])) {\n      return new Error(\n        'Invalid prop `' + propName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  },\n\n  // 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。\n  // 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，\n  // 以及当前元素的键值。\n  customArrayProp: PropTypes.arrayOf(function(propValue, key, componentName, location, propFullName) {\n    if (!/matchme/.test(propValue[key])) {\n      return new Error(\n        'Invalid prop `' + propFullName + '` supplied to' +\n        ' `' + componentName + '`. Validation failed.'\n      );\n    }\n  })\n};\n```\n\n### 限制单个子代\n\n```jsx\n// 组件\nconst OnlyOneChild = props => {\n  const children = props.children\n  return <div>{children}</div>\n}\nOnlyOneChild.propTypes = {\n  children: PropTypes.element.isRequired\n}\n\n// 容器\n<OnlyOneChild>\n  <h3>第一个子节点</h3>\n  <h3>第二个子节点</h3>\n</OnlyOneChild>\n```","slug":"react的displayName、defaultProps、proptype、static到底是什么","published":1,"updated":"2021-03-24T15:03:18.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1b6001asi35n012q0ui","content":"<h3 id=\"displayName\"><a href=\"#displayName\" class=\"headerlink\" title=\"displayName:\"></a>displayName:</h3><blockquote>\n<p><code>displayName</code> 字符串多用于调试消息。通常，你不需要设置它，因为它可以根据函数组件或 class 组件的名称推断出来。如果调试时需要显示不同的名称或创建高阶组件，请参阅<a href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging\" target=\"_blank\" rel=\"noopener\">使用 displayname 轻松进行调试</a>了解更多。</p>\n</blockquote>\n<h3 id=\"defaultProps\"><a href=\"#defaultProps\" class=\"headerlink\" title=\"defaultProps:\"></a>defaultProps:</h3><p>   deaultProps用的时候需要添加static 也就是需要添加到class的静态属性里面,当此组件的父级没有传入props属性时, 此组件会用defaultProps里面的属性; defaultProps 会添加到组件的this.props里面,跟从父级传递过来一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Resolve default props react 源码</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type &amp;&amp; type.defaultProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> defaultProps = type.defaultProps;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (propName <span class=\"keyword\">in</span> defaultProps) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (props[propName] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        props[propName] = defaultProps[propName];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static:\"></a>static:</h3><blockquote>\n<h3 id=\"类就是实例的原型，以前我们一般会new一个test-有在类中-test-定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\"><a href=\"#类就是实例的原型，以前我们一般会new一个test-有在类中-test-定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\" class=\"headerlink\" title=\"类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\"></a>类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”</h3></blockquote>\n<p>父类中的静态方法和属性 不能通过new() 实例化的child继承,</p>\n<p>但是 通过extend 继承的child是可以继承父类的静态方法和属性的</p>\n<h3 id=\"proptype\"><a href=\"#proptype\" class=\"headerlink\" title=\"proptype:\"></a>proptype:</h3><p>类似typescript的react自带的类型检查</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组、布尔、函数、数字、对象、字符串、symbol</span></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。</span></span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个 React 元素。</span></span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你也可以声明一个 prop 是类的一个实例。</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 JS 的 instanceof 运算符。</span></span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你可以声明 prop 是特定的值，类似于枚举</span></span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([<span class=\"string\">'News'</span>, <span class=\"string\">'Photos'</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个对象可以是多种类型其中之一</span></span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个某种类型的数组</span></span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 属性值为某种类型的对象</span></span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个特定形式的对象</span></span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。</span></span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 任何数据类型的值</span></span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为这不会在 `oneOfType` 类型的验证器中起作用。</span></span><br><span class=\"line\">  customProp: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props, propName, componentName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/matchme/</span>.test(props[propName])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Invalid prop `'</span> + propName + <span class=\"string\">'` supplied to'</span> +</span><br><span class=\"line\">        <span class=\"string\">' `'</span> + componentName + <span class=\"string\">'`. Validation failed.'</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。</span></span><br><span class=\"line\">  <span class=\"comment\">// 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，</span></span><br><span class=\"line\">  <span class=\"comment\">// 以及当前元素的键值。</span></span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Invalid prop `'</span> + propFullName + <span class=\"string\">'` supplied to'</span> +</span><br><span class=\"line\">        <span class=\"string\">' `'</span> + componentName + <span class=\"string\">'`. Validation failed.'</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"限制单个子代\"><a href=\"#限制单个子代\" class=\"headerlink\" title=\"限制单个子代\"></a>限制单个子代</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OnlyOneChild = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> children = props.children</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OnlyOneChild.propTypes = &#123;</span><br><span class=\"line\">  children: PropTypes.element.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 容器</span></span><br><span class=\"line\">&lt;OnlyOneChild&gt;</span><br><span class=\"line\">  &lt;h3&gt;第一个子节点&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;h3&gt;第二个子节点&lt;/</span>h3&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/OnlyOneChild&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"displayName\"><a href=\"#displayName\" class=\"headerlink\" title=\"displayName:\"></a>displayName:</h3><blockquote>\n<p><code>displayName</code> 字符串多用于调试消息。通常，你不需要设置它，因为它可以根据函数组件或 class 组件的名称推断出来。如果调试时需要显示不同的名称或创建高阶组件，请参阅<a href=\"https://zh-hans.reactjs.org/docs/higher-order-components.html#convention-wrap-the-display-name-for-easy-debugging\" target=\"_blank\" rel=\"noopener\">使用 displayname 轻松进行调试</a>了解更多。</p>\n</blockquote>\n<h3 id=\"defaultProps\"><a href=\"#defaultProps\" class=\"headerlink\" title=\"defaultProps:\"></a>defaultProps:</h3><p>   deaultProps用的时候需要添加static 也就是需要添加到class的静态属性里面,当此组件的父级没有传入props属性时, 此组件会用defaultProps里面的属性; defaultProps 会添加到组件的this.props里面,跟从父级传递过来一样</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Resolve default props react 源码</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type &amp;&amp; type.defaultProps) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">const</span> defaultProps = type.defaultProps;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (propName <span class=\"keyword\">in</span> defaultProps) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">if</span> (props[propName] === <span class=\"literal\">undefined</span>) &#123;</span><br><span class=\"line\">        props[propName] = defaultProps[propName];</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"static\"><a href=\"#static\" class=\"headerlink\" title=\"static:\"></a>static:</h3><blockquote>\n<h3 id=\"类就是实例的原型，以前我们一般会new一个test-有在类中-test-定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\"><a href=\"#类就是实例的原型，以前我们一般会new一个test-有在类中-test-定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\" class=\"headerlink\" title=\"类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”\"></a>类就是实例的原型，以前我们一般会new一个test(),有在类中(test)定义的方法，都会被实例继承。如果在一个方法前，加上static关键字，就表示该方法不会被实例继承，而是直接通过类来调用，这就称为“静态方法”</h3></blockquote>\n<p>父类中的静态方法和属性 不能通过new() 实例化的child继承,</p>\n<p>但是 通过extend 继承的child是可以继承父类的静态方法和属性的</p>\n<h3 id=\"proptype\"><a href=\"#proptype\" class=\"headerlink\" title=\"proptype:\"></a>proptype:</h3><p>类似typescript的react自带的类型检查</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组、布尔、函数、数字、对象、字符串、symbol</span></span><br><span class=\"line\">MyComponent.propTypes = &#123;</span><br><span class=\"line\">  optionalArray: PropTypes.array,</span><br><span class=\"line\">  optionalBool: PropTypes.bool,</span><br><span class=\"line\">  optionalFunc: PropTypes.func,</span><br><span class=\"line\">  optionalNumber: PropTypes.number,</span><br><span class=\"line\">  optionalObject: PropTypes.object,</span><br><span class=\"line\">  optionalString: PropTypes.string,</span><br><span class=\"line\">  optionalSymbol: PropTypes.symbol,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 任何东西都可以被渲染:numbers, strings, elements,或者是包含这些类型的数组(或者是片段)。</span></span><br><span class=\"line\">  optionalNode: PropTypes.node,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个 React 元素。</span></span><br><span class=\"line\">  optionalElement: PropTypes.element,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你也可以声明一个 prop 是类的一个实例。</span></span><br><span class=\"line\">  <span class=\"comment\">// 使用 JS 的 instanceof 运算符。</span></span><br><span class=\"line\">  optionalMessage: PropTypes.instanceOf(Message),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你可以声明 prop 是特定的值，类似于枚举</span></span><br><span class=\"line\">  optionalEnum: PropTypes.oneOf([<span class=\"string\">'News'</span>, <span class=\"string\">'Photos'</span>]),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个对象可以是多种类型其中之一</span></span><br><span class=\"line\">  optionalUnion: PropTypes.oneOfType([</span><br><span class=\"line\">    PropTypes.string,</span><br><span class=\"line\">    PropTypes.number,</span><br><span class=\"line\">    PropTypes.instanceOf(Message)</span><br><span class=\"line\">  ]),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个某种类型的数组</span></span><br><span class=\"line\">  optionalArrayOf: PropTypes.arrayOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 属性值为某种类型的对象</span></span><br><span class=\"line\">  optionalObjectOf: PropTypes.objectOf(PropTypes.number),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 一个特定形式的对象</span></span><br><span class=\"line\">  optionalObjectWithShape: PropTypes.shape(&#123;</span><br><span class=\"line\">    color: PropTypes.string,</span><br><span class=\"line\">    fontSize: PropTypes.number</span><br><span class=\"line\">  &#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你可以使用 `isRequired' 链接上述任何一个，以确保在没有提供 prop 的情况下显示警告。</span></span><br><span class=\"line\">  requiredFunc: PropTypes.func.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 任何数据类型的值</span></span><br><span class=\"line\">  requiredAny: PropTypes.any.isRequired,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 你也可以声明自定义的验证器。如果验证失败返回 Error 对象。不要使用 `console.warn` 或者 throw ，</span></span><br><span class=\"line\">  <span class=\"comment\">// 因为这不会在 `oneOfType` 类型的验证器中起作用。</span></span><br><span class=\"line\">  customProp: <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">props, propName, componentName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/matchme/</span>.test(props[propName])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Invalid prop `'</span> + propName + <span class=\"string\">'` supplied to'</span> +</span><br><span class=\"line\">        <span class=\"string\">' `'</span> + componentName + <span class=\"string\">'`. Validation failed.'</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 也可以声明`arrayOf`和`objectOf`类型的验证器，如果验证失败需要返回Error对象。</span></span><br><span class=\"line\">  <span class=\"comment\">// 会在数组或者对象的每一个元素上调用验证器。验证器的前两个参数分别是数组或者对象本身，</span></span><br><span class=\"line\">  <span class=\"comment\">// 以及当前元素的键值。</span></span><br><span class=\"line\">  customArrayProp: PropTypes.arrayOf(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">propValue, key, componentName, location, propFullName</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!<span class=\"regexp\">/matchme/</span>.test(propValue[key])) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(</span><br><span class=\"line\">        <span class=\"string\">'Invalid prop `'</span> + propFullName + <span class=\"string\">'` supplied to'</span> +</span><br><span class=\"line\">        <span class=\"string\">' `'</span> + componentName + <span class=\"string\">'`. Validation failed.'</span></span><br><span class=\"line\">      );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"限制单个子代\"><a href=\"#限制单个子代\" class=\"headerlink\" title=\"限制单个子代\"></a>限制单个子代</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OnlyOneChild = <span class=\"function\"><span class=\"params\">props</span> =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> children = props.children</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>&#123;children&#125;<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">OnlyOneChild.propTypes = &#123;</span><br><span class=\"line\">  children: PropTypes.element.isRequired</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 容器</span></span><br><span class=\"line\">&lt;OnlyOneChild&gt;</span><br><span class=\"line\">  &lt;h3&gt;第一个子节点&lt;<span class=\"regexp\">/h3&gt;</span></span><br><span class=\"line\"><span class=\"regexp\">  &lt;h3&gt;第二个子节点&lt;/</span>h3&gt;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/OnlyOneChild&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"react的高阶组件","date":"2019-09-08T07:57:21.000Z","_content":"\n> *高阶组件就是一个函数，传给它一个组件，它返回一个新的组件*。新的组件使用传入的组件作为子组件。\n\n> *高阶组件的作用是用于代码复用*，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。\n\n> *新的组件和传入的组件通过 props 传递信息*。\n\n### 整体逻辑原理:\n\nbase组件 以参数形式传递进入 高阶函数, 高阶函数里面的 wrap组件作为父级render自己base组件,\n\n通过wrap组件的一系列逻辑处理, 将不同的props传递给base组件,生成不同的wrap组件,然后return wrap组件\n\n\n\n### base组件:\n\n\n\n```jsx\nclass base extend Component {\n  render() {\n    return (\n    <input value={this.props.data} />\n    )\n  }\n}\n```\n\n\n\n### 高阶函数:\n\n\n\n```jsx\nhigherOrder = (MyComponent, index, ...params) => {\n  class Wrap extend Component {\n    state = {\n      datas: [\n        1,2,3,4,5\n      ]\n    }\n    render() {\n    return (\n      <MyComponent data={this.state.datas[index]} />\n    );\n    }\n  }\n  return Wrap\n}\n```\n\n\n\n### 调用:\n\n\n\n```jsx\nimport higherOrder from './higerOrder' // 高阶函数的路径(引入高阶函数)\nconst newBase = higherOrder(base, 0); // base组件, index \nexport default newBase; // 这样可以抛出多个input组件且其值与传入的index有关\n```","source":"_posts/react的高阶组件.md","raw":"---\ntitle: react的高阶组件\ndate: 2019-09-08 15:57:21\ntags: [react, 高阶组件]\n---\n\n> *高阶组件就是一个函数，传给它一个组件，它返回一个新的组件*。新的组件使用传入的组件作为子组件。\n\n> *高阶组件的作用是用于代码复用*，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。\n\n> *新的组件和传入的组件通过 props 传递信息*。\n\n### 整体逻辑原理:\n\nbase组件 以参数形式传递进入 高阶函数, 高阶函数里面的 wrap组件作为父级render自己base组件,\n\n通过wrap组件的一系列逻辑处理, 将不同的props传递给base组件,生成不同的wrap组件,然后return wrap组件\n\n\n\n### base组件:\n\n\n\n```jsx\nclass base extend Component {\n  render() {\n    return (\n    <input value={this.props.data} />\n    )\n  }\n}\n```\n\n\n\n### 高阶函数:\n\n\n\n```jsx\nhigherOrder = (MyComponent, index, ...params) => {\n  class Wrap extend Component {\n    state = {\n      datas: [\n        1,2,3,4,5\n      ]\n    }\n    render() {\n    return (\n      <MyComponent data={this.state.datas[index]} />\n    );\n    }\n  }\n  return Wrap\n}\n```\n\n\n\n### 调用:\n\n\n\n```jsx\nimport higherOrder from './higerOrder' // 高阶函数的路径(引入高阶函数)\nconst newBase = higherOrder(base, 0); // base组件, index \nexport default newBase; // 这样可以抛出多个input组件且其值与传入的index有关\n```","slug":"react的高阶组件","published":1,"updated":"2021-03-24T15:03:18.278Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1bd001bsi35zu6k84ji","content":"<blockquote>\n<p><em>高阶组件就是一个函数，传给它一个组件，它返回一个新的组件</em>。新的组件使用传入的组件作为子组件。</p>\n</blockquote>\n<blockquote>\n<p><em>高阶组件的作用是用于代码复用</em>，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。</p>\n</blockquote>\n<blockquote>\n<p><em>新的组件和传入的组件通过 props 传递信息</em>。</p>\n</blockquote>\n<h3 id=\"整体逻辑原理\"><a href=\"#整体逻辑原理\" class=\"headerlink\" title=\"整体逻辑原理:\"></a>整体逻辑原理:</h3><p>base组件 以参数形式传递进入 高阶函数, 高阶函数里面的 wrap组件作为父级render自己base组件,</p>\n<p>通过wrap组件的一系列逻辑处理, 将不同的props传递给base组件,生成不同的wrap组件,然后return wrap组件</p>\n<h3 id=\"base组件\"><a href=\"#base组件\" class=\"headerlink\" title=\"base组件:\"></a>base组件:</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">base</span> <span class=\"title\">extend</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;input value=&#123;<span class=\"keyword\">this</span>.props.data&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数:\"></a>高阶函数:</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">higherOrder = <span class=\"function\">(<span class=\"params\">MyComponent, index, ...params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrap</span> <span class=\"title\">extend</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">      datas: [</span><br><span class=\"line\">        <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;MyComponent data=&#123;<span class=\"keyword\">this</span>.state.datas[index]&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Wrap</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用:\"></a>调用:</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> higherOrder <span class=\"keyword\">from</span> <span class=\"string\">'./higerOrder'</span> <span class=\"comment\">// 高阶函数的路径(引入高阶函数)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newBase = higherOrder(base, <span class=\"number\">0</span>); <span class=\"comment\">// base组件, index </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> newBase; <span class=\"comment\">// 这样可以抛出多个input组件且其值与传入的index有关</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p><em>高阶组件就是一个函数，传给它一个组件，它返回一个新的组件</em>。新的组件使用传入的组件作为子组件。</p>\n</blockquote>\n<blockquote>\n<p><em>高阶组件的作用是用于代码复用</em>，可以把组件之间可复用的代码、逻辑抽离到高阶组件当中。</p>\n</blockquote>\n<blockquote>\n<p><em>新的组件和传入的组件通过 props 传递信息</em>。</p>\n</blockquote>\n<h3 id=\"整体逻辑原理\"><a href=\"#整体逻辑原理\" class=\"headerlink\" title=\"整体逻辑原理:\"></a>整体逻辑原理:</h3><p>base组件 以参数形式传递进入 高阶函数, 高阶函数里面的 wrap组件作为父级render自己base组件,</p>\n<p>通过wrap组件的一系列逻辑处理, 将不同的props传递给base组件,生成不同的wrap组件,然后return wrap组件</p>\n<h3 id=\"base组件\"><a href=\"#base组件\" class=\"headerlink\" title=\"base组件:\"></a>base组件:</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">base</span> <span class=\"title\">extend</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">  render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    &lt;input value=&#123;<span class=\"keyword\">this</span>.props.data&#125; /&gt;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"高阶函数\"><a href=\"#高阶函数\" class=\"headerlink\" title=\"高阶函数:\"></a>高阶函数:</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">higherOrder = <span class=\"function\">(<span class=\"params\">MyComponent, index, ...params</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Wrap</span> <span class=\"title\">extend</span> <span class=\"title\">Component</span> </span>&#123;</span><br><span class=\"line\">    state = &#123;</span><br><span class=\"line\">      datas: [</span><br><span class=\"line\">        <span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span></span><br><span class=\"line\">      ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    render() &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (</span><br><span class=\"line\">      &lt;MyComponent data=&#123;<span class=\"keyword\">this</span>.state.datas[index]&#125; /&gt;</span><br><span class=\"line\">    );</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> Wrap</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"调用\"><a href=\"#调用\" class=\"headerlink\" title=\"调用:\"></a>调用:</h3><figure class=\"highlight jsx\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> higherOrder <span class=\"keyword\">from</span> <span class=\"string\">'./higerOrder'</span> <span class=\"comment\">// 高阶函数的路径(引入高阶函数)</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> newBase = higherOrder(base, <span class=\"number\">0</span>); <span class=\"comment\">// base组件, index </span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> newBase; <span class=\"comment\">// 这样可以抛出多个input组件且其值与传入的index有关</span></span><br></pre></td></tr></table></figure>"},{"title":"webpack创建项目","date":"2019-12-29T23:35:07.000Z","_content":"### webpack 新建项目流程\n1. 始化项目\n```shell\nnpm init -y\n```\n2. 创建项目结构\n```shell\n.\n├── dist // 生成目录\n├── dll_script // 生成的dll的js和manifest.json\n│   ├── commons.dll.js\n│   ├── commons.manifest.json\n│   ├── react.dll.js\n│   └── react.manifest.json\n├── package.json\n├── public // html 模板和ico\n│   ├── favicon.ico\n│   └── index.html\n├── script // webpack 配置脚本\n│   ├── webpack.build.js\n│   ├── webpack.common.js\n│   ├── webpack.dev.js\n│   └── webpack.dll.js\n├── src // 项目文件\n│   ├── history\n│   │   └── index.js\n│   ├── index.js\n│   ├── page\n│   │   ├── Home\n│   │   │   ├── index.jsx\n│   │   │   └── index.less\n│   │   └── index.js\n│   └── store\n│       └── index.js\n└── yarn.lock\n```\n3. 安装webpack及插件\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D\n// html-webpack-plugin 将生成的javascript文件打到模板 index.html上\n// clean-webpack-plugin 清除生成的文件\n// webpack-dev-server   本地服务器\n```\n4. 安装babel和loader\n```javascript\nyarn add @babel/core @babel/preset-env @babel/preset-react -D\n// babel-loader和@babel/core是核心模块\n// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript\n// @babel/preset-react 转换JSX\nyarn add babel-loader less-loader css-loader style-loader -D\n// less-loader css-loader style-loader less文件loader 顺序是 style => css => less 执行过程是相反的\nyarn add less -D\nyarn add file-loader -D\nyarn add url-loader -D\nyarn add babel-plugin-import -D\n// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64\n```\n5. 配置babel .babelrc\n```javascript\n{\n  \"presets\": [\n  \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n      \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n6. 配置webpack.config.js\n- webpack.common.js // webpack 共用配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: { // 入口\n    main: path.resolve(__dirname, '../src/index.js')\n  },\n  output: { // 出口\n    filename: '[name].js',\n    chunkFilename: '[name].js',\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/' // 上cdn的需要配置此项\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'], // 配置此项后就可以通过index直接引入不需要写后缀\n    alias: { // 别名\n      \"@src\": path.resolve(__dirname, '../src')\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        // use: [\"babel-loader\"], // 两种方式都可以\n        use: [\n          {\n            loader: \"babel-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: \"style-loader\"\n          },\n          {\n            loader: \"css-loader\"\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              javascriptEnabled: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style.loader\"\n          },\n          {\n            loader: \"css-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.(jpg|jepg|png|gif)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(eot|woff2|ttf|svg)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  // 拆分打包\n  optimzation: {\n    splitChunks: {\n      chunks: 'all',// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用\n      automaticNameDelimiter: '~',  // 生成文件名的文件链接符\n      name: true, // 开启自定义名称效果，\n      cacheGroups: {\n        vendors: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        priority: -10, // 优先级\n        filename: \"vendors.js\"\n      },\n      // default: false // false为禁止default及最后打包为vendors和入口的main\n        default: { // 打包为chunk.js vendors.js 及入口的main.js\n          priority: -20, \n          reuseExistingChunk: true,\n          filename: 'chunk.js'\n        }\n      }\n    }\n  },\n  plugins: [ // manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/commons.manifest.json')\n    }),\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/react.manifest.json')\n    })\n  ]\n}\n```\n- webpack.dev.js // dev 配置\n```javascript\nconst webpackCommon = require('./webpack.common.js');\nconst htmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst path = require('path');\n\nwebpackCommon.plugins.push(\n  new htmlWebpackPlugin({\n    template: path.resolve(__dirname, '../public/index.html');\n  })\n)\nwebpackCommon.plugins.push(new CleanWebpackPlugin())\nconst webpackDevConfig = {\n  mode: 'development',\n  devtool: \"cheap-source-map\", // 映射\n  devServer: {\n    port: 8090, // 端口号\n    open: true, // 自动打开浏览器\n    historyApiFallback: true, // 404时返回首页\n  }\n}\nmodule.exports = Object.assgin(webpackDevConfig, webpackCommon);\n```\n- webpack.build.js // 打包配置\n```javascript\nconst webpackCommon = require('./webpackCommon.js');\nconst webpackBuildConfig = {\n  mode: 'production'\n}\nmodule.exports = Object.assgin(webpackBuildConfig, webpackCommon);\n```\n- webpack.dll.js // 生成dll.js和json配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst webpackDllConfig = {\n  mode: 'production',\n  entry: {\n    react: ['react', 'react-dom', 'react-router', 'react-router-dom', 'mobx-react'],\n    //  mobx-react 应该是和react有依赖关系所以要和react放到一起\n    commons: ['mobx']\n  },\n  output: {\n    filename: '[name].dll.js',\n    path: path.resolve(__dirname, '../dll_script'),\n    library: '[name]' // 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import\n    // 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library\n  },\n  plugins: [\n    new CleanWebpackPlugin({\n        path: path.resolve(__dirname, '../dll_script')\n    }),\n    new webpack.DllPlugin({\n        name: '[name]',\n      path: path.resolve(__dirname, '../dll_script/[name].manifest.json')\n    })\n  ]\n}\n```\n7. package.json 里面添加脚本命令\n```javascript\n{\n  \"name\": \"webpackDemo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --config ./script/webpack.dev.js\",\n    \"build\": \"webpack --config ./script/webpack.build.js\",\n    \"dll\": \"webpack --config ./script/webpack.dll.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.7\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\n    \"@babel/preset-env\": \"^7.7.7\",\n    \"@babel/preset-react\": \"^7.7.4\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.13.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.4.0\",\n    \"file-loader\": \"^5.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.10.3\",\n    \"less-loader\": \"^5.0.0\",\n    \"style-loader\": \"^1.1.1\",\n    \"url-loader\": \"^3.0.0\",\n    \"webpack\": \"^4.41.4\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-dev-server\": \"^3.10.1\"\n  },\n  \"dependencies\": {\n    \"antd\": \"^3.26.4\",\n    \"mobx\": \"^5.15.1\",\n    \"mobx-react\": \"^6.1.4\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\",\n    \"react-router\": \"^5.1.2\",\n    \"react-router-dom\": \"^5.1.2\"\n  }\n}\n```\n8. 配置项目babel支持@修饰符\n• 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators\n```javascript\n  npm install @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators -D\n```\n• 修改.babelrc\n```javascript\n{\n    \"presets\": [\n    \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n        \"@babel/plugin-proposal-decorators\",\n      // 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前\n      {\n        \"legacy\": true\n      }\n    ],\n    [\n        \"@babel/plugin-proposal-class-properties\"\n      // 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面\n    ]\n    [\n        \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n• 新建index.html\n```html\n  <!doctype html>\n  <html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"../script/dll_script/react.dll.js\"></script>\n    <script src=\"../script/dll_script/commons.dll.js\"></script>\n    // 上面是引用的生成的dll js文件 如果不设置dll则可以不引用 如果webpack里面设置了这里必须引用\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n  </body>\n  </html>\n```","source":"_posts/webpack创建项目.md","raw":"---\ntitle: webpack创建项目\ndate: 2019-12-30 07:35:07\ntags: ['webpack', '项目环境配置']\n---\n### webpack 新建项目流程\n1. 始化项目\n```shell\nnpm init -y\n```\n2. 创建项目结构\n```shell\n.\n├── dist // 生成目录\n├── dll_script // 生成的dll的js和manifest.json\n│   ├── commons.dll.js\n│   ├── commons.manifest.json\n│   ├── react.dll.js\n│   └── react.manifest.json\n├── package.json\n├── public // html 模板和ico\n│   ├── favicon.ico\n│   └── index.html\n├── script // webpack 配置脚本\n│   ├── webpack.build.js\n│   ├── webpack.common.js\n│   ├── webpack.dev.js\n│   └── webpack.dll.js\n├── src // 项目文件\n│   ├── history\n│   │   └── index.js\n│   ├── index.js\n│   ├── page\n│   │   ├── Home\n│   │   │   ├── index.jsx\n│   │   │   └── index.less\n│   │   └── index.js\n│   └── store\n│       └── index.js\n└── yarn.lock\n```\n3. 安装webpack及插件\n```javascript\nyarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D\n// html-webpack-plugin 将生成的javascript文件打到模板 index.html上\n// clean-webpack-plugin 清除生成的文件\n// webpack-dev-server   本地服务器\n```\n4. 安装babel和loader\n```javascript\nyarn add @babel/core @babel/preset-env @babel/preset-react -D\n// babel-loader和@babel/core是核心模块\n// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript\n// @babel/preset-react 转换JSX\nyarn add babel-loader less-loader css-loader style-loader -D\n// less-loader css-loader style-loader less文件loader 顺序是 style => css => less 执行过程是相反的\nyarn add less -D\nyarn add file-loader -D\nyarn add url-loader -D\nyarn add babel-plugin-import -D\n// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64\n```\n5. 配置babel .babelrc\n```javascript\n{\n  \"presets\": [\n  \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n      \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n6. 配置webpack.config.js\n- webpack.common.js // webpack 共用配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nmodule.exports = {\n  entry: { // 入口\n    main: path.resolve(__dirname, '../src/index.js')\n  },\n  output: { // 出口\n    filename: '[name].js',\n    chunkFilename: '[name].js',\n    path: path.resolve(__dirname, '../dist'),\n    publicPath: '/' // 上cdn的需要配置此项\n  },\n  resolve: {\n    extensions: ['.js', '.jsx'], // 配置此项后就可以通过index直接引入不需要写后缀\n    alias: { // 别名\n      \"@src\": path.resolve(__dirname, '../src')\n    }\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        // use: [\"babel-loader\"], // 两种方式都可以\n        use: [\n          {\n            loader: \"babel-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.less$/,\n        use: [\n          {\n            loader: \"style-loader\"\n          },\n          {\n            loader: \"css-loader\"\n          },\n          {\n            loader: \"less-loader\",\n            options: {\n              javascriptEnabled: true\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.css$/,\n        use: [\n          {\n            loader: \"style.loader\"\n          },\n          {\n            loader: \"css-loader\"\n          }\n        ]\n      },\n      {\n        test: /\\.(jpg|jepg|png|gif)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: 'images/'\n            }\n          }\n        ]\n      },\n      {\n        test: /\\.(eot|woff2|ttf|svg)$/,\n        use: [\n          {\n            loader: \"file-loader\",\n            options: {\n              name: '[name].[ext]',\n              outputPath: \"fonts/\"\n            }\n          }\n        ]\n      }\n    ]\n  },\n  // 拆分打包\n  optimzation: {\n    splitChunks: {\n      chunks: 'all',// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用\n      automaticNameDelimiter: '~',  // 生成文件名的文件链接符\n      name: true, // 开启自定义名称效果，\n      cacheGroups: {\n        vendors: {\n        test: /[\\\\/]node_modules[\\\\/]/,\n        priority: -10, // 优先级\n        filename: \"vendors.js\"\n      },\n      // default: false // false为禁止default及最后打包为vendors和入口的main\n        default: { // 打包为chunk.js vendors.js 及入口的main.js\n          priority: -20, \n          reuseExistingChunk: true,\n          filename: 'chunk.js'\n        }\n      }\n    }\n  },\n  plugins: [ // manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/commons.manifest.json')\n    }),\n    new webpack.DllReferencePlugin({\n      manifest: require('../dll_script/react.manifest.json')\n    })\n  ]\n}\n```\n- webpack.dev.js // dev 配置\n```javascript\nconst webpackCommon = require('./webpack.common.js');\nconst htmlWebpackPlugin = require('html-webpack-plugin');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst path = require('path');\n\nwebpackCommon.plugins.push(\n  new htmlWebpackPlugin({\n    template: path.resolve(__dirname, '../public/index.html');\n  })\n)\nwebpackCommon.plugins.push(new CleanWebpackPlugin())\nconst webpackDevConfig = {\n  mode: 'development',\n  devtool: \"cheap-source-map\", // 映射\n  devServer: {\n    port: 8090, // 端口号\n    open: true, // 自动打开浏览器\n    historyApiFallback: true, // 404时返回首页\n  }\n}\nmodule.exports = Object.assgin(webpackDevConfig, webpackCommon);\n```\n- webpack.build.js // 打包配置\n```javascript\nconst webpackCommon = require('./webpackCommon.js');\nconst webpackBuildConfig = {\n  mode: 'production'\n}\nmodule.exports = Object.assgin(webpackBuildConfig, webpackCommon);\n```\n- webpack.dll.js // 生成dll.js和json配置\n```javascript\nconst path = require('path');\nconst webpack = require('webpack');\nconst { CleanWebpackPlugin } = require('clean-webpack-plugin');\nconst webpackDllConfig = {\n  mode: 'production',\n  entry: {\n    react: ['react', 'react-dom', 'react-router', 'react-router-dom', 'mobx-react'],\n    //  mobx-react 应该是和react有依赖关系所以要和react放到一起\n    commons: ['mobx']\n  },\n  output: {\n    filename: '[name].dll.js',\n    path: path.resolve(__dirname, '../dll_script'),\n    library: '[name]' // 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import\n    // 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library\n  },\n  plugins: [\n    new CleanWebpackPlugin({\n        path: path.resolve(__dirname, '../dll_script')\n    }),\n    new webpack.DllPlugin({\n        name: '[name]',\n      path: path.resolve(__dirname, '../dll_script/[name].manifest.json')\n    })\n  ]\n}\n```\n7. package.json 里面添加脚本命令\n```javascript\n{\n  \"name\": \"webpackDemo\",\n  \"version\": \"1.0.0\",\n  \"description\": \"\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"start\": \"webpack-dev-server --config ./script/webpack.dev.js\",\n    \"build\": \"webpack --config ./script/webpack.build.js\",\n    \"dll\": \"webpack --config ./script/webpack.dll.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"devDependencies\": {\n    \"@babel/core\": \"^7.7.7\",\n    \"@babel/plugin-proposal-class-properties\": \"^7.7.4\",\n    \"@babel/plugin-proposal-decorators\": \"^7.7.4\",\n    \"@babel/preset-env\": \"^7.7.7\",\n    \"@babel/preset-react\": \"^7.7.4\",\n    \"babel-loader\": \"^8.0.6\",\n    \"babel-plugin-import\": \"^1.13.0\",\n    \"clean-webpack-plugin\": \"^3.0.0\",\n    \"css-loader\": \"^3.4.0\",\n    \"file-loader\": \"^5.0.2\",\n    \"html-webpack-plugin\": \"^3.2.0\",\n    \"less\": \"^3.10.3\",\n    \"less-loader\": \"^5.0.0\",\n    \"style-loader\": \"^1.1.1\",\n    \"url-loader\": \"^3.0.0\",\n    \"webpack\": \"^4.41.4\",\n    \"webpack-cli\": \"^3.3.10\",\n    \"webpack-dev-server\": \"^3.10.1\"\n  },\n  \"dependencies\": {\n    \"antd\": \"^3.26.4\",\n    \"mobx\": \"^5.15.1\",\n    \"mobx-react\": \"^6.1.4\",\n    \"react\": \"^16.12.0\",\n    \"react-dom\": \"^16.12.0\",\n    \"react-router\": \"^5.1.2\",\n    \"react-router-dom\": \"^5.1.2\"\n  }\n}\n```\n8. 配置项目babel支持@修饰符\n• 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators\n```javascript\n  npm install @babel/plugin-proposal-class-properties @babel/plugin-proposal-decorators -D\n```\n• 修改.babelrc\n```javascript\n{\n    \"presets\": [\n    \"@babel/preset-env\", \"@babel/preset-react\"\n  ],\n  \"plugins\": [\n    [\n        \"@babel/plugin-proposal-decorators\",\n      // 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前\n      {\n        \"legacy\": true\n      }\n    ],\n    [\n        \"@babel/plugin-proposal-class-properties\"\n      // 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面\n    ]\n    [\n        \"import\", {\n        \"libraryName\": 'antd',\n        \"style\": true, // 支持antd 按需引入less 当值为 \"css\"则引入antd css文件\n      }\n    ]\n  ]\n}\n```\n\n• 新建index.html\n```html\n  <!doctype html>\n  <html>\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\"\n          content=\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n    <title>Document</title>\n    <script src=\"../script/dll_script/react.dll.js\"></script>\n    <script src=\"../script/dll_script/commons.dll.js\"></script>\n    // 上面是引用的生成的dll js文件 如果不设置dll则可以不引用 如果webpack里面设置了这里必须引用\n  </head>\n  <body>\n    <noscript>\n      You need to enable JavaScript to run this app.\n    </noscript>\n    <div id=\"root\"></div>\n  </body>\n  </html>\n```","slug":"webpack创建项目","published":1,"updated":"2021-03-24T15:03:18.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1bk001dsi35lr7147ua","content":"<h3 id=\"webpack-新建项目流程\"><a href=\"#webpack-新建项目流程\" class=\"headerlink\" title=\"webpack 新建项目流程\"></a>webpack 新建项目流程</h3><ol>\n<li><p>始化项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目结构</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dist // 生成目录</span><br><span class=\"line\">├── dll_script // 生成的dll的js和manifest.json</span><br><span class=\"line\">│   ├── commons.dll.js</span><br><span class=\"line\">│   ├── commons.manifest.json</span><br><span class=\"line\">│   ├── react.dll.js</span><br><span class=\"line\">│   └── react.manifest.json</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public // html 模板和ico</span><br><span class=\"line\">│   ├── favicon.ico</span><br><span class=\"line\">│   └── index.html</span><br><span class=\"line\">├── script // webpack 配置脚本</span><br><span class=\"line\">│   ├── webpack.build.js</span><br><span class=\"line\">│   ├── webpack.common.js</span><br><span class=\"line\">│   ├── webpack.dev.js</span><br><span class=\"line\">│   └── webpack.dll.js</span><br><span class=\"line\">├── src // 项目文件</span><br><span class=\"line\">│   ├── history</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   ├── page</span><br><span class=\"line\">│   │   ├── Home</span><br><span class=\"line\">│   │   │   ├── index.jsx</span><br><span class=\"line\">│   │   │   └── index.less</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   └── store</span><br><span class=\"line\">│       └── index.js</span><br><span class=\"line\">└── yarn.lock</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装webpack及插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D</span><br><span class=\"line\"><span class=\"comment\">// html-webpack-plugin 将生成的javascript文件打到模板 index.html上</span></span><br><span class=\"line\"><span class=\"comment\">// clean-webpack-plugin 清除生成的文件</span></span><br><span class=\"line\"><span class=\"comment\">// webpack-dev-server   本地服务器</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装babel和loader</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @babel/core @babel/preset-env @babel/preset-react -D</span><br><span class=\"line\"><span class=\"comment\">// babel-loader和@babel/core是核心模块</span></span><br><span class=\"line\"><span class=\"comment\">// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript</span></span><br><span class=\"line\"><span class=\"comment\">// @babel/preset-react 转换JSX</span></span><br><span class=\"line\">yarn add babel-loader less-loader css-loader style-loader -D</span><br><span class=\"line\"><span class=\"comment\">// less-loader css-loader style-loader less文件loader 顺序是 style =&gt; css =&gt; less 执行过程是相反的</span></span><br><span class=\"line\">yarn add less -D</span><br><span class=\"line\">yarn add file-loader -D</span><br><span class=\"line\">yarn add url-loader -D</span><br><span class=\"line\">yarn add babel-plugin-<span class=\"keyword\">import</span> -D</span><br><span class=\"line\"><span class=\"comment\">// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置babel .babelrc</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">  <span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"import\"</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">'antd'</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 支持antd 按需引入less 当值为 \"css\"则引入antd css文件</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置webpack.config.js</p>\n</li>\n</ol>\n<ul>\n<li><p>webpack.common.js // webpack 共用配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123; <span class=\"comment\">// 入口</span></span><br><span class=\"line\">    main: path.resolve(__dirname, <span class=\"string\">'../src/index.js'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123; <span class=\"comment\">// 出口</span></span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span> <span class=\"comment\">// 上cdn的需要配置此项</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>], <span class=\"comment\">// 配置此项后就可以通过index直接引入不需要写后缀</span></span><br><span class=\"line\">    alias: &#123; <span class=\"comment\">// 别名</span></span><br><span class=\"line\">      <span class=\"string\">\"@src\"</span>: path.resolve(__dirname, <span class=\"string\">'../src'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"babel-loader\"], // 两种方式都可以</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"babel-loader\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"less-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              javascriptEnabled: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style.loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(jpg|jepg|png|gif)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[name].[ext]'</span>,</span><br><span class=\"line\">              outputPath: <span class=\"string\">'images/'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(eot|woff2|ttf|svg)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[name].[ext]'</span>,</span><br><span class=\"line\">              outputPath: <span class=\"string\">\"fonts/\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 拆分打包</span></span><br><span class=\"line\">  optimzation: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>,<span class=\"comment\">// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用</span></span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">'~'</span>,  <span class=\"comment\">// 生成文件名的文件链接符</span></span><br><span class=\"line\">      name: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启自定义名称效果，</span></span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">        priority: <span class=\"number\">-10</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">        filename: <span class=\"string\">\"vendors.js\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// default: false // false为禁止default及最后打包为vendors和入口的main</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123; <span class=\"comment\">// 打包为chunk.js vendors.js 及入口的main.js</span></span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>, </span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          filename: <span class=\"string\">'chunk.js'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [ <span class=\"comment\">// manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">      manifest: <span class=\"built_in\">require</span>(<span class=\"string\">'../dll_script/commons.manifest.json'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">      manifest: <span class=\"built_in\">require</span>(<span class=\"string\">'../dll_script/react.manifest.json'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.dev.js // dev 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackCommon = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">webpackCommon.plugins.push(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: path.resolve(__dirname, <span class=\"string\">'../public/index.html'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">webpackCommon.plugins.push(<span class=\"keyword\">new</span> CleanWebpackPlugin())</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevConfig = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">\"cheap-source-map\"</span>, <span class=\"comment\">// 映射</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">8090</span>, <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    open: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">// 404时返回首页</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Object</span>.assgin(webpackDevConfig, webpackCommon);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.build.js // 打包配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackCommon = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpackCommon.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackBuildConfig = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Object</span>.assgin(webpackBuildConfig, webpackCommon);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.dll.js // 生成dll.js和json配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDllConfig = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    react: [<span class=\"string\">'react'</span>, <span class=\"string\">'react-dom'</span>, <span class=\"string\">'react-router'</span>, <span class=\"string\">'react-router-dom'</span>, <span class=\"string\">'mobx-react'</span>],</span><br><span class=\"line\">    <span class=\"comment\">//  mobx-react 应该是和react有依赖关系所以要和react放到一起</span></span><br><span class=\"line\">    commons: [<span class=\"string\">'mobx'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].dll.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../dll_script'</span>),</span><br><span class=\"line\">    library: <span class=\"string\">'[name]'</span> <span class=\"comment\">// 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import</span></span><br><span class=\"line\">    <span class=\"comment\">// 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(&#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'../dll_script'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllPlugin(&#123;</span><br><span class=\"line\">        name: <span class=\"string\">'[name]'</span>,</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'../dll_script/[name].manifest.json'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>package.json 里面添加脚本命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpackDemo\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --config ./script/webpack.dev.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config ./script/webpack.build.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dll\"</span>: <span class=\"string\">\"webpack --config ./script/webpack.dll.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@babel/core\"</span>: <span class=\"string\">\"^7.7.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span>: <span class=\"string\">\"^7.7.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>: <span class=\"string\">\"^7.7.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/preset-env\"</span>: <span class=\"string\">\"^7.7.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/preset-react\"</span>: <span class=\"string\">\"^7.7.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^8.0.6\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-plugin-import\"</span>: <span class=\"string\">\"^1.13.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^3.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^5.0.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"less\"</span>: <span class=\"string\">\"^3.10.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"less-loader\"</span>: <span class=\"string\">\"^5.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.41.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.3.10\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^3.10.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"antd\"</span>: <span class=\"string\">\"^3.26.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx\"</span>: <span class=\"string\">\"^5.15.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx-react\"</span>: <span class=\"string\">\"^6.1.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^16.12.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^16.12.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router\"</span>: <span class=\"string\">\"^5.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router-dom\"</span>: <span class=\"string\">\"^5.1.2\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置项目babel支持@修饰符<br>• 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/plugin-proposal-<span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">properties</span> @<span class=\"title\">babel</span>/<span class=\"title\">plugin</span>-<span class=\"title\">proposal</span>-<span class=\"title\">decorators</span> -<span class=\"title\">D</span></span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>• 修改.babelrc</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"legacy\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span></span><br><span class=\"line\">      <span class=\"comment\">// 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">\"import\"</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">'antd'</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 支持antd 按需引入less 当值为 \"css\"则引入antd css文件</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>• 新建index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/dll_script/react.dll.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/dll_script/commons.dll.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  // 上面是引用的生成的dll js文件 如果不设置dll则可以不引用 如果webpack里面设置了这里必须引用</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">    You need to enable JavaScript to run this app.</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"webpack-新建项目流程\"><a href=\"#webpack-新建项目流程\" class=\"headerlink\" title=\"webpack 新建项目流程\"></a>webpack 新建项目流程</h3><ol>\n<li><p>始化项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建项目结构</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── dist // 生成目录</span><br><span class=\"line\">├── dll_script // 生成的dll的js和manifest.json</span><br><span class=\"line\">│   ├── commons.dll.js</span><br><span class=\"line\">│   ├── commons.manifest.json</span><br><span class=\"line\">│   ├── react.dll.js</span><br><span class=\"line\">│   └── react.manifest.json</span><br><span class=\"line\">├── package.json</span><br><span class=\"line\">├── public // html 模板和ico</span><br><span class=\"line\">│   ├── favicon.ico</span><br><span class=\"line\">│   └── index.html</span><br><span class=\"line\">├── script // webpack 配置脚本</span><br><span class=\"line\">│   ├── webpack.build.js</span><br><span class=\"line\">│   ├── webpack.common.js</span><br><span class=\"line\">│   ├── webpack.dev.js</span><br><span class=\"line\">│   └── webpack.dll.js</span><br><span class=\"line\">├── src // 项目文件</span><br><span class=\"line\">│   ├── history</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   ├── index.js</span><br><span class=\"line\">│   ├── page</span><br><span class=\"line\">│   │   ├── Home</span><br><span class=\"line\">│   │   │   ├── index.jsx</span><br><span class=\"line\">│   │   │   └── index.less</span><br><span class=\"line\">│   │   └── index.js</span><br><span class=\"line\">│   └── store</span><br><span class=\"line\">│       └── index.js</span><br><span class=\"line\">└── yarn.lock</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装webpack及插件</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack webpack-cli html-webpack-plugin webpack-dev-server clean-webpack-plugin -D</span><br><span class=\"line\"><span class=\"comment\">// html-webpack-plugin 将生成的javascript文件打到模板 index.html上</span></span><br><span class=\"line\"><span class=\"comment\">// clean-webpack-plugin 清除生成的文件</span></span><br><span class=\"line\"><span class=\"comment\">// webpack-dev-server   本地服务器</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>安装babel和loader</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add @babel/core @babel/preset-env @babel/preset-react -D</span><br><span class=\"line\"><span class=\"comment\">// babel-loader和@babel/core是核心模块</span></span><br><span class=\"line\"><span class=\"comment\">// @babel/preset-env是一个智能预设，允许您使用最新的JavaScript</span></span><br><span class=\"line\"><span class=\"comment\">// @babel/preset-react 转换JSX</span></span><br><span class=\"line\">yarn add babel-loader less-loader css-loader style-loader -D</span><br><span class=\"line\"><span class=\"comment\">// less-loader css-loader style-loader less文件loader 顺序是 style =&gt; css =&gt; less 执行过程是相反的</span></span><br><span class=\"line\">yarn add less -D</span><br><span class=\"line\">yarn add file-loader -D</span><br><span class=\"line\">yarn add url-loader -D</span><br><span class=\"line\">yarn add babel-plugin-<span class=\"keyword\">import</span> -D</span><br><span class=\"line\"><span class=\"comment\">// file-loader和url-loader 基本差不多区别在与 url会把图片转成base64</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置babel .babelrc</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">  <span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">      <span class=\"string\">\"import\"</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">'antd'</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 支持antd 按需引入less 当值为 \"css\"则引入antd css文件</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置webpack.config.js</p>\n</li>\n</ol>\n<ul>\n<li><p>webpack.common.js // webpack 共用配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  entry: &#123; <span class=\"comment\">// 入口</span></span><br><span class=\"line\">    main: path.resolve(__dirname, <span class=\"string\">'../src/index.js'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123; <span class=\"comment\">// 出口</span></span><br><span class=\"line\">    filename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    chunkFilename: <span class=\"string\">'[name].js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../dist'</span>),</span><br><span class=\"line\">    publicPath: <span class=\"string\">'/'</span> <span class=\"comment\">// 上cdn的需要配置此项</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    extensions: [<span class=\"string\">'.js'</span>, <span class=\"string\">'.jsx'</span>], <span class=\"comment\">// 配置此项后就可以通过index直接引入不需要写后缀</span></span><br><span class=\"line\">    alias: &#123; <span class=\"comment\">// 别名</span></span><br><span class=\"line\">      <span class=\"string\">\"@src\"</span>: path.resolve(__dirname, <span class=\"string\">'../src'</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        <span class=\"comment\">// use: [\"babel-loader\"], // 两种方式都可以</span></span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"babel-loader\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"less-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              javascriptEnabled: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"style.loader\"</span></span><br><span class=\"line\">          &#125;,</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"css-loader\"</span></span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(jpg|jepg|png|gif)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[name].[ext]'</span>,</span><br><span class=\"line\">              outputPath: <span class=\"string\">'images/'</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(eot|woff2|ttf|svg)$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">          &#123;</span><br><span class=\"line\">            loader: <span class=\"string\">\"file-loader\"</span>,</span><br><span class=\"line\">            options: &#123;</span><br><span class=\"line\">              name: <span class=\"string\">'[name].[ext]'</span>,</span><br><span class=\"line\">              outputPath: <span class=\"string\">\"fonts/\"</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">// 拆分打包</span></span><br><span class=\"line\">  optimzation: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">      chunks: <span class=\"string\">'all'</span>,<span class=\"comment\">// 只对异步引入代码起作用，设置all时并同时配置vendors才对两者起作用</span></span><br><span class=\"line\">      automaticNameDelimiter: <span class=\"string\">'~'</span>,  <span class=\"comment\">// 生成文件名的文件链接符</span></span><br><span class=\"line\">      name: <span class=\"literal\">true</span>, <span class=\"comment\">// 开启自定义名称效果，</span></span><br><span class=\"line\">      cacheGroups: &#123;</span><br><span class=\"line\">        vendors: &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/[\\\\/]node_modules[\\\\/]/</span>,</span><br><span class=\"line\">        priority: <span class=\"number\">-10</span>, <span class=\"comment\">// 优先级</span></span><br><span class=\"line\">        filename: <span class=\"string\">\"vendors.js\"</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      <span class=\"comment\">// default: false // false为禁止default及最后打包为vendors和入口的main</span></span><br><span class=\"line\">        <span class=\"keyword\">default</span>: &#123; <span class=\"comment\">// 打包为chunk.js vendors.js 及入口的main.js</span></span><br><span class=\"line\">          priority: <span class=\"number\">-20</span>, </span><br><span class=\"line\">          reuseExistingChunk: <span class=\"literal\">true</span>,</span><br><span class=\"line\">          filename: <span class=\"string\">'chunk.js'</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [ <span class=\"comment\">// manifest 的地址和名称对应webpack.dll.js里面的配置 提升打包速度优化</span></span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">      manifest: <span class=\"built_in\">require</span>(<span class=\"string\">'../dll_script/commons.manifest.json'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllReferencePlugin(&#123;</span><br><span class=\"line\">      manifest: <span class=\"built_in\">require</span>(<span class=\"string\">'../dll_script/react.manifest.json'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.dev.js // dev 配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackCommon = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpack.common.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">webpackCommon.plugins.push(</span><br><span class=\"line\">  <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">    template: path.resolve(__dirname, <span class=\"string\">'../public/index.html'</span>);</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">)</span><br><span class=\"line\">webpackCommon.plugins.push(<span class=\"keyword\">new</span> CleanWebpackPlugin())</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDevConfig = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>,</span><br><span class=\"line\">  devtool: <span class=\"string\">\"cheap-source-map\"</span>, <span class=\"comment\">// 映射</span></span><br><span class=\"line\">  devServer: &#123;</span><br><span class=\"line\">    port: <span class=\"number\">8090</span>, <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    open: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">    historyApiFallback: <span class=\"literal\">true</span>, <span class=\"comment\">// 404时返回首页</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Object</span>.assgin(webpackDevConfig, webpackCommon);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.build.js // 打包配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> webpackCommon = <span class=\"built_in\">require</span>(<span class=\"string\">'./webpackCommon.js'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackBuildConfig = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"built_in\">Object</span>.assgin(webpackBuildConfig, webpackCommon);</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>webpack.dll.js // 生成dll.js和json配置</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">'webpack'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> &#123; CleanWebpackPlugin &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">'clean-webpack-plugin'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> webpackDllConfig = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'production'</span>,</span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    react: [<span class=\"string\">'react'</span>, <span class=\"string\">'react-dom'</span>, <span class=\"string\">'react-router'</span>, <span class=\"string\">'react-router-dom'</span>, <span class=\"string\">'mobx-react'</span>],</span><br><span class=\"line\">    <span class=\"comment\">//  mobx-react 应该是和react有依赖关系所以要和react放到一起</span></span><br><span class=\"line\">    commons: [<span class=\"string\">'mobx'</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'[name].dll.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'../dll_script'</span>),</span><br><span class=\"line\">    library: <span class=\"string\">'[name]'</span> <span class=\"comment\">// 目前理解为将dll打包后暴露出来一个对应的变量，以便导入import</span></span><br><span class=\"line\">    <span class=\"comment\">// 更多 https://webpack.docschina.org/guides/author-libraries/#%E6%9A%B4%E9%9C%B2-library</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> CleanWebpackPlugin(&#123;</span><br><span class=\"line\">        path: path.resolve(__dirname, <span class=\"string\">'../dll_script'</span>)</span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.DllPlugin(&#123;</span><br><span class=\"line\">        name: <span class=\"string\">'[name]'</span>,</span><br><span class=\"line\">      path: path.resolve(__dirname, <span class=\"string\">'../dll_script/[name].manifest.json'</span>)</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol start=\"7\">\n<li><p>package.json 里面添加脚本命令</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"string\">\"name\"</span>: <span class=\"string\">\"webpackDemo\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"version\"</span>: <span class=\"string\">\"1.0.0\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"description\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"main\"</span>: <span class=\"string\">\"index.js\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"scripts\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --config ./script/webpack.dev.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack --config ./script/webpack.build.js\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"dll\"</span>: <span class=\"string\">\"webpack --config ./script/webpack.dll.js\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"keywords\"</span>: [],</span><br><span class=\"line\">  <span class=\"string\">\"author\"</span>: <span class=\"string\">\"\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"license\"</span>: <span class=\"string\">\"ISC\"</span>,</span><br><span class=\"line\">  <span class=\"string\">\"devDependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"@babel/core\"</span>: <span class=\"string\">\"^7.7.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span>: <span class=\"string\">\"^7.7.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>: <span class=\"string\">\"^7.7.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/preset-env\"</span>: <span class=\"string\">\"^7.7.7\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"@babel/preset-react\"</span>: <span class=\"string\">\"^7.7.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-loader\"</span>: <span class=\"string\">\"^8.0.6\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"babel-plugin-import\"</span>: <span class=\"string\">\"^1.13.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"clean-webpack-plugin\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"css-loader\"</span>: <span class=\"string\">\"^3.4.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"file-loader\"</span>: <span class=\"string\">\"^5.0.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"html-webpack-plugin\"</span>: <span class=\"string\">\"^3.2.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"less\"</span>: <span class=\"string\">\"^3.10.3\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"less-loader\"</span>: <span class=\"string\">\"^5.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"style-loader\"</span>: <span class=\"string\">\"^1.1.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"url-loader\"</span>: <span class=\"string\">\"^3.0.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack\"</span>: <span class=\"string\">\"^4.41.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack-cli\"</span>: <span class=\"string\">\"^3.3.10\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"webpack-dev-server\"</span>: <span class=\"string\">\"^3.10.1\"</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"string\">\"dependencies\"</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">\"antd\"</span>: <span class=\"string\">\"^3.26.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx\"</span>: <span class=\"string\">\"^5.15.1\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"mobx-react\"</span>: <span class=\"string\">\"^6.1.4\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react\"</span>: <span class=\"string\">\"^16.12.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-dom\"</span>: <span class=\"string\">\"^16.12.0\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router\"</span>: <span class=\"string\">\"^5.1.2\"</span>,</span><br><span class=\"line\">    <span class=\"string\">\"react-router-dom\"</span>: <span class=\"string\">\"^5.1.2\"</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置项目babel支持@修饰符<br>• 安装babel插件@babel/plugin-proposal-class-properties， @babel/plugin-proposal-decorators</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install @babel/plugin-proposal-<span class=\"class\"><span class=\"keyword\">class</span>-<span class=\"title\">properties</span> @<span class=\"title\">babel</span>/<span class=\"title\">plugin</span>-<span class=\"title\">proposal</span>-<span class=\"title\">decorators</span> -<span class=\"title\">D</span></span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>• 修改.babelrc</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">\"presets\"</span>: [</span><br><span class=\"line\">    <span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span></span><br><span class=\"line\">  ],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-proposal-decorators\"</span>,</span><br><span class=\"line\">      <span class=\"comment\">// 装饰器插件 要放到\"@babel/plugin-proposal-class-properties\"之前</span></span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        <span class=\"string\">\"legacy\"</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">\"@babel/plugin-proposal-class-properties\"</span></span><br><span class=\"line\">      <span class=\"comment\">// 是类中定义实例属性的新方法,以前定义实例的属性只能写在constructor中，现在可以直接写在外面</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">    [</span><br><span class=\"line\">        <span class=\"string\">\"import\"</span>, &#123;</span><br><span class=\"line\">        <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">'antd'</span>,</span><br><span class=\"line\">        <span class=\"string\">\"style\"</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 支持antd 按需引入less 当值为 \"css\"则引入antd css文件</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>• 新建index.html</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!doctype html&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">\"UTF-8\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">\"viewport\"</span></span></span><br><span class=\"line\"><span class=\"tag\">        <span class=\"attr\">content</span>=<span class=\"string\">\"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">\"X-UA-Compatible\"</span> <span class=\"attr\">content</span>=<span class=\"string\">\"ie=edge\"</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/dll_script/react.dll.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">\"../script/dll_script/commons.dll.js\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  // 上面是引用的生成的dll js文件 如果不设置dll则可以不引用 如果webpack里面设置了这里必须引用</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">    You need to enable JavaScript to run this app.</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">noscript</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">\"root\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"webpack构建react开发环境","date":"2019-09-08T07:29:18.000Z","_content":"\n\n\n### 创建项目\n\n```\nnpm init -y\n```\n\n\n\n### 安装依赖\n\n\n\n- 安装react\n\n\n\n```\nnpm i react react-dom --save\n```\n\n\n\n\n\n- 安装babel\n\n\n\n```\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react babel-plugin-import --D\n```\n\n\n\n\n\n- 安装webpack\n\n\n\n```\nnpm i webpack webpack-cli webpack-dev-server --D\n```\n\n\n\n\n\n### 创建webpack和babel配置文件\n\n\n\n- 创建 .babelrc文件\n\n\n\n```js\n\"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\n    [\"import\", { //按需加载antd样式\n       \"libraryName\": \"antd\",\n      \"libraryDirectory\": \"es\",\n      \"style\": \"css\"\n     }]\n  ]\n}\n```\n\n\n\n- 创建webpack,config.js 文件\n\n\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  mode: 'development', // 开发环境\n  devtool: 'eval-source-map', // 报错映射\n  entry: './index.js', //入口\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [\n              ['import',{libraryName: 'antd',style: 'css'}]\n            ]\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      {\n        test: /\\.less$/,\n        use: ['style-loader','css-loader','less-loader'], // 顺序从右往左写\n        exclude: /node_modules/ //  排除antd的less样式\n      },\n      {\n        test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n        use:['url-loader']\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({ // 设置html模板\n      title: 'test',\n      template: './public/index.html'\n    })\n  ],\n  resolve: {\n    alias: { // 创建别名\n      '@src': path.resolve(__dirname,'src'),\n      'components': path.resolve(__dirname,\"src/componts/\")\n    }\n  }\n}\n```\n\n\n\n### package.json 文件里面添加快捷命令\n\n\n\n```js\n\"build\": \"webpack\",\n\"start\": \"webpack-dev-server --open --mode development --history-api-fallback\"\n```\n\n","source":"_posts/webpack构建react开发环境.md","raw":"---\ntitle: webpack构建react开发环境\ndate: 2019-09-08 15:29:18\ntags: [webpack, react, 开发环境]\n---\n\n\n\n### 创建项目\n\n```\nnpm init -y\n```\n\n\n\n### 安装依赖\n\n\n\n- 安装react\n\n\n\n```\nnpm i react react-dom --save\n```\n\n\n\n\n\n- 安装babel\n\n\n\n```\nnpm i babel-loader @babel/core @babel/preset-env @babel/preset-react babel-plugin-import --D\n```\n\n\n\n\n\n- 安装webpack\n\n\n\n```\nnpm i webpack webpack-cli webpack-dev-server --D\n```\n\n\n\n\n\n### 创建webpack和babel配置文件\n\n\n\n- 创建 .babelrc文件\n\n\n\n```js\n\"presets\": [\"@babel/preset-env\", \"@babel/preset-react\"],\n  \"plugins\": [\n    [\"import\", { //按需加载antd样式\n       \"libraryName\": \"antd\",\n      \"libraryDirectory\": \"es\",\n      \"style\": \"css\"\n     }]\n  ]\n}\n```\n\n\n\n- 创建webpack,config.js 文件\n\n\n\n```js\nconst path = require('path');\nconst HtmlWebpackPlugin = require('html-webpack-plugin');\n\nmodule.exports = {\n  mode: 'development', // 开发环境\n  devtool: 'eval-source-map', // 报错映射\n  entry: './index.js', //入口\n  output: {\n    filename: 'main.js',\n    path: path.resolve(__dirname, 'dist')\n  },\n  module: {\n    rules: [\n      {\n        test: /\\.(js|jsx)$/,\n        exclude: /node_modules/,\n        use: {\n          loader: 'babel-loader',\n          options: {\n            plugins: [\n              ['import',{libraryName: 'antd',style: 'css'}]\n            ]\n          }\n        }\n      },\n      {\n        test: /\\.css$/,\n        use: ['style-loader','css-loader']\n      },\n      {\n        test: /\\.less$/,\n        use: ['style-loader','css-loader','less-loader'], // 顺序从右往左写\n        exclude: /node_modules/ //  排除antd的less样式\n      },\n      {\n        test: /\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/,\n        use:['url-loader']\n      }\n    ]\n  },\n  plugins: [\n    new HtmlWebpackPlugin({ // 设置html模板\n      title: 'test',\n      template: './public/index.html'\n    })\n  ],\n  resolve: {\n    alias: { // 创建别名\n      '@src': path.resolve(__dirname,'src'),\n      'components': path.resolve(__dirname,\"src/componts/\")\n    }\n  }\n}\n```\n\n\n\n### package.json 文件里面添加快捷命令\n\n\n\n```js\n\"build\": \"webpack\",\n\"start\": \"webpack-dev-server --open --mode development --history-api-fallback\"\n```\n\n","slug":"webpack构建react开发环境","published":1,"updated":"2021-03-24T15:03:18.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1bq001esi35ajk67k7r","content":"<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ul>\n<li>安装react</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react react-dom --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装babel</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react babel-plugin-import --D</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装webpack</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli webpack-dev-server --D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建webpack和babel配置文件\"><a href=\"#创建webpack和babel配置文件\" class=\"headerlink\" title=\"创建webpack和babel配置文件\"></a>创建webpack和babel配置文件</h3><ul>\n<li>创建 .babelrc文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"import\"</span>, &#123; <span class=\"comment\">//按需加载antd样式</span></span><br><span class=\"line\">       <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">\"antd\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"libraryDirectory\"</span>: <span class=\"string\">\"es\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"style\"</span>: <span class=\"string\">\"css\"</span></span><br><span class=\"line\">     &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建webpack,config.js 文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>, <span class=\"comment\">// 开发环境</span></span><br><span class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>, <span class=\"comment\">// 报错映射</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./index.js'</span>, <span class=\"comment\">//入口</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            plugins: [</span><br><span class=\"line\">              [<span class=\"string\">'import'</span>,&#123;<span class=\"attr\">libraryName</span>: <span class=\"string\">'antd'</span>,<span class=\"attr\">style</span>: <span class=\"string\">'css'</span>&#125;]</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>], <span class=\"comment\">// 顺序从右往左写</span></span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span> <span class=\"comment\">//  排除antd的less样式</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/</span>,</span><br><span class=\"line\">        use:[<span class=\"string\">'url-loader'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"comment\">// 设置html模板</span></span><br><span class=\"line\">      title: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'./public/index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123; <span class=\"comment\">// 创建别名</span></span><br><span class=\"line\">      <span class=\"string\">'@src'</span>: path.resolve(__dirname,<span class=\"string\">'src'</span>),</span><br><span class=\"line\">      <span class=\"string\">'components'</span>: path.resolve(__dirname,<span class=\"string\">\"src/componts/\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-json-文件里面添加快捷命令\"><a href=\"#package-json-文件里面添加快捷命令\" class=\"headerlink\" title=\"package.json 文件里面添加快捷命令\"></a>package.json 文件里面添加快捷命令</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --open --mode development --history-api-fallback\"</span></span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"创建项目\"><a href=\"#创建项目\" class=\"headerlink\" title=\"创建项目\"></a>创建项目</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"安装依赖\"><a href=\"#安装依赖\" class=\"headerlink\" title=\"安装依赖\"></a>安装依赖</h3><ul>\n<li>安装react</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i react react-dom --save</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装babel</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i babel-loader @babel/core @babel/preset-env @babel/preset-react babel-plugin-import --D</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装webpack</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i webpack webpack-cli webpack-dev-server --D</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"创建webpack和babel配置文件\"><a href=\"#创建webpack和babel配置文件\" class=\"headerlink\" title=\"创建webpack和babel配置文件\"></a>创建webpack和babel配置文件</h3><ul>\n<li>创建 .babelrc文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"presets\"</span>: [<span class=\"string\">\"@babel/preset-env\"</span>, <span class=\"string\">\"@babel/preset-react\"</span>],</span><br><span class=\"line\">  <span class=\"string\">\"plugins\"</span>: [</span><br><span class=\"line\">    [<span class=\"string\">\"import\"</span>, &#123; <span class=\"comment\">//按需加载antd样式</span></span><br><span class=\"line\">       <span class=\"string\">\"libraryName\"</span>: <span class=\"string\">\"antd\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"libraryDirectory\"</span>: <span class=\"string\">\"es\"</span>,</span><br><span class=\"line\">      <span class=\"string\">\"style\"</span>: <span class=\"string\">\"css\"</span></span><br><span class=\"line\">     &#125;]</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建webpack,config.js 文件</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">'path'</span>);</span><br><span class=\"line\"><span class=\"keyword\">const</span> HtmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">'html-webpack-plugin'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">'development'</span>, <span class=\"comment\">// 开发环境</span></span><br><span class=\"line\">  devtool: <span class=\"string\">'eval-source-map'</span>, <span class=\"comment\">// 报错映射</span></span><br><span class=\"line\">  entry: <span class=\"string\">'./index.js'</span>, <span class=\"comment\">//入口</span></span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">'main.js'</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">'dist'</span>)</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"built_in\">module</span>: &#123;</span><br><span class=\"line\">    rules: [</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(js|jsx)$/</span>,</span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span>,</span><br><span class=\"line\">        use: &#123;</span><br><span class=\"line\">          loader: <span class=\"string\">'babel-loader'</span>,</span><br><span class=\"line\">          options: &#123;</span><br><span class=\"line\">            plugins: [</span><br><span class=\"line\">              [<span class=\"string\">'import'</span>,&#123;<span class=\"attr\">libraryName</span>: <span class=\"string\">'antd'</span>,<span class=\"attr\">style</span>: <span class=\"string\">'css'</span>&#125;]</span><br><span class=\"line\">            ]</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>]</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">        use: [<span class=\"string\">'style-loader'</span>,<span class=\"string\">'css-loader'</span>,<span class=\"string\">'less-loader'</span>], <span class=\"comment\">// 顺序从右往左写</span></span><br><span class=\"line\">        exclude: <span class=\"regexp\">/node_modules/</span> <span class=\"comment\">//  排除antd的less样式</span></span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.(gif|jpg|png|woff|svg|eot|ttf)\\??.*$/</span>,</span><br><span class=\"line\">        use:[<span class=\"string\">'url-loader'</span>]</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    ]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> HtmlWebpackPlugin(&#123; <span class=\"comment\">// 设置html模板</span></span><br><span class=\"line\">      title: <span class=\"string\">'test'</span>,</span><br><span class=\"line\">      template: <span class=\"string\">'./public/index.html'</span></span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  ],</span><br><span class=\"line\">  resolve: &#123;</span><br><span class=\"line\">    alias: &#123; <span class=\"comment\">// 创建别名</span></span><br><span class=\"line\">      <span class=\"string\">'@src'</span>: path.resolve(__dirname,<span class=\"string\">'src'</span>),</span><br><span class=\"line\">      <span class=\"string\">'components'</span>: path.resolve(__dirname,<span class=\"string\">\"src/componts/\"</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"package-json-文件里面添加快捷命令\"><a href=\"#package-json-文件里面添加快捷命令\" class=\"headerlink\" title=\"package.json 文件里面添加快捷命令\"></a>package.json 文件里面添加快捷命令</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">\"build\"</span>: <span class=\"string\">\"webpack\"</span>,</span><br><span class=\"line\"><span class=\"string\">\"start\"</span>: <span class=\"string\">\"webpack-dev-server --open --mode development --history-api-fallback\"</span></span><br></pre></td></tr></table></figure>\n\n"},{"title":"图片在父级里面填充铺满","date":"2019-09-08T07:45:33.000Z","_content":"\n\n\n使图片能在父级里面填充不拉伸, 以长度或宽度其中最大的填充缩放\n\n```css\nmax-width: 100%;\nmax-height: 100%;\nbackground-size: cover;\n```\n\n","source":"_posts/图片在父级里面填充铺满.md","raw":"---\ntitle: 图片在父级里面填充铺满\ndate: 2019-09-08 15:45:33\ntags: [cover, 填充铺满, 图片]\n---\n\n\n\n使图片能在父级里面填充不拉伸, 以长度或宽度其中最大的填充缩放\n\n```css\nmax-width: 100%;\nmax-height: 100%;\nbackground-size: cover;\n```\n\n","slug":"图片在父级里面填充铺满","published":1,"updated":"2021-03-24T15:03:18.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1bx001gsi35kug1u28e","content":"<p>使图片能在父级里面填充不拉伸, 以长度或宽度其中最大的填充缩放</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">max-width</span>: 100%;</span><br><span class=\"line\"><span class=\"selector-tag\">max-height</span>: 100%;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">cover</span>;</span><br></pre></td></tr></table></figure>\n\n","site":{"data":{}},"excerpt":"","more":"<p>使图片能在父级里面填充不拉伸, 以长度或宽度其中最大的填充缩放</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">max-width</span>: 100%;</span><br><span class=\"line\"><span class=\"selector-tag\">max-height</span>: 100%;</span><br><span class=\"line\"><span class=\"selector-tag\">background-size</span>: <span class=\"selector-tag\">cover</span>;</span><br></pre></td></tr></table></figure>\n\n"},{"title":"对于async和await的理解","date":"2019-09-08T07:37:30.000Z","_content":"\n**await 只能出现在 async 函数中(每个await外面肯定有一个async);**\n\n**async 声明一个异步函数, await等待一个异步函数**\n\n#### 在await里面return 一个结果,其实返回的是个Promise对象\n\n- 可以通过then的方式获取值;\n\n- await可以获取返回的promise里的值\n\n\n\n**await 可以等待promise也可以为常量 (个人理解为异步或同步)**\n\n---\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，`await` 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。\n\n---\n如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n\n---\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n\n> 看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。","source":"_posts/对于async和await的理解.md","raw":"---\ntitle: 对于async和await的理解\ndate: 2019-09-08 15:37:30\ntags: [async, await]\n---\n\n**await 只能出现在 async 函数中(每个await外面肯定有一个async);**\n\n**async 声明一个异步函数, await等待一个异步函数**\n\n#### 在await里面return 一个结果,其实返回的是个Promise对象\n\n- 可以通过then的方式获取值;\n\n- await可以获取返回的promise里的值\n\n\n\n**await 可以等待promise也可以为常量 (个人理解为异步或同步)**\n\n---\nawait 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，`await` 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。\n\n---\n如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。\n\n---\n如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。\n\n\n> 看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。","slug":"对于async和await的理解","published":1,"updated":"2021-03-24T15:03:18.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1ca001isi35mvukp1ag","content":"<p><strong>await 只能出现在 async 函数中(每个await外面肯定有一个async);</strong></p>\n<p><strong>async 声明一个异步函数, await等待一个异步函数</strong></p>\n<h4 id=\"在await里面return-一个结果-其实返回的是个Promise对象\"><a href=\"#在await里面return-一个结果-其实返回的是个Promise对象\" class=\"headerlink\" title=\"在await里面return 一个结果,其实返回的是个Promise对象\"></a>在await里面return 一个结果,其实返回的是个Promise对象</h4><ul>\n<li><p>可以通过then的方式获取值;</p>\n</li>\n<li><p>await可以获取返回的promise里的值</p>\n</li>\n</ul>\n<p><strong>await 可以等待promise也可以为常量 (个人理解为异步或同步)</strong></p>\n<hr>\n<p>await 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，<code>await</code> 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p>\n<hr>\n<p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</p>\n<hr>\n<p>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p>\n<blockquote>\n<p>看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>await 只能出现在 async 函数中(每个await外面肯定有一个async);</strong></p>\n<p><strong>async 声明一个异步函数, await等待一个异步函数</strong></p>\n<h4 id=\"在await里面return-一个结果-其实返回的是个Promise对象\"><a href=\"#在await里面return-一个结果-其实返回的是个Promise对象\" class=\"headerlink\" title=\"在await里面return 一个结果,其实返回的是个Promise对象\"></a>在await里面return 一个结果,其实返回的是个Promise对象</h4><ul>\n<li><p>可以通过then的方式获取值;</p>\n</li>\n<li><p>await可以获取返回的promise里的值</p>\n</li>\n</ul>\n<p><strong>await 可以等待promise也可以为常量 (个人理解为异步或同步)</strong></p>\n<hr>\n<p>await 等到了它要等的东西，一个 Promise 对象，或者其它值，然后呢？我不得不先说，<code>await</code> 是个运算符，用于组成表达式，await 表达式的运算结果取决于它等的东西。</p>\n<hr>\n<p>如果它等到的不是一个 Promise 对象，那 await 表达式的运算结果就是它等到的东西。</p>\n<hr>\n<p>如果它等到的是一个 Promise 对象，await 就忙起来了，它会阻塞后面的代码，等着 Promise 对象 resolve，然后得到 resolve 的值，作为 await 表达式的运算结果。</p>\n<blockquote>\n<p>看到上面的阻塞一词，心慌了吧……放心，这就是 await 必须用在 async 函数中的原因。async 函数调用不会造成阻塞，它内部所有的阻塞都被封装在一个 Promise 对象中异步执行。</p>\n</blockquote>\n"},{"title":"数组对象去重","date":"2019-09-08T07:33:22.000Z","_content":"\n#### 原理:\n\n1. 将对象里的某一属性,添加到hash中以区别是否重复,给item添加flag标识,\n\n2. 后面通过filter flag去重\n\n```js\ndata = [\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 1231,\n  label: haha1\n  }\n]\n\n\n@action norepeat = (data) => { // 根据对象里的value值去重\n  const hash = [];\n  data.forEach(item => {\n    if (hash.indexOf(item.value) === -1) {\n      item.flag = true;\n      hash.push(item.value);\n  };\n  })\n  return data.filter(item => item.flag);\n};\n```","source":"_posts/数组对象去重.md","raw":"---\ntitle: 数组对象去重\ndate: 2019-09-08 15:33:22\ntags: [数组对象, 去重]\n---\n\n#### 原理:\n\n1. 将对象里的某一属性,添加到hash中以区别是否重复,给item添加flag标识,\n\n2. 后面通过filter flag去重\n\n```js\ndata = [\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 123,\n  label: haha\n  },\n  {\n  value: 1231,\n  label: haha1\n  }\n]\n\n\n@action norepeat = (data) => { // 根据对象里的value值去重\n  const hash = [];\n  data.forEach(item => {\n    if (hash.indexOf(item.value) === -1) {\n      item.flag = true;\n      hash.push(item.value);\n  };\n  })\n  return data.filter(item => item.flag);\n};\n```","slug":"数组对象去重","published":1,"updated":"2021-03-24T15:03:18.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1ch001lsi351r41h8at","content":"<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h4><ol>\n<li><p>将对象里的某一属性,添加到hash中以区别是否重复,给item添加flag标识,</p>\n</li>\n<li><p>后面通过filter flag去重</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  value: <span class=\"number\">123</span>,</span><br><span class=\"line\">  label: haha</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  value: <span class=\"number\">123</span>,</span><br><span class=\"line\">  label: haha</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  value: <span class=\"number\">1231</span>,</span><br><span class=\"line\">  label: haha1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@action norepeat = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123; <span class=\"comment\">// 根据对象里的value值去重</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = [];</span><br><span class=\"line\">  data.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.indexOf(item.value) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      item.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      hash.push(item.value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.flag);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h4 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理:\"></a>原理:</h4><ol>\n<li><p>将对象里的某一属性,添加到hash中以区别是否重复,给item添加flag标识,</p>\n</li>\n<li><p>后面通过filter flag去重</p>\n</li>\n</ol>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">data = [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  value: <span class=\"number\">123</span>,</span><br><span class=\"line\">  label: haha</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  value: <span class=\"number\">123</span>,</span><br><span class=\"line\">  label: haha</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">  value: <span class=\"number\">1231</span>,</span><br><span class=\"line\">  label: haha1</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">@action norepeat = <span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123; <span class=\"comment\">// 根据对象里的value值去重</span></span><br><span class=\"line\">  <span class=\"keyword\">const</span> hash = [];</span><br><span class=\"line\">  data.forEach(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (hash.indexOf(item.value) === <span class=\"number\">-1</span>) &#123;</span><br><span class=\"line\">      item.flag = <span class=\"literal\">true</span>;</span><br><span class=\"line\">      hash.push(item.value);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  <span class=\"keyword\">return</span> data.filter(<span class=\"function\"><span class=\"params\">item</span> =&gt;</span> item.flag);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"纯CSS画的基本图形","date":"2019-09-08T07:21:51.000Z","_content":"\n# [【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么](https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html)\n\n\n\n### **网页链接：**https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\n\n------\n\n　　今天在css-tricks上看到一篇文章，那篇文章让我不禁心头一震，强大的CSS啊，居然能画出这么多基本的图形。图形包括基本的矩形、圆形、椭圆、三角形、多边形，也包括稍微复杂一点的爱心、钻石、阴阳八卦等。当然有一些需要用到CSS3的属性，所以在你打开这篇文章的时候，我希望你用的是firefox或者chrome，当然IE也能看一部分的。那好，下面就一起来看看我们是如何用纯CSS来画这些图形的，如果你也觉得很震撼，推荐给你的朋友吧。\n\n\n\n1、正方形\n\n\n\n最终效果： \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #square {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n2、长方形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #rectangle {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n 3、圆形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #circle {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 50px;\n6     -webkit-border-radius: 50px;\n7     border-radius: 50px;\n8 }\n```\n\n\n\n4、椭圆 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #oval {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 100px / 50px;\n6     -webkit-border-radius: 100px / 50px;\n7     border-radius: 100px / 50px;\n8 }\n```\n\n\n\n5、上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-up {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-bottom: 100px solid red;\n7 }\n```\n\n\n\n 6、下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-down {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-top: 100px solid red;\n7 }\n```\n\n\n\n7、左三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-left {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-right: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n8、右三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下： \n\n\n\n```\n1 #triangle-right {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-left: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n9、左上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topleft {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-right: 100px solid transparent;          \n6 }\n```\n\n\n\n10、右上三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topright {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-left: 100px solid transparent;\n6      \n7 }\n```\n\n\n\n 11、左下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomleft {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-right: 100px solid transparent;  \n6 }\n```\n\n\n\n12、右下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomright {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-left: 100px solid transparent;\n6 }\n```\n\n\n\n13、平行四边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #parallelogram {\n2     width: 150px;\n3     height: 100px;\n4     margin-left:20px;\n5     -webkit-transform: skew(20deg);\n6     -moz-transform: skew(20deg);\n7     -o-transform: skew(20deg);\n8     background: red;\n9 }\n```\n\n\n\n 14、梯形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #trapezoid {\n2     border-bottom: 100px solid red;\n3     border-left: 50px solid transparent;\n4     border-right: 50px solid transparent;\n5     height: 0;\n6     width: 100px;\n7 }\n```\n\n\n\n 15、六角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-six {\n 2     width: 0;\n 3     height: 0;\n 4     border-left: 50px solid transparent;\n 5     border-right: 50px solid transparent;\n 6     border-bottom: 100px solid red;\n 7     position: relative;\n 8 }\n 9 #star-six:after {\n10     width: 0;\n11     height: 0;\n12     border-left: 50px solid transparent;\n13     border-right: 50px solid transparent;\n14     border-top: 100px solid red;\n15     position: absolute;\n16     content: \"\";\n17     top: 30px;\n18     left: -50px;\n19 }\n```\n\n\n\n16、五角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-five {\n 2    margin: 50px 0;\n 3    position: relative;\n 4    display: block;\n 5    color: red;\n 6    width: 0px;\n 7    height: 0px;\n 8    border-right:  100px solid transparent;\n 9    border-bottom: 70px  solid red;\n10    border-left:   100px solid transparent;\n11    -moz-transform:    rotate(35deg);\n12    -webkit-transform: rotate(35deg);\n13    -ms-transform:     rotate(35deg);\n14    -o-transform:      rotate(35deg);\n15 }\n16 #star-five:before {\n17    border-bottom: 80px solid red;\n18    border-left: 30px solid transparent;\n19    border-right: 30px solid transparent;\n20    position: absolute;\n21    height: 0;\n22    width: 0;\n23    top: -45px;\n24    left: -65px;\n25    display: block;\n26    content: '';\n27    -webkit-transform: rotate(-35deg);\n28    -moz-transform:    rotate(-35deg);\n29    -ms-transform:     rotate(-35deg);\n30    -o-transform:      rotate(-35deg);\n31     \n32 }\n33 #star-five:after {\n34    position: absolute;\n35    display: block;\n36    color: red;\n37    top: 3px;\n38    left: -105px;\n39    width: 0px;\n40    height: 0px;\n41    border-right: 100px solid transparent;\n42    border-bottom: 70px solid red;\n43    border-left: 100px solid transparent;\n44    -webkit-transform: rotate(-70deg);\n45    -moz-transform:    rotate(-70deg);\n46    -ms-transform:     rotate(-70deg);\n47    -o-transform:      rotate(-70deg);\n48    content: '';\n49 }\n```\n\n\n\n17、五角大楼 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pentagon {\n 2     position: relative;\n 3     width: 54px;\n 4     border-width: 50px 18px 0;\n 5     border-style: solid;\n 6     border-color: red transparent;\n 7 }\n 8 #pentagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     height: 0;\n12     width: 0;\n13     top: -85px;\n14     left: -18px;\n15     border-width: 0 45px 35px;\n16     border-style: solid;\n17     border-color: transparent transparent red;\n18 }\n```\n\n\n\n18、六边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #hexagon {\n 2     width: 100px;\n 3     height: 55px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7 #hexagon:before {\n 8     content: \"\";\n 9     position: absolute;\n10     top: -25px;\n11     left: 0;\n12     width: 0;\n13     height: 0;\n14     border-left: 50px solid transparent;\n15     border-right: 50px solid transparent;\n16     border-bottom: 25px solid red;\n17 }\n18 #hexagon:after {\n19     content: \"\";\n20     position: absolute;\n21     bottom: -25px;\n22     left: 0;\n23     width: 0;\n24     height: 0;\n25     border-left: 50px solid transparent;\n26     border-right: 50px solid transparent;\n27     border-top: 25px solid red;\n28 }\n```\n\n\n\n19、八角形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #octagon {\n 2     width: 100px;\n 3     height: 100px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7  \n 8 #octagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;   \n13     border-bottom: 29px solid red;\n14     border-left: 29px solid #eee;\n15     border-right: 29px solid #eee;\n16     width: 42px;\n17     height: 0;\n18 }\n19  \n20 #octagon:after {\n21     content: \"\";\n22     position: absolute;\n23     bottom: 0;\n24     left: 0;   \n25     border-top: 29px solid red;\n26     border-left: 29px solid #eee;\n27     border-right: 29px solid #eee;\n28     width: 42px;\n29     height: 0;\n30 }\n```\n\n\n\n20、爱心 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #heart {\n 2     position: relative;\n 3     width: 100px;\n 4     height: 90px;\n 5 }\n 6 #heart:before,\n 7 #heart:after {\n 8     position: absolute;\n 9     content: \"\";\n10     left: 50px;\n11     top: 0;\n12     width: 50px;\n13     height: 80px;\n14     background: red;\n15     -moz-border-radius: 50px 50px 0 0;\n16     border-radius: 50px 50px 0 0;\n17     -webkit-transform: rotate(-45deg);\n18        -moz-transform: rotate(-45deg);\n19         -ms-transform: rotate(-45deg);\n20          -o-transform: rotate(-45deg);\n21             transform: rotate(-45deg);\n22     -webkit-transform-origin: 0 100%;\n23        -moz-transform-origin: 0 100%;\n24         -ms-transform-origin: 0 100%;\n25          -o-transform-origin: 0 100%;\n26             transform-origin: 0 100%;\n27 }\n28 #heart:after {\n29     left: 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35     -webkit-transform-origin: 100% 100%;\n36        -moz-transform-origin: 100% 100%;\n37         -ms-transform-origin: 100% 100%;\n38          -o-transform-origin: 100% 100%;\n39             transform-origin :100% 100%;\n40 }\n```\n\n\n\n21、无穷大符号 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #infinity {\n 2     position: relative;\n 3     width: 212px;\n 4     height: 100px;\n 5 }\n 6  \n 7 #infinity:before,\n 8 #infinity:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     width: 60px;\n14     height: 60px;   \n15     border: 20px solid red;\n16     -moz-border-radius: 50px 50px 0 50px;\n17          border-radius: 50px 50px 0 50px;\n18     -webkit-transform: rotate(-45deg);\n19        -moz-transform: rotate(-45deg);\n20         -ms-transform: rotate(-45deg);\n21          -o-transform: rotate(-45deg);\n22             transform: rotate(-45deg);\n23 }\n24  \n25 #infinity:after {\n26     left: auto;\n27     right: 0;\n28     -moz-border-radius: 50px 50px 50px 0;\n29          border-radius: 50px 50px 50px 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35 }\n```\n\n\n\n22、鸡蛋 \n\n\n\n最终效果\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n#egg {\n   display:block;\n   width: 126px;\n   height: 180px;\n   background-color: red;\n   -webkit-border-radius: 63px 63px 63px 63px / 108px 108px 72px 72px;\n   border-radius: 50%   50%  50%  50%  / 60%   60%   40%  40%;\n}\n```\n\n\n\n 23、食逗人（Pac-Man） \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pacman {\n 2   width: 0px;\n 3   height: 0px;\n 4   border-right: 60px solid transparent;\n 5   border-top: 60px solid red;\n 6   border-left: 60px solid red;\n 7   border-bottom: 60px solid red;\n 8   border-top-left-radius: 60px;\n 9   border-top-right-radius: 60px;\n10   border-bottom-left-radius: 60px;\n11   border-bottom-right-radius: 60px;\n12 }\n```\n\n\n\n24、提示对话框\n\n\n\n \n\n\n\n   \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #talkbubble {\n 2    width: 120px;\n 3    height: 80px;\n 4    background: red;\n 5    position: relative;\n 6    -moz-border-radius:    10px;\n 7    -webkit-border-radius: 10px;\n 8    border-radius:         10px;\n 9 }\n10 #talkbubble:before {\n11    content:\"\";\n12    position: absolute;\n13    right: 100%;\n14    top: 26px;\n15    width: 0;\n16    height: 0;\n17    border-top: 13px solid transparent;\n18    border-right: 26px solid red;\n19    border-bottom: 13px solid transparent;\n20 }\n```\n\n\n\n25、12角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #burst-12 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7 }\n 8 #burst-12:before, #burst-12:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     height: 80px;\n14     width: 80px;\n15     background: red;\n16 }\n17 #burst-12:before {\n18     -webkit-transform: rotate(30deg);\n19        -moz-transform: rotate(30deg);\n20         -ms-transform: rotate(30deg);\n21          -o-transform: rotate(30deg);\n22             transform: rotate(30deg);\n23 }\n24 #burst-12:after {\n25     -webkit-transform: rotate(60deg);\n26        -moz-transform: rotate(60deg);\n27         -ms-transform: rotate(60deg);\n28          -o-transform: rotate(60deg);\n29             transform: rotate(60deg);\n30 }\n```\n\n\n\n26、8角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #burst-8 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7     -webkit-transform: rotate(20deg);\n 8        -moz-transform: rotate(20deg);\n 9         -ms-transform: rotate(20deg);\n10          -o-transform: rotate(20eg);\n11             transform: rotate(20deg);\n12 }\n13 #burst-8:before {\n14     content: \"\";\n15     position: absolute;\n16     top: 0;\n17     left: 0;\n18     height: 80px;\n19     width: 80px;\n20     background: red;\n21     -webkit-transform: rotate(135deg);\n22        -moz-transform: rotate(135deg);\n23         -ms-transform: rotate(135deg);\n24          -o-transform: rotate(135deg);\n25             transform: rotate(135deg);\n26 }\n```\n\n\n\n27、钻石 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #cut-diamond {\n 2     border-style: solid;\n 3     border-color: transparent transparent red transparent;\n 4     border-width: 0 25px 25px 25px;\n 5     height: 0;\n 6     width: 50px;\n 7     position: relative;\n 8     margin: 20px 0 50px 0;\n 9 }\n10 #cut-diamond:after {\n11     content: \"\";\n12     position: absolute;\n13     top: 25px;\n14     left: -25px;\n15     width: 0;\n16     height: 0;\n17     border-style: solid;\n18     border-color: red transparent transparent transparent;\n19     border-width: 70px 50px 0 50px;\n20 }\n```\n\n\n\n28、阴阳八卦（霸气的这个）\n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #yin-yang {\n 2     width: 96px;\n 3     height: 48px;\n 4     background: #eee;\n 5     border-color: red;\n 6     border-style: solid;\n 7     border-width: 2px 2px 50px 2px;\n 8     border-radius: 100%;\n 9     position: relative;\n10 }\n11  \n12 #yin-yang:before {\n13     content: \"\";\n14     position: absolute;\n15     top: 50%;\n16     left: 0;\n17     background: #eee;\n18     border: 18px solid red;\n19     border-radius: 100%;\n20     width: 12px;\n21     height: 12px;\n22 }\n23  \n24 #yin-yang:after {\n25     content: \"\";\n26     position: absolute;\n27     top: 50%;\n28     left: 50%;\n29     background: red;\n30     border: 18px solid #eee;\n31     border-radius:100%;\n32     width: 12px;\n33     height: 12px;\n34 }\n```\n\n\n\n　　好了，就到这里了，一共28个，个人觉得后面几个比较犀利。这些代码的来源是[css-tricks](http://css-tricks.com/examples/ShapesOfCSS/)。由[青藤屋](http://www.itivy.com/ivy)博客整理，转载请保留原文链接：\n\n\n\nhttp://www.itivy.com/ivy/archive/2012/1/16/css-shape.html","source":"_posts/纯CSS画的基本图形.md","raw":"---\ntitle: 纯CSS画的基本图形\ndate: 2019-09-08 15:21:51\ntags: [css, 图形]\n---\n\n# [【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么](https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html)\n\n\n\n### **网页链接：**https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\n\n------\n\n　　今天在css-tricks上看到一篇文章，那篇文章让我不禁心头一震，强大的CSS啊，居然能画出这么多基本的图形。图形包括基本的矩形、圆形、椭圆、三角形、多边形，也包括稍微复杂一点的爱心、钻石、阴阳八卦等。当然有一些需要用到CSS3的属性，所以在你打开这篇文章的时候，我希望你用的是firefox或者chrome，当然IE也能看一部分的。那好，下面就一起来看看我们是如何用纯CSS来画这些图形的，如果你也觉得很震撼，推荐给你的朋友吧。\n\n\n\n1、正方形\n\n\n\n最终效果： \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #square {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n2、长方形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #rectangle {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5 }\n```\n\n\n\n 3、圆形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #circle {\n2     width: 100px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 50px;\n6     -webkit-border-radius: 50px;\n7     border-radius: 50px;\n8 }\n```\n\n\n\n4、椭圆 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #oval {\n2     width: 200px;\n3     height: 100px;\n4     background: red;\n5     -moz-border-radius: 100px / 50px;\n6     -webkit-border-radius: 100px / 50px;\n7     border-radius: 100px / 50px;\n8 }\n```\n\n\n\n5、上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-up {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-bottom: 100px solid red;\n7 }\n```\n\n\n\n 6、下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-down {\n2     width: 0;\n3     height: 0;\n4     border-left: 50px solid transparent;\n5     border-right: 50px solid transparent;\n6     border-top: 100px solid red;\n7 }\n```\n\n\n\n7、左三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-left {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-right: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n8、右三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下： \n\n\n\n```\n1 #triangle-right {\n2     width: 0;\n3     height: 0;\n4     border-top: 50px solid transparent;\n5     border-left: 100px solid red;\n6     border-bottom: 50px solid transparent;\n7 }\n```\n\n\n\n9、左上三角\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topleft {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-right: 100px solid transparent;          \n6 }\n```\n\n\n\n10、右上三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-topright {\n2     width: 0;\n3     height: 0;\n4     border-top: 100px solid red;\n5     border-left: 100px solid transparent;\n6      \n7 }\n```\n\n\n\n 11、左下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomleft {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-right: 100px solid transparent;  \n6 }\n```\n\n\n\n12、右下三角 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #triangle-bottomright {\n2     width: 0;\n3     height: 0;\n4     border-bottom: 100px solid red;\n5     border-left: 100px solid transparent;\n6 }\n```\n\n\n\n13、平行四边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #parallelogram {\n2     width: 150px;\n3     height: 100px;\n4     margin-left:20px;\n5     -webkit-transform: skew(20deg);\n6     -moz-transform: skew(20deg);\n7     -o-transform: skew(20deg);\n8     background: red;\n9 }\n```\n\n\n\n 14、梯形\n\n\n\n 最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #trapezoid {\n2     border-bottom: 100px solid red;\n3     border-left: 50px solid transparent;\n4     border-right: 50px solid transparent;\n5     height: 0;\n6     width: 100px;\n7 }\n```\n\n\n\n 15、六角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-six {\n 2     width: 0;\n 3     height: 0;\n 4     border-left: 50px solid transparent;\n 5     border-right: 50px solid transparent;\n 6     border-bottom: 100px solid red;\n 7     position: relative;\n 8 }\n 9 #star-six:after {\n10     width: 0;\n11     height: 0;\n12     border-left: 50px solid transparent;\n13     border-right: 50px solid transparent;\n14     border-top: 100px solid red;\n15     position: absolute;\n16     content: \"\";\n17     top: 30px;\n18     left: -50px;\n19 }\n```\n\n\n\n16、五角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #star-five {\n 2    margin: 50px 0;\n 3    position: relative;\n 4    display: block;\n 5    color: red;\n 6    width: 0px;\n 7    height: 0px;\n 8    border-right:  100px solid transparent;\n 9    border-bottom: 70px  solid red;\n10    border-left:   100px solid transparent;\n11    -moz-transform:    rotate(35deg);\n12    -webkit-transform: rotate(35deg);\n13    -ms-transform:     rotate(35deg);\n14    -o-transform:      rotate(35deg);\n15 }\n16 #star-five:before {\n17    border-bottom: 80px solid red;\n18    border-left: 30px solid transparent;\n19    border-right: 30px solid transparent;\n20    position: absolute;\n21    height: 0;\n22    width: 0;\n23    top: -45px;\n24    left: -65px;\n25    display: block;\n26    content: '';\n27    -webkit-transform: rotate(-35deg);\n28    -moz-transform:    rotate(-35deg);\n29    -ms-transform:     rotate(-35deg);\n30    -o-transform:      rotate(-35deg);\n31     \n32 }\n33 #star-five:after {\n34    position: absolute;\n35    display: block;\n36    color: red;\n37    top: 3px;\n38    left: -105px;\n39    width: 0px;\n40    height: 0px;\n41    border-right: 100px solid transparent;\n42    border-bottom: 70px solid red;\n43    border-left: 100px solid transparent;\n44    -webkit-transform: rotate(-70deg);\n45    -moz-transform:    rotate(-70deg);\n46    -ms-transform:     rotate(-70deg);\n47    -o-transform:      rotate(-70deg);\n48    content: '';\n49 }\n```\n\n\n\n17、五角大楼 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pentagon {\n 2     position: relative;\n 3     width: 54px;\n 4     border-width: 50px 18px 0;\n 5     border-style: solid;\n 6     border-color: red transparent;\n 7 }\n 8 #pentagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     height: 0;\n12     width: 0;\n13     top: -85px;\n14     left: -18px;\n15     border-width: 0 45px 35px;\n16     border-style: solid;\n17     border-color: transparent transparent red;\n18 }\n```\n\n\n\n18、六边形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #hexagon {\n 2     width: 100px;\n 3     height: 55px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7 #hexagon:before {\n 8     content: \"\";\n 9     position: absolute;\n10     top: -25px;\n11     left: 0;\n12     width: 0;\n13     height: 0;\n14     border-left: 50px solid transparent;\n15     border-right: 50px solid transparent;\n16     border-bottom: 25px solid red;\n17 }\n18 #hexagon:after {\n19     content: \"\";\n20     position: absolute;\n21     bottom: -25px;\n22     left: 0;\n23     width: 0;\n24     height: 0;\n25     border-left: 50px solid transparent;\n26     border-right: 50px solid transparent;\n27     border-top: 25px solid red;\n28 }\n```\n\n\n\n19、八角形 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #octagon {\n 2     width: 100px;\n 3     height: 100px;\n 4     background: red;\n 5     position: relative;\n 6 }\n 7  \n 8 #octagon:before {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;   \n13     border-bottom: 29px solid red;\n14     border-left: 29px solid #eee;\n15     border-right: 29px solid #eee;\n16     width: 42px;\n17     height: 0;\n18 }\n19  \n20 #octagon:after {\n21     content: \"\";\n22     position: absolute;\n23     bottom: 0;\n24     left: 0;   \n25     border-top: 29px solid red;\n26     border-left: 29px solid #eee;\n27     border-right: 29px solid #eee;\n28     width: 42px;\n29     height: 0;\n30 }\n```\n\n\n\n20、爱心 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #heart {\n 2     position: relative;\n 3     width: 100px;\n 4     height: 90px;\n 5 }\n 6 #heart:before,\n 7 #heart:after {\n 8     position: absolute;\n 9     content: \"\";\n10     left: 50px;\n11     top: 0;\n12     width: 50px;\n13     height: 80px;\n14     background: red;\n15     -moz-border-radius: 50px 50px 0 0;\n16     border-radius: 50px 50px 0 0;\n17     -webkit-transform: rotate(-45deg);\n18        -moz-transform: rotate(-45deg);\n19         -ms-transform: rotate(-45deg);\n20          -o-transform: rotate(-45deg);\n21             transform: rotate(-45deg);\n22     -webkit-transform-origin: 0 100%;\n23        -moz-transform-origin: 0 100%;\n24         -ms-transform-origin: 0 100%;\n25          -o-transform-origin: 0 100%;\n26             transform-origin: 0 100%;\n27 }\n28 #heart:after {\n29     left: 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35     -webkit-transform-origin: 100% 100%;\n36        -moz-transform-origin: 100% 100%;\n37         -ms-transform-origin: 100% 100%;\n38          -o-transform-origin: 100% 100%;\n39             transform-origin :100% 100%;\n40 }\n```\n\n\n\n21、无穷大符号 \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #infinity {\n 2     position: relative;\n 3     width: 212px;\n 4     height: 100px;\n 5 }\n 6  \n 7 #infinity:before,\n 8 #infinity:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     width: 60px;\n14     height: 60px;   \n15     border: 20px solid red;\n16     -moz-border-radius: 50px 50px 0 50px;\n17          border-radius: 50px 50px 0 50px;\n18     -webkit-transform: rotate(-45deg);\n19        -moz-transform: rotate(-45deg);\n20         -ms-transform: rotate(-45deg);\n21          -o-transform: rotate(-45deg);\n22             transform: rotate(-45deg);\n23 }\n24  \n25 #infinity:after {\n26     left: auto;\n27     right: 0;\n28     -moz-border-radius: 50px 50px 50px 0;\n29          border-radius: 50px 50px 50px 0;\n30     -webkit-transform: rotate(45deg);\n31        -moz-transform: rotate(45deg);\n32         -ms-transform: rotate(45deg);\n33          -o-transform: rotate(45deg);\n34             transform: rotate(45deg);\n35 }\n```\n\n\n\n22、鸡蛋 \n\n\n\n最终效果\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n#egg {\n   display:block;\n   width: 126px;\n   height: 180px;\n   background-color: red;\n   -webkit-border-radius: 63px 63px 63px 63px / 108px 108px 72px 72px;\n   border-radius: 50%   50%  50%  50%  / 60%   60%   40%  40%;\n}\n```\n\n\n\n 23、食逗人（Pac-Man） \n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #pacman {\n 2   width: 0px;\n 3   height: 0px;\n 4   border-right: 60px solid transparent;\n 5   border-top: 60px solid red;\n 6   border-left: 60px solid red;\n 7   border-bottom: 60px solid red;\n 8   border-top-left-radius: 60px;\n 9   border-top-right-radius: 60px;\n10   border-bottom-left-radius: 60px;\n11   border-bottom-right-radius: 60px;\n12 }\n```\n\n\n\n24、提示对话框\n\n\n\n \n\n\n\n   \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #talkbubble {\n 2    width: 120px;\n 3    height: 80px;\n 4    background: red;\n 5    position: relative;\n 6    -moz-border-radius:    10px;\n 7    -webkit-border-radius: 10px;\n 8    border-radius:         10px;\n 9 }\n10 #talkbubble:before {\n11    content:\"\";\n12    position: absolute;\n13    right: 100%;\n14    top: 26px;\n15    width: 0;\n16    height: 0;\n17    border-top: 13px solid transparent;\n18    border-right: 26px solid red;\n19    border-bottom: 13px solid transparent;\n20 }\n```\n\n\n\n25、12角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #burst-12 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7 }\n 8 #burst-12:before, #burst-12:after {\n 9     content: \"\";\n10     position: absolute;\n11     top: 0;\n12     left: 0;\n13     height: 80px;\n14     width: 80px;\n15     background: red;\n16 }\n17 #burst-12:before {\n18     -webkit-transform: rotate(30deg);\n19        -moz-transform: rotate(30deg);\n20         -ms-transform: rotate(30deg);\n21          -o-transform: rotate(30deg);\n22             transform: rotate(30deg);\n23 }\n24 #burst-12:after {\n25     -webkit-transform: rotate(60deg);\n26        -moz-transform: rotate(60deg);\n27         -ms-transform: rotate(60deg);\n28          -o-transform: rotate(60deg);\n29             transform: rotate(60deg);\n30 }\n```\n\n\n\n26、8角星 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #burst-8 {\n 2     background: red;\n 3     width: 80px;\n 4     height: 80px;\n 5     position: relative;\n 6     text-align: center;\n 7     -webkit-transform: rotate(20deg);\n 8        -moz-transform: rotate(20deg);\n 9         -ms-transform: rotate(20deg);\n10          -o-transform: rotate(20eg);\n11             transform: rotate(20deg);\n12 }\n13 #burst-8:before {\n14     content: \"\";\n15     position: absolute;\n16     top: 0;\n17     left: 0;\n18     height: 80px;\n19     width: 80px;\n20     background: red;\n21     -webkit-transform: rotate(135deg);\n22        -moz-transform: rotate(135deg);\n23         -ms-transform: rotate(135deg);\n24          -o-transform: rotate(135deg);\n25             transform: rotate(135deg);\n26 }\n```\n\n\n\n27、钻石 \n\n\n\n最终效果：\n\n\n\n \n\n\n\n \n\n\n\n CSS代码如下：\n\n\n\n```\n1 #cut-diamond {\n 2     border-style: solid;\n 3     border-color: transparent transparent red transparent;\n 4     border-width: 0 25px 25px 25px;\n 5     height: 0;\n 6     width: 50px;\n 7     position: relative;\n 8     margin: 20px 0 50px 0;\n 9 }\n10 #cut-diamond:after {\n11     content: \"\";\n12     position: absolute;\n13     top: 25px;\n14     left: -25px;\n15     width: 0;\n16     height: 0;\n17     border-style: solid;\n18     border-color: red transparent transparent transparent;\n19     border-width: 70px 50px 0 50px;\n20 }\n```\n\n\n\n28、阴阳八卦（霸气的这个）\n\n\n\n最终效果：\n\n\n\n \n\n\n\nCSS代码如下：\n\n\n\n```\n1 #yin-yang {\n 2     width: 96px;\n 3     height: 48px;\n 4     background: #eee;\n 5     border-color: red;\n 6     border-style: solid;\n 7     border-width: 2px 2px 50px 2px;\n 8     border-radius: 100%;\n 9     position: relative;\n10 }\n11  \n12 #yin-yang:before {\n13     content: \"\";\n14     position: absolute;\n15     top: 50%;\n16     left: 0;\n17     background: #eee;\n18     border: 18px solid red;\n19     border-radius: 100%;\n20     width: 12px;\n21     height: 12px;\n22 }\n23  \n24 #yin-yang:after {\n25     content: \"\";\n26     position: absolute;\n27     top: 50%;\n28     left: 50%;\n29     background: red;\n30     border: 18px solid #eee;\n31     border-radius:100%;\n32     width: 12px;\n33     height: 12px;\n34 }\n```\n\n\n\n　　好了，就到这里了，一共28个，个人觉得后面几个比较犀利。这些代码的来源是[css-tricks](http://css-tricks.com/examples/ShapesOfCSS/)。由[青藤屋](http://www.itivy.com/ivy)博客整理，转载请保留原文链接：\n\n\n\nhttp://www.itivy.com/ivy/archive/2012/1/16/css-shape.html","slug":"纯CSS画的基本图形","published":1,"updated":"2021-03-24T15:03:18.280Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1co001nsi35nxmsmgym","content":"<h1 id=\"【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么\"><a href=\"#【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么\" class=\"headerlink\" title=\"【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么\"></a><a href=\"https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\" target=\"_blank\" rel=\"noopener\">【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么</a></h1><h3 id=\"网页链接：https-www-cnblogs-com-jscode-archive-2012-10-19-2730905-html\"><a href=\"#网页链接：https-www-cnblogs-com-jscode-archive-2012-10-19-2730905-html\" class=\"headerlink\" title=\"网页链接：https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\"></a><strong>网页链接：</strong><a href=\"https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html</a></h3><hr>\n<p>　　今天在css-tricks上看到一篇文章，那篇文章让我不禁心头一震，强大的CSS啊，居然能画出这么多基本的图形。图形包括基本的矩形、圆形、椭圆、三角形、多边形，也包括稍微复杂一点的爱心、钻石、阴阳八卦等。当然有一些需要用到CSS3的属性，所以在你打开这篇文章的时候，我希望你用的是firefox或者chrome，当然IE也能看一部分的。那好，下面就一起来看看我们是如何用纯CSS来画这些图形的，如果你也觉得很震撼，推荐给你的朋友吧。</p>\n<p>1、正方形</p>\n<p>最终效果： </p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #square &#123;</span><br><span class=\"line\">2     width: 100px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、长方形</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #rectangle &#123;</span><br><span class=\"line\">2     width: 200px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 3、圆形</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #circle &#123;</span><br><span class=\"line\">2     width: 100px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5     -moz-border-radius: 50px;</span><br><span class=\"line\">6     -webkit-border-radius: 50px;</span><br><span class=\"line\">7     border-radius: 50px;</span><br><span class=\"line\">8 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、椭圆 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #oval &#123;</span><br><span class=\"line\">2     width: 200px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5     -moz-border-radius: 100px / 50px;</span><br><span class=\"line\">6     -webkit-border-radius: 100px / 50px;</span><br><span class=\"line\">7     border-radius: 100px / 50px;</span><br><span class=\"line\">8 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、上三角</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-up &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-left: 50px solid transparent;</span><br><span class=\"line\">5     border-right: 50px solid transparent;</span><br><span class=\"line\">6     border-bottom: 100px solid red;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 6、下三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-down &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-left: 50px solid transparent;</span><br><span class=\"line\">5     border-right: 50px solid transparent;</span><br><span class=\"line\">6     border-top: 100px solid red;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、左三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-left &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 50px solid transparent;</span><br><span class=\"line\">5     border-right: 100px solid red;</span><br><span class=\"line\">6     border-bottom: 50px solid transparent;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>8、右三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-right &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 50px solid transparent;</span><br><span class=\"line\">5     border-left: 100px solid red;</span><br><span class=\"line\">6     border-bottom: 50px solid transparent;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>9、左上三角</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-topleft &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 100px solid red;</span><br><span class=\"line\">5     border-right: 100px solid transparent;          </span><br><span class=\"line\">6 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>10、右上三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-topright &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 100px solid red;</span><br><span class=\"line\">5     border-left: 100px solid transparent;</span><br><span class=\"line\">6      </span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 11、左下三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-bottomleft &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-bottom: 100px solid red;</span><br><span class=\"line\">5     border-right: 100px solid transparent;  </span><br><span class=\"line\">6 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>12、右下三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-bottomright &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-bottom: 100px solid red;</span><br><span class=\"line\">5     border-left: 100px solid transparent;</span><br><span class=\"line\">6 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>13、平行四边形 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #parallelogram &#123;</span><br><span class=\"line\">2     width: 150px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     margin-left:20px;</span><br><span class=\"line\">5     -webkit-transform: skew(20deg);</span><br><span class=\"line\">6     -moz-transform: skew(20deg);</span><br><span class=\"line\">7     -o-transform: skew(20deg);</span><br><span class=\"line\">8     background: red;</span><br><span class=\"line\">9 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 14、梯形</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #trapezoid &#123;</span><br><span class=\"line\">2     border-bottom: 100px solid red;</span><br><span class=\"line\">3     border-left: 50px solid transparent;</span><br><span class=\"line\">4     border-right: 50px solid transparent;</span><br><span class=\"line\">5     height: 0;</span><br><span class=\"line\">6     width: 100px;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 15、六角星 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #star-six &#123;</span><br><span class=\"line\"> 2     width: 0;</span><br><span class=\"line\"> 3     height: 0;</span><br><span class=\"line\"> 4     border-left: 50px solid transparent;</span><br><span class=\"line\"> 5     border-right: 50px solid transparent;</span><br><span class=\"line\"> 6     border-bottom: 100px solid red;</span><br><span class=\"line\"> 7     position: relative;</span><br><span class=\"line\"> 8 &#125;</span><br><span class=\"line\"> 9 #star-six:after &#123;</span><br><span class=\"line\">10     width: 0;</span><br><span class=\"line\">11     height: 0;</span><br><span class=\"line\">12     border-left: 50px solid transparent;</span><br><span class=\"line\">13     border-right: 50px solid transparent;</span><br><span class=\"line\">14     border-top: 100px solid red;</span><br><span class=\"line\">15     position: absolute;</span><br><span class=\"line\">16     content: &quot;&quot;;</span><br><span class=\"line\">17     top: 30px;</span><br><span class=\"line\">18     left: -50px;</span><br><span class=\"line\">19 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>16、五角星 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #star-five &#123;</span><br><span class=\"line\"> 2    margin: 50px 0;</span><br><span class=\"line\"> 3    position: relative;</span><br><span class=\"line\"> 4    display: block;</span><br><span class=\"line\"> 5    color: red;</span><br><span class=\"line\"> 6    width: 0px;</span><br><span class=\"line\"> 7    height: 0px;</span><br><span class=\"line\"> 8    border-right:  100px solid transparent;</span><br><span class=\"line\"> 9    border-bottom: 70px  solid red;</span><br><span class=\"line\">10    border-left:   100px solid transparent;</span><br><span class=\"line\">11    -moz-transform:    rotate(35deg);</span><br><span class=\"line\">12    -webkit-transform: rotate(35deg);</span><br><span class=\"line\">13    -ms-transform:     rotate(35deg);</span><br><span class=\"line\">14    -o-transform:      rotate(35deg);</span><br><span class=\"line\">15 &#125;</span><br><span class=\"line\">16 #star-five:before &#123;</span><br><span class=\"line\">17    border-bottom: 80px solid red;</span><br><span class=\"line\">18    border-left: 30px solid transparent;</span><br><span class=\"line\">19    border-right: 30px solid transparent;</span><br><span class=\"line\">20    position: absolute;</span><br><span class=\"line\">21    height: 0;</span><br><span class=\"line\">22    width: 0;</span><br><span class=\"line\">23    top: -45px;</span><br><span class=\"line\">24    left: -65px;</span><br><span class=\"line\">25    display: block;</span><br><span class=\"line\">26    content: &apos;&apos;;</span><br><span class=\"line\">27    -webkit-transform: rotate(-35deg);</span><br><span class=\"line\">28    -moz-transform:    rotate(-35deg);</span><br><span class=\"line\">29    -ms-transform:     rotate(-35deg);</span><br><span class=\"line\">30    -o-transform:      rotate(-35deg);</span><br><span class=\"line\">31     </span><br><span class=\"line\">32 &#125;</span><br><span class=\"line\">33 #star-five:after &#123;</span><br><span class=\"line\">34    position: absolute;</span><br><span class=\"line\">35    display: block;</span><br><span class=\"line\">36    color: red;</span><br><span class=\"line\">37    top: 3px;</span><br><span class=\"line\">38    left: -105px;</span><br><span class=\"line\">39    width: 0px;</span><br><span class=\"line\">40    height: 0px;</span><br><span class=\"line\">41    border-right: 100px solid transparent;</span><br><span class=\"line\">42    border-bottom: 70px solid red;</span><br><span class=\"line\">43    border-left: 100px solid transparent;</span><br><span class=\"line\">44    -webkit-transform: rotate(-70deg);</span><br><span class=\"line\">45    -moz-transform:    rotate(-70deg);</span><br><span class=\"line\">46    -ms-transform:     rotate(-70deg);</span><br><span class=\"line\">47    -o-transform:      rotate(-70deg);</span><br><span class=\"line\">48    content: &apos;&apos;;</span><br><span class=\"line\">49 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>17、五角大楼 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #pentagon &#123;</span><br><span class=\"line\"> 2     position: relative;</span><br><span class=\"line\"> 3     width: 54px;</span><br><span class=\"line\"> 4     border-width: 50px 18px 0;</span><br><span class=\"line\"> 5     border-style: solid;</span><br><span class=\"line\"> 6     border-color: red transparent;</span><br><span class=\"line\"> 7 &#125;</span><br><span class=\"line\"> 8 #pentagon:before &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     height: 0;</span><br><span class=\"line\">12     width: 0;</span><br><span class=\"line\">13     top: -85px;</span><br><span class=\"line\">14     left: -18px;</span><br><span class=\"line\">15     border-width: 0 45px 35px;</span><br><span class=\"line\">16     border-style: solid;</span><br><span class=\"line\">17     border-color: transparent transparent red;</span><br><span class=\"line\">18 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>18、六边形 </p>\n<p>最终效果：</p>\n<p> CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #hexagon &#123;</span><br><span class=\"line\"> 2     width: 100px;</span><br><span class=\"line\"> 3     height: 55px;</span><br><span class=\"line\"> 4     background: red;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6 &#125;</span><br><span class=\"line\"> 7 #hexagon:before &#123;</span><br><span class=\"line\"> 8     content: &quot;&quot;;</span><br><span class=\"line\"> 9     position: absolute;</span><br><span class=\"line\">10     top: -25px;</span><br><span class=\"line\">11     left: 0;</span><br><span class=\"line\">12     width: 0;</span><br><span class=\"line\">13     height: 0;</span><br><span class=\"line\">14     border-left: 50px solid transparent;</span><br><span class=\"line\">15     border-right: 50px solid transparent;</span><br><span class=\"line\">16     border-bottom: 25px solid red;</span><br><span class=\"line\">17 &#125;</span><br><span class=\"line\">18 #hexagon:after &#123;</span><br><span class=\"line\">19     content: &quot;&quot;;</span><br><span class=\"line\">20     position: absolute;</span><br><span class=\"line\">21     bottom: -25px;</span><br><span class=\"line\">22     left: 0;</span><br><span class=\"line\">23     width: 0;</span><br><span class=\"line\">24     height: 0;</span><br><span class=\"line\">25     border-left: 50px solid transparent;</span><br><span class=\"line\">26     border-right: 50px solid transparent;</span><br><span class=\"line\">27     border-top: 25px solid red;</span><br><span class=\"line\">28 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>19、八角形 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #octagon &#123;</span><br><span class=\"line\"> 2     width: 100px;</span><br><span class=\"line\"> 3     height: 100px;</span><br><span class=\"line\"> 4     background: red;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6 &#125;</span><br><span class=\"line\"> 7  </span><br><span class=\"line\"> 8 #octagon:before &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     left: 0;   </span><br><span class=\"line\">13     border-bottom: 29px solid red;</span><br><span class=\"line\">14     border-left: 29px solid #eee;</span><br><span class=\"line\">15     border-right: 29px solid #eee;</span><br><span class=\"line\">16     width: 42px;</span><br><span class=\"line\">17     height: 0;</span><br><span class=\"line\">18 &#125;</span><br><span class=\"line\">19  </span><br><span class=\"line\">20 #octagon:after &#123;</span><br><span class=\"line\">21     content: &quot;&quot;;</span><br><span class=\"line\">22     position: absolute;</span><br><span class=\"line\">23     bottom: 0;</span><br><span class=\"line\">24     left: 0;   </span><br><span class=\"line\">25     border-top: 29px solid red;</span><br><span class=\"line\">26     border-left: 29px solid #eee;</span><br><span class=\"line\">27     border-right: 29px solid #eee;</span><br><span class=\"line\">28     width: 42px;</span><br><span class=\"line\">29     height: 0;</span><br><span class=\"line\">30 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>20、爱心 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #heart &#123;</span><br><span class=\"line\"> 2     position: relative;</span><br><span class=\"line\"> 3     width: 100px;</span><br><span class=\"line\"> 4     height: 90px;</span><br><span class=\"line\"> 5 &#125;</span><br><span class=\"line\"> 6 #heart:before,</span><br><span class=\"line\"> 7 #heart:after &#123;</span><br><span class=\"line\"> 8     position: absolute;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     left: 50px;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     width: 50px;</span><br><span class=\"line\">13     height: 80px;</span><br><span class=\"line\">14     background: red;</span><br><span class=\"line\">15     -moz-border-radius: 50px 50px 0 0;</span><br><span class=\"line\">16     border-radius: 50px 50px 0 0;</span><br><span class=\"line\">17     -webkit-transform: rotate(-45deg);</span><br><span class=\"line\">18        -moz-transform: rotate(-45deg);</span><br><span class=\"line\">19         -ms-transform: rotate(-45deg);</span><br><span class=\"line\">20          -o-transform: rotate(-45deg);</span><br><span class=\"line\">21             transform: rotate(-45deg);</span><br><span class=\"line\">22     -webkit-transform-origin: 0 100%;</span><br><span class=\"line\">23        -moz-transform-origin: 0 100%;</span><br><span class=\"line\">24         -ms-transform-origin: 0 100%;</span><br><span class=\"line\">25          -o-transform-origin: 0 100%;</span><br><span class=\"line\">26             transform-origin: 0 100%;</span><br><span class=\"line\">27 &#125;</span><br><span class=\"line\">28 #heart:after &#123;</span><br><span class=\"line\">29     left: 0;</span><br><span class=\"line\">30     -webkit-transform: rotate(45deg);</span><br><span class=\"line\">31        -moz-transform: rotate(45deg);</span><br><span class=\"line\">32         -ms-transform: rotate(45deg);</span><br><span class=\"line\">33          -o-transform: rotate(45deg);</span><br><span class=\"line\">34             transform: rotate(45deg);</span><br><span class=\"line\">35     -webkit-transform-origin: 100% 100%;</span><br><span class=\"line\">36        -moz-transform-origin: 100% 100%;</span><br><span class=\"line\">37         -ms-transform-origin: 100% 100%;</span><br><span class=\"line\">38          -o-transform-origin: 100% 100%;</span><br><span class=\"line\">39             transform-origin :100% 100%;</span><br><span class=\"line\">40 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>21、无穷大符号 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #infinity &#123;</span><br><span class=\"line\"> 2     position: relative;</span><br><span class=\"line\"> 3     width: 212px;</span><br><span class=\"line\"> 4     height: 100px;</span><br><span class=\"line\"> 5 &#125;</span><br><span class=\"line\"> 6  </span><br><span class=\"line\"> 7 #infinity:before,</span><br><span class=\"line\"> 8 #infinity:after &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     left: 0;</span><br><span class=\"line\">13     width: 60px;</span><br><span class=\"line\">14     height: 60px;   </span><br><span class=\"line\">15     border: 20px solid red;</span><br><span class=\"line\">16     -moz-border-radius: 50px 50px 0 50px;</span><br><span class=\"line\">17          border-radius: 50px 50px 0 50px;</span><br><span class=\"line\">18     -webkit-transform: rotate(-45deg);</span><br><span class=\"line\">19        -moz-transform: rotate(-45deg);</span><br><span class=\"line\">20         -ms-transform: rotate(-45deg);</span><br><span class=\"line\">21          -o-transform: rotate(-45deg);</span><br><span class=\"line\">22             transform: rotate(-45deg);</span><br><span class=\"line\">23 &#125;</span><br><span class=\"line\">24  </span><br><span class=\"line\">25 #infinity:after &#123;</span><br><span class=\"line\">26     left: auto;</span><br><span class=\"line\">27     right: 0;</span><br><span class=\"line\">28     -moz-border-radius: 50px 50px 50px 0;</span><br><span class=\"line\">29          border-radius: 50px 50px 50px 0;</span><br><span class=\"line\">30     -webkit-transform: rotate(45deg);</span><br><span class=\"line\">31        -moz-transform: rotate(45deg);</span><br><span class=\"line\">32         -ms-transform: rotate(45deg);</span><br><span class=\"line\">33          -o-transform: rotate(45deg);</span><br><span class=\"line\">34             transform: rotate(45deg);</span><br><span class=\"line\">35 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>22、鸡蛋 </p>\n<p>最终效果</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#egg &#123;</span><br><span class=\"line\">   display:block;</span><br><span class=\"line\">   width: 126px;</span><br><span class=\"line\">   height: 180px;</span><br><span class=\"line\">   background-color: red;</span><br><span class=\"line\">   -webkit-border-radius: 63px 63px 63px 63px / 108px 108px 72px 72px;</span><br><span class=\"line\">   border-radius: 50%   50%  50%  50%  / 60%   60%   40%  40%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 23、食逗人（Pac-Man） </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #pacman &#123;</span><br><span class=\"line\"> 2   width: 0px;</span><br><span class=\"line\"> 3   height: 0px;</span><br><span class=\"line\"> 4   border-right: 60px solid transparent;</span><br><span class=\"line\"> 5   border-top: 60px solid red;</span><br><span class=\"line\"> 6   border-left: 60px solid red;</span><br><span class=\"line\"> 7   border-bottom: 60px solid red;</span><br><span class=\"line\"> 8   border-top-left-radius: 60px;</span><br><span class=\"line\"> 9   border-top-right-radius: 60px;</span><br><span class=\"line\">10   border-bottom-left-radius: 60px;</span><br><span class=\"line\">11   border-bottom-right-radius: 60px;</span><br><span class=\"line\">12 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>24、提示对话框</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #talkbubble &#123;</span><br><span class=\"line\"> 2    width: 120px;</span><br><span class=\"line\"> 3    height: 80px;</span><br><span class=\"line\"> 4    background: red;</span><br><span class=\"line\"> 5    position: relative;</span><br><span class=\"line\"> 6    -moz-border-radius:    10px;</span><br><span class=\"line\"> 7    -webkit-border-radius: 10px;</span><br><span class=\"line\"> 8    border-radius:         10px;</span><br><span class=\"line\"> 9 &#125;</span><br><span class=\"line\">10 #talkbubble:before &#123;</span><br><span class=\"line\">11    content:&quot;&quot;;</span><br><span class=\"line\">12    position: absolute;</span><br><span class=\"line\">13    right: 100%;</span><br><span class=\"line\">14    top: 26px;</span><br><span class=\"line\">15    width: 0;</span><br><span class=\"line\">16    height: 0;</span><br><span class=\"line\">17    border-top: 13px solid transparent;</span><br><span class=\"line\">18    border-right: 26px solid red;</span><br><span class=\"line\">19    border-bottom: 13px solid transparent;</span><br><span class=\"line\">20 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>25、12角星 </p>\n<p>最终效果：</p>\n<p> CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #burst-12 &#123;</span><br><span class=\"line\"> 2     background: red;</span><br><span class=\"line\"> 3     width: 80px;</span><br><span class=\"line\"> 4     height: 80px;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6     text-align: center;</span><br><span class=\"line\"> 7 &#125;</span><br><span class=\"line\"> 8 #burst-12:before, #burst-12:after &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     left: 0;</span><br><span class=\"line\">13     height: 80px;</span><br><span class=\"line\">14     width: 80px;</span><br><span class=\"line\">15     background: red;</span><br><span class=\"line\">16 &#125;</span><br><span class=\"line\">17 #burst-12:before &#123;</span><br><span class=\"line\">18     -webkit-transform: rotate(30deg);</span><br><span class=\"line\">19        -moz-transform: rotate(30deg);</span><br><span class=\"line\">20         -ms-transform: rotate(30deg);</span><br><span class=\"line\">21          -o-transform: rotate(30deg);</span><br><span class=\"line\">22             transform: rotate(30deg);</span><br><span class=\"line\">23 &#125;</span><br><span class=\"line\">24 #burst-12:after &#123;</span><br><span class=\"line\">25     -webkit-transform: rotate(60deg);</span><br><span class=\"line\">26        -moz-transform: rotate(60deg);</span><br><span class=\"line\">27         -ms-transform: rotate(60deg);</span><br><span class=\"line\">28          -o-transform: rotate(60deg);</span><br><span class=\"line\">29             transform: rotate(60deg);</span><br><span class=\"line\">30 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>26、8角星 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #burst-8 &#123;</span><br><span class=\"line\"> 2     background: red;</span><br><span class=\"line\"> 3     width: 80px;</span><br><span class=\"line\"> 4     height: 80px;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6     text-align: center;</span><br><span class=\"line\"> 7     -webkit-transform: rotate(20deg);</span><br><span class=\"line\"> 8        -moz-transform: rotate(20deg);</span><br><span class=\"line\"> 9         -ms-transform: rotate(20deg);</span><br><span class=\"line\">10          -o-transform: rotate(20eg);</span><br><span class=\"line\">11             transform: rotate(20deg);</span><br><span class=\"line\">12 &#125;</span><br><span class=\"line\">13 #burst-8:before &#123;</span><br><span class=\"line\">14     content: &quot;&quot;;</span><br><span class=\"line\">15     position: absolute;</span><br><span class=\"line\">16     top: 0;</span><br><span class=\"line\">17     left: 0;</span><br><span class=\"line\">18     height: 80px;</span><br><span class=\"line\">19     width: 80px;</span><br><span class=\"line\">20     background: red;</span><br><span class=\"line\">21     -webkit-transform: rotate(135deg);</span><br><span class=\"line\">22        -moz-transform: rotate(135deg);</span><br><span class=\"line\">23         -ms-transform: rotate(135deg);</span><br><span class=\"line\">24          -o-transform: rotate(135deg);</span><br><span class=\"line\">25             transform: rotate(135deg);</span><br><span class=\"line\">26 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>27、钻石 </p>\n<p>最终效果：</p>\n<p> CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #cut-diamond &#123;</span><br><span class=\"line\"> 2     border-style: solid;</span><br><span class=\"line\"> 3     border-color: transparent transparent red transparent;</span><br><span class=\"line\"> 4     border-width: 0 25px 25px 25px;</span><br><span class=\"line\"> 5     height: 0;</span><br><span class=\"line\"> 6     width: 50px;</span><br><span class=\"line\"> 7     position: relative;</span><br><span class=\"line\"> 8     margin: 20px 0 50px 0;</span><br><span class=\"line\"> 9 &#125;</span><br><span class=\"line\">10 #cut-diamond:after &#123;</span><br><span class=\"line\">11     content: &quot;&quot;;</span><br><span class=\"line\">12     position: absolute;</span><br><span class=\"line\">13     top: 25px;</span><br><span class=\"line\">14     left: -25px;</span><br><span class=\"line\">15     width: 0;</span><br><span class=\"line\">16     height: 0;</span><br><span class=\"line\">17     border-style: solid;</span><br><span class=\"line\">18     border-color: red transparent transparent transparent;</span><br><span class=\"line\">19     border-width: 70px 50px 0 50px;</span><br><span class=\"line\">20 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>28、阴阳八卦（霸气的这个）</p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #yin-yang &#123;</span><br><span class=\"line\"> 2     width: 96px;</span><br><span class=\"line\"> 3     height: 48px;</span><br><span class=\"line\"> 4     background: #eee;</span><br><span class=\"line\"> 5     border-color: red;</span><br><span class=\"line\"> 6     border-style: solid;</span><br><span class=\"line\"> 7     border-width: 2px 2px 50px 2px;</span><br><span class=\"line\"> 8     border-radius: 100%;</span><br><span class=\"line\"> 9     position: relative;</span><br><span class=\"line\">10 &#125;</span><br><span class=\"line\">11  </span><br><span class=\"line\">12 #yin-yang:before &#123;</span><br><span class=\"line\">13     content: &quot;&quot;;</span><br><span class=\"line\">14     position: absolute;</span><br><span class=\"line\">15     top: 50%;</span><br><span class=\"line\">16     left: 0;</span><br><span class=\"line\">17     background: #eee;</span><br><span class=\"line\">18     border: 18px solid red;</span><br><span class=\"line\">19     border-radius: 100%;</span><br><span class=\"line\">20     width: 12px;</span><br><span class=\"line\">21     height: 12px;</span><br><span class=\"line\">22 &#125;</span><br><span class=\"line\">23  </span><br><span class=\"line\">24 #yin-yang:after &#123;</span><br><span class=\"line\">25     content: &quot;&quot;;</span><br><span class=\"line\">26     position: absolute;</span><br><span class=\"line\">27     top: 50%;</span><br><span class=\"line\">28     left: 50%;</span><br><span class=\"line\">29     background: red;</span><br><span class=\"line\">30     border: 18px solid #eee;</span><br><span class=\"line\">31     border-radius:100%;</span><br><span class=\"line\">32     width: 12px;</span><br><span class=\"line\">33     height: 12px;</span><br><span class=\"line\">34 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　好了，就到这里了，一共28个，个人觉得后面几个比较犀利。这些代码的来源是<a href=\"http://css-tricks.com/examples/ShapesOfCSS/\" target=\"_blank\" rel=\"noopener\">css-tricks</a>。由<a href=\"http://www.itivy.com/ivy\" target=\"_blank\" rel=\"noopener\">青藤屋</a>博客整理，转载请保留原文链接：</p>\n<p><a href=\"http://www.itivy.com/ivy/archive/2012/1/16/css-shape.html\" target=\"_blank\" rel=\"noopener\">http://www.itivy.com/ivy/archive/2012/1/16/css-shape.html</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么\"><a href=\"#【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么\" class=\"headerlink\" title=\"【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么\"></a><a href=\"https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\" target=\"_blank\" rel=\"noopener\">【转】纯CSS画的基本图形（矩形、圆形、三角形、多边形、爱心、八卦等），NB么</a></h1><h3 id=\"网页链接：https-www-cnblogs-com-jscode-archive-2012-10-19-2730905-html\"><a href=\"#网页链接：https-www-cnblogs-com-jscode-archive-2012-10-19-2730905-html\" class=\"headerlink\" title=\"网页链接：https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\"></a><strong>网页链接：</strong><a href=\"https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html\" target=\"_blank\" rel=\"noopener\">https://www.cnblogs.com/jscode/archive/2012/10/19/2730905.html</a></h3><hr>\n<p>　　今天在css-tricks上看到一篇文章，那篇文章让我不禁心头一震，强大的CSS啊，居然能画出这么多基本的图形。图形包括基本的矩形、圆形、椭圆、三角形、多边形，也包括稍微复杂一点的爱心、钻石、阴阳八卦等。当然有一些需要用到CSS3的属性，所以在你打开这篇文章的时候，我希望你用的是firefox或者chrome，当然IE也能看一部分的。那好，下面就一起来看看我们是如何用纯CSS来画这些图形的，如果你也觉得很震撼，推荐给你的朋友吧。</p>\n<p>1、正方形</p>\n<p>最终效果： </p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #square &#123;</span><br><span class=\"line\">2     width: 100px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>2、长方形</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #rectangle &#123;</span><br><span class=\"line\">2     width: 200px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 3、圆形</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #circle &#123;</span><br><span class=\"line\">2     width: 100px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5     -moz-border-radius: 50px;</span><br><span class=\"line\">6     -webkit-border-radius: 50px;</span><br><span class=\"line\">7     border-radius: 50px;</span><br><span class=\"line\">8 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>4、椭圆 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #oval &#123;</span><br><span class=\"line\">2     width: 200px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     background: red;</span><br><span class=\"line\">5     -moz-border-radius: 100px / 50px;</span><br><span class=\"line\">6     -webkit-border-radius: 100px / 50px;</span><br><span class=\"line\">7     border-radius: 100px / 50px;</span><br><span class=\"line\">8 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>5、上三角</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-up &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-left: 50px solid transparent;</span><br><span class=\"line\">5     border-right: 50px solid transparent;</span><br><span class=\"line\">6     border-bottom: 100px solid red;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 6、下三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-down &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-left: 50px solid transparent;</span><br><span class=\"line\">5     border-right: 50px solid transparent;</span><br><span class=\"line\">6     border-top: 100px solid red;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>7、左三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-left &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 50px solid transparent;</span><br><span class=\"line\">5     border-right: 100px solid red;</span><br><span class=\"line\">6     border-bottom: 50px solid transparent;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>8、右三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下： </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-right &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 50px solid transparent;</span><br><span class=\"line\">5     border-left: 100px solid red;</span><br><span class=\"line\">6     border-bottom: 50px solid transparent;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>9、左上三角</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-topleft &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 100px solid red;</span><br><span class=\"line\">5     border-right: 100px solid transparent;          </span><br><span class=\"line\">6 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>10、右上三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-topright &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-top: 100px solid red;</span><br><span class=\"line\">5     border-left: 100px solid transparent;</span><br><span class=\"line\">6      </span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 11、左下三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-bottomleft &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-bottom: 100px solid red;</span><br><span class=\"line\">5     border-right: 100px solid transparent;  </span><br><span class=\"line\">6 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>12、右下三角 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #triangle-bottomright &#123;</span><br><span class=\"line\">2     width: 0;</span><br><span class=\"line\">3     height: 0;</span><br><span class=\"line\">4     border-bottom: 100px solid red;</span><br><span class=\"line\">5     border-left: 100px solid transparent;</span><br><span class=\"line\">6 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>13、平行四边形 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #parallelogram &#123;</span><br><span class=\"line\">2     width: 150px;</span><br><span class=\"line\">3     height: 100px;</span><br><span class=\"line\">4     margin-left:20px;</span><br><span class=\"line\">5     -webkit-transform: skew(20deg);</span><br><span class=\"line\">6     -moz-transform: skew(20deg);</span><br><span class=\"line\">7     -o-transform: skew(20deg);</span><br><span class=\"line\">8     background: red;</span><br><span class=\"line\">9 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 14、梯形</p>\n<p> 最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #trapezoid &#123;</span><br><span class=\"line\">2     border-bottom: 100px solid red;</span><br><span class=\"line\">3     border-left: 50px solid transparent;</span><br><span class=\"line\">4     border-right: 50px solid transparent;</span><br><span class=\"line\">5     height: 0;</span><br><span class=\"line\">6     width: 100px;</span><br><span class=\"line\">7 &#125;</span><br></pre></td></tr></table></figure>\n\n<p> 15、六角星 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #star-six &#123;</span><br><span class=\"line\"> 2     width: 0;</span><br><span class=\"line\"> 3     height: 0;</span><br><span class=\"line\"> 4     border-left: 50px solid transparent;</span><br><span class=\"line\"> 5     border-right: 50px solid transparent;</span><br><span class=\"line\"> 6     border-bottom: 100px solid red;</span><br><span class=\"line\"> 7     position: relative;</span><br><span class=\"line\"> 8 &#125;</span><br><span class=\"line\"> 9 #star-six:after &#123;</span><br><span class=\"line\">10     width: 0;</span><br><span class=\"line\">11     height: 0;</span><br><span class=\"line\">12     border-left: 50px solid transparent;</span><br><span class=\"line\">13     border-right: 50px solid transparent;</span><br><span class=\"line\">14     border-top: 100px solid red;</span><br><span class=\"line\">15     position: absolute;</span><br><span class=\"line\">16     content: &quot;&quot;;</span><br><span class=\"line\">17     top: 30px;</span><br><span class=\"line\">18     left: -50px;</span><br><span class=\"line\">19 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>16、五角星 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #star-five &#123;</span><br><span class=\"line\"> 2    margin: 50px 0;</span><br><span class=\"line\"> 3    position: relative;</span><br><span class=\"line\"> 4    display: block;</span><br><span class=\"line\"> 5    color: red;</span><br><span class=\"line\"> 6    width: 0px;</span><br><span class=\"line\"> 7    height: 0px;</span><br><span class=\"line\"> 8    border-right:  100px solid transparent;</span><br><span class=\"line\"> 9    border-bottom: 70px  solid red;</span><br><span class=\"line\">10    border-left:   100px solid transparent;</span><br><span class=\"line\">11    -moz-transform:    rotate(35deg);</span><br><span class=\"line\">12    -webkit-transform: rotate(35deg);</span><br><span class=\"line\">13    -ms-transform:     rotate(35deg);</span><br><span class=\"line\">14    -o-transform:      rotate(35deg);</span><br><span class=\"line\">15 &#125;</span><br><span class=\"line\">16 #star-five:before &#123;</span><br><span class=\"line\">17    border-bottom: 80px solid red;</span><br><span class=\"line\">18    border-left: 30px solid transparent;</span><br><span class=\"line\">19    border-right: 30px solid transparent;</span><br><span class=\"line\">20    position: absolute;</span><br><span class=\"line\">21    height: 0;</span><br><span class=\"line\">22    width: 0;</span><br><span class=\"line\">23    top: -45px;</span><br><span class=\"line\">24    left: -65px;</span><br><span class=\"line\">25    display: block;</span><br><span class=\"line\">26    content: &apos;&apos;;</span><br><span class=\"line\">27    -webkit-transform: rotate(-35deg);</span><br><span class=\"line\">28    -moz-transform:    rotate(-35deg);</span><br><span class=\"line\">29    -ms-transform:     rotate(-35deg);</span><br><span class=\"line\">30    -o-transform:      rotate(-35deg);</span><br><span class=\"line\">31     </span><br><span class=\"line\">32 &#125;</span><br><span class=\"line\">33 #star-five:after &#123;</span><br><span class=\"line\">34    position: absolute;</span><br><span class=\"line\">35    display: block;</span><br><span class=\"line\">36    color: red;</span><br><span class=\"line\">37    top: 3px;</span><br><span class=\"line\">38    left: -105px;</span><br><span class=\"line\">39    width: 0px;</span><br><span class=\"line\">40    height: 0px;</span><br><span class=\"line\">41    border-right: 100px solid transparent;</span><br><span class=\"line\">42    border-bottom: 70px solid red;</span><br><span class=\"line\">43    border-left: 100px solid transparent;</span><br><span class=\"line\">44    -webkit-transform: rotate(-70deg);</span><br><span class=\"line\">45    -moz-transform:    rotate(-70deg);</span><br><span class=\"line\">46    -ms-transform:     rotate(-70deg);</span><br><span class=\"line\">47    -o-transform:      rotate(-70deg);</span><br><span class=\"line\">48    content: &apos;&apos;;</span><br><span class=\"line\">49 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>17、五角大楼 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #pentagon &#123;</span><br><span class=\"line\"> 2     position: relative;</span><br><span class=\"line\"> 3     width: 54px;</span><br><span class=\"line\"> 4     border-width: 50px 18px 0;</span><br><span class=\"line\"> 5     border-style: solid;</span><br><span class=\"line\"> 6     border-color: red transparent;</span><br><span class=\"line\"> 7 &#125;</span><br><span class=\"line\"> 8 #pentagon:before &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     height: 0;</span><br><span class=\"line\">12     width: 0;</span><br><span class=\"line\">13     top: -85px;</span><br><span class=\"line\">14     left: -18px;</span><br><span class=\"line\">15     border-width: 0 45px 35px;</span><br><span class=\"line\">16     border-style: solid;</span><br><span class=\"line\">17     border-color: transparent transparent red;</span><br><span class=\"line\">18 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>18、六边形 </p>\n<p>最终效果：</p>\n<p> CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #hexagon &#123;</span><br><span class=\"line\"> 2     width: 100px;</span><br><span class=\"line\"> 3     height: 55px;</span><br><span class=\"line\"> 4     background: red;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6 &#125;</span><br><span class=\"line\"> 7 #hexagon:before &#123;</span><br><span class=\"line\"> 8     content: &quot;&quot;;</span><br><span class=\"line\"> 9     position: absolute;</span><br><span class=\"line\">10     top: -25px;</span><br><span class=\"line\">11     left: 0;</span><br><span class=\"line\">12     width: 0;</span><br><span class=\"line\">13     height: 0;</span><br><span class=\"line\">14     border-left: 50px solid transparent;</span><br><span class=\"line\">15     border-right: 50px solid transparent;</span><br><span class=\"line\">16     border-bottom: 25px solid red;</span><br><span class=\"line\">17 &#125;</span><br><span class=\"line\">18 #hexagon:after &#123;</span><br><span class=\"line\">19     content: &quot;&quot;;</span><br><span class=\"line\">20     position: absolute;</span><br><span class=\"line\">21     bottom: -25px;</span><br><span class=\"line\">22     left: 0;</span><br><span class=\"line\">23     width: 0;</span><br><span class=\"line\">24     height: 0;</span><br><span class=\"line\">25     border-left: 50px solid transparent;</span><br><span class=\"line\">26     border-right: 50px solid transparent;</span><br><span class=\"line\">27     border-top: 25px solid red;</span><br><span class=\"line\">28 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>19、八角形 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #octagon &#123;</span><br><span class=\"line\"> 2     width: 100px;</span><br><span class=\"line\"> 3     height: 100px;</span><br><span class=\"line\"> 4     background: red;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6 &#125;</span><br><span class=\"line\"> 7  </span><br><span class=\"line\"> 8 #octagon:before &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     left: 0;   </span><br><span class=\"line\">13     border-bottom: 29px solid red;</span><br><span class=\"line\">14     border-left: 29px solid #eee;</span><br><span class=\"line\">15     border-right: 29px solid #eee;</span><br><span class=\"line\">16     width: 42px;</span><br><span class=\"line\">17     height: 0;</span><br><span class=\"line\">18 &#125;</span><br><span class=\"line\">19  </span><br><span class=\"line\">20 #octagon:after &#123;</span><br><span class=\"line\">21     content: &quot;&quot;;</span><br><span class=\"line\">22     position: absolute;</span><br><span class=\"line\">23     bottom: 0;</span><br><span class=\"line\">24     left: 0;   </span><br><span class=\"line\">25     border-top: 29px solid red;</span><br><span class=\"line\">26     border-left: 29px solid #eee;</span><br><span class=\"line\">27     border-right: 29px solid #eee;</span><br><span class=\"line\">28     width: 42px;</span><br><span class=\"line\">29     height: 0;</span><br><span class=\"line\">30 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>20、爱心 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #heart &#123;</span><br><span class=\"line\"> 2     position: relative;</span><br><span class=\"line\"> 3     width: 100px;</span><br><span class=\"line\"> 4     height: 90px;</span><br><span class=\"line\"> 5 &#125;</span><br><span class=\"line\"> 6 #heart:before,</span><br><span class=\"line\"> 7 #heart:after &#123;</span><br><span class=\"line\"> 8     position: absolute;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     left: 50px;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     width: 50px;</span><br><span class=\"line\">13     height: 80px;</span><br><span class=\"line\">14     background: red;</span><br><span class=\"line\">15     -moz-border-radius: 50px 50px 0 0;</span><br><span class=\"line\">16     border-radius: 50px 50px 0 0;</span><br><span class=\"line\">17     -webkit-transform: rotate(-45deg);</span><br><span class=\"line\">18        -moz-transform: rotate(-45deg);</span><br><span class=\"line\">19         -ms-transform: rotate(-45deg);</span><br><span class=\"line\">20          -o-transform: rotate(-45deg);</span><br><span class=\"line\">21             transform: rotate(-45deg);</span><br><span class=\"line\">22     -webkit-transform-origin: 0 100%;</span><br><span class=\"line\">23        -moz-transform-origin: 0 100%;</span><br><span class=\"line\">24         -ms-transform-origin: 0 100%;</span><br><span class=\"line\">25          -o-transform-origin: 0 100%;</span><br><span class=\"line\">26             transform-origin: 0 100%;</span><br><span class=\"line\">27 &#125;</span><br><span class=\"line\">28 #heart:after &#123;</span><br><span class=\"line\">29     left: 0;</span><br><span class=\"line\">30     -webkit-transform: rotate(45deg);</span><br><span class=\"line\">31        -moz-transform: rotate(45deg);</span><br><span class=\"line\">32         -ms-transform: rotate(45deg);</span><br><span class=\"line\">33          -o-transform: rotate(45deg);</span><br><span class=\"line\">34             transform: rotate(45deg);</span><br><span class=\"line\">35     -webkit-transform-origin: 100% 100%;</span><br><span class=\"line\">36        -moz-transform-origin: 100% 100%;</span><br><span class=\"line\">37         -ms-transform-origin: 100% 100%;</span><br><span class=\"line\">38          -o-transform-origin: 100% 100%;</span><br><span class=\"line\">39             transform-origin :100% 100%;</span><br><span class=\"line\">40 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>21、无穷大符号 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #infinity &#123;</span><br><span class=\"line\"> 2     position: relative;</span><br><span class=\"line\"> 3     width: 212px;</span><br><span class=\"line\"> 4     height: 100px;</span><br><span class=\"line\"> 5 &#125;</span><br><span class=\"line\"> 6  </span><br><span class=\"line\"> 7 #infinity:before,</span><br><span class=\"line\"> 8 #infinity:after &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     left: 0;</span><br><span class=\"line\">13     width: 60px;</span><br><span class=\"line\">14     height: 60px;   </span><br><span class=\"line\">15     border: 20px solid red;</span><br><span class=\"line\">16     -moz-border-radius: 50px 50px 0 50px;</span><br><span class=\"line\">17          border-radius: 50px 50px 0 50px;</span><br><span class=\"line\">18     -webkit-transform: rotate(-45deg);</span><br><span class=\"line\">19        -moz-transform: rotate(-45deg);</span><br><span class=\"line\">20         -ms-transform: rotate(-45deg);</span><br><span class=\"line\">21          -o-transform: rotate(-45deg);</span><br><span class=\"line\">22             transform: rotate(-45deg);</span><br><span class=\"line\">23 &#125;</span><br><span class=\"line\">24  </span><br><span class=\"line\">25 #infinity:after &#123;</span><br><span class=\"line\">26     left: auto;</span><br><span class=\"line\">27     right: 0;</span><br><span class=\"line\">28     -moz-border-radius: 50px 50px 50px 0;</span><br><span class=\"line\">29          border-radius: 50px 50px 50px 0;</span><br><span class=\"line\">30     -webkit-transform: rotate(45deg);</span><br><span class=\"line\">31        -moz-transform: rotate(45deg);</span><br><span class=\"line\">32         -ms-transform: rotate(45deg);</span><br><span class=\"line\">33          -o-transform: rotate(45deg);</span><br><span class=\"line\">34             transform: rotate(45deg);</span><br><span class=\"line\">35 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>22、鸡蛋 </p>\n<p>最终效果</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#egg &#123;</span><br><span class=\"line\">   display:block;</span><br><span class=\"line\">   width: 126px;</span><br><span class=\"line\">   height: 180px;</span><br><span class=\"line\">   background-color: red;</span><br><span class=\"line\">   -webkit-border-radius: 63px 63px 63px 63px / 108px 108px 72px 72px;</span><br><span class=\"line\">   border-radius: 50%   50%  50%  50%  / 60%   60%   40%  40%;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p> 23、食逗人（Pac-Man） </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #pacman &#123;</span><br><span class=\"line\"> 2   width: 0px;</span><br><span class=\"line\"> 3   height: 0px;</span><br><span class=\"line\"> 4   border-right: 60px solid transparent;</span><br><span class=\"line\"> 5   border-top: 60px solid red;</span><br><span class=\"line\"> 6   border-left: 60px solid red;</span><br><span class=\"line\"> 7   border-bottom: 60px solid red;</span><br><span class=\"line\"> 8   border-top-left-radius: 60px;</span><br><span class=\"line\"> 9   border-top-right-radius: 60px;</span><br><span class=\"line\">10   border-bottom-left-radius: 60px;</span><br><span class=\"line\">11   border-bottom-right-radius: 60px;</span><br><span class=\"line\">12 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>24、提示对话框</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #talkbubble &#123;</span><br><span class=\"line\"> 2    width: 120px;</span><br><span class=\"line\"> 3    height: 80px;</span><br><span class=\"line\"> 4    background: red;</span><br><span class=\"line\"> 5    position: relative;</span><br><span class=\"line\"> 6    -moz-border-radius:    10px;</span><br><span class=\"line\"> 7    -webkit-border-radius: 10px;</span><br><span class=\"line\"> 8    border-radius:         10px;</span><br><span class=\"line\"> 9 &#125;</span><br><span class=\"line\">10 #talkbubble:before &#123;</span><br><span class=\"line\">11    content:&quot;&quot;;</span><br><span class=\"line\">12    position: absolute;</span><br><span class=\"line\">13    right: 100%;</span><br><span class=\"line\">14    top: 26px;</span><br><span class=\"line\">15    width: 0;</span><br><span class=\"line\">16    height: 0;</span><br><span class=\"line\">17    border-top: 13px solid transparent;</span><br><span class=\"line\">18    border-right: 26px solid red;</span><br><span class=\"line\">19    border-bottom: 13px solid transparent;</span><br><span class=\"line\">20 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>25、12角星 </p>\n<p>最终效果：</p>\n<p> CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #burst-12 &#123;</span><br><span class=\"line\"> 2     background: red;</span><br><span class=\"line\"> 3     width: 80px;</span><br><span class=\"line\"> 4     height: 80px;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6     text-align: center;</span><br><span class=\"line\"> 7 &#125;</span><br><span class=\"line\"> 8 #burst-12:before, #burst-12:after &#123;</span><br><span class=\"line\"> 9     content: &quot;&quot;;</span><br><span class=\"line\">10     position: absolute;</span><br><span class=\"line\">11     top: 0;</span><br><span class=\"line\">12     left: 0;</span><br><span class=\"line\">13     height: 80px;</span><br><span class=\"line\">14     width: 80px;</span><br><span class=\"line\">15     background: red;</span><br><span class=\"line\">16 &#125;</span><br><span class=\"line\">17 #burst-12:before &#123;</span><br><span class=\"line\">18     -webkit-transform: rotate(30deg);</span><br><span class=\"line\">19        -moz-transform: rotate(30deg);</span><br><span class=\"line\">20         -ms-transform: rotate(30deg);</span><br><span class=\"line\">21          -o-transform: rotate(30deg);</span><br><span class=\"line\">22             transform: rotate(30deg);</span><br><span class=\"line\">23 &#125;</span><br><span class=\"line\">24 #burst-12:after &#123;</span><br><span class=\"line\">25     -webkit-transform: rotate(60deg);</span><br><span class=\"line\">26        -moz-transform: rotate(60deg);</span><br><span class=\"line\">27         -ms-transform: rotate(60deg);</span><br><span class=\"line\">28          -o-transform: rotate(60deg);</span><br><span class=\"line\">29             transform: rotate(60deg);</span><br><span class=\"line\">30 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>26、8角星 </p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #burst-8 &#123;</span><br><span class=\"line\"> 2     background: red;</span><br><span class=\"line\"> 3     width: 80px;</span><br><span class=\"line\"> 4     height: 80px;</span><br><span class=\"line\"> 5     position: relative;</span><br><span class=\"line\"> 6     text-align: center;</span><br><span class=\"line\"> 7     -webkit-transform: rotate(20deg);</span><br><span class=\"line\"> 8        -moz-transform: rotate(20deg);</span><br><span class=\"line\"> 9         -ms-transform: rotate(20deg);</span><br><span class=\"line\">10          -o-transform: rotate(20eg);</span><br><span class=\"line\">11             transform: rotate(20deg);</span><br><span class=\"line\">12 &#125;</span><br><span class=\"line\">13 #burst-8:before &#123;</span><br><span class=\"line\">14     content: &quot;&quot;;</span><br><span class=\"line\">15     position: absolute;</span><br><span class=\"line\">16     top: 0;</span><br><span class=\"line\">17     left: 0;</span><br><span class=\"line\">18     height: 80px;</span><br><span class=\"line\">19     width: 80px;</span><br><span class=\"line\">20     background: red;</span><br><span class=\"line\">21     -webkit-transform: rotate(135deg);</span><br><span class=\"line\">22        -moz-transform: rotate(135deg);</span><br><span class=\"line\">23         -ms-transform: rotate(135deg);</span><br><span class=\"line\">24          -o-transform: rotate(135deg);</span><br><span class=\"line\">25             transform: rotate(135deg);</span><br><span class=\"line\">26 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>27、钻石 </p>\n<p>最终效果：</p>\n<p> CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #cut-diamond &#123;</span><br><span class=\"line\"> 2     border-style: solid;</span><br><span class=\"line\"> 3     border-color: transparent transparent red transparent;</span><br><span class=\"line\"> 4     border-width: 0 25px 25px 25px;</span><br><span class=\"line\"> 5     height: 0;</span><br><span class=\"line\"> 6     width: 50px;</span><br><span class=\"line\"> 7     position: relative;</span><br><span class=\"line\"> 8     margin: 20px 0 50px 0;</span><br><span class=\"line\"> 9 &#125;</span><br><span class=\"line\">10 #cut-diamond:after &#123;</span><br><span class=\"line\">11     content: &quot;&quot;;</span><br><span class=\"line\">12     position: absolute;</span><br><span class=\"line\">13     top: 25px;</span><br><span class=\"line\">14     left: -25px;</span><br><span class=\"line\">15     width: 0;</span><br><span class=\"line\">16     height: 0;</span><br><span class=\"line\">17     border-style: solid;</span><br><span class=\"line\">18     border-color: red transparent transparent transparent;</span><br><span class=\"line\">19     border-width: 70px 50px 0 50px;</span><br><span class=\"line\">20 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>28、阴阳八卦（霸气的这个）</p>\n<p>最终效果：</p>\n<p>CSS代码如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1 #yin-yang &#123;</span><br><span class=\"line\"> 2     width: 96px;</span><br><span class=\"line\"> 3     height: 48px;</span><br><span class=\"line\"> 4     background: #eee;</span><br><span class=\"line\"> 5     border-color: red;</span><br><span class=\"line\"> 6     border-style: solid;</span><br><span class=\"line\"> 7     border-width: 2px 2px 50px 2px;</span><br><span class=\"line\"> 8     border-radius: 100%;</span><br><span class=\"line\"> 9     position: relative;</span><br><span class=\"line\">10 &#125;</span><br><span class=\"line\">11  </span><br><span class=\"line\">12 #yin-yang:before &#123;</span><br><span class=\"line\">13     content: &quot;&quot;;</span><br><span class=\"line\">14     position: absolute;</span><br><span class=\"line\">15     top: 50%;</span><br><span class=\"line\">16     left: 0;</span><br><span class=\"line\">17     background: #eee;</span><br><span class=\"line\">18     border: 18px solid red;</span><br><span class=\"line\">19     border-radius: 100%;</span><br><span class=\"line\">20     width: 12px;</span><br><span class=\"line\">21     height: 12px;</span><br><span class=\"line\">22 &#125;</span><br><span class=\"line\">23  </span><br><span class=\"line\">24 #yin-yang:after &#123;</span><br><span class=\"line\">25     content: &quot;&quot;;</span><br><span class=\"line\">26     position: absolute;</span><br><span class=\"line\">27     top: 50%;</span><br><span class=\"line\">28     left: 50%;</span><br><span class=\"line\">29     background: red;</span><br><span class=\"line\">30     border: 18px solid #eee;</span><br><span class=\"line\">31     border-radius:100%;</span><br><span class=\"line\">32     width: 12px;</span><br><span class=\"line\">33     height: 12px;</span><br><span class=\"line\">34 &#125;</span><br></pre></td></tr></table></figure>\n\n<p>　　好了，就到这里了，一共28个，个人觉得后面几个比较犀利。这些代码的来源是<a href=\"http://css-tricks.com/examples/ShapesOfCSS/\" target=\"_blank\" rel=\"noopener\">css-tricks</a>。由<a href=\"http://www.itivy.com/ivy\" target=\"_blank\" rel=\"noopener\">青藤屋</a>博客整理，转载请保留原文链接：</p>\n<p><a href=\"http://www.itivy.com/ivy/archive/2012/1/16/css-shape.html\" target=\"_blank\" rel=\"noopener\">http://www.itivy.com/ivy/archive/2012/1/16/css-shape.html</a></p>\n"},{"title":"联通电视盒子软破解安装应用","date":"2019-09-01T14:20:33.000Z","_content":"\n**前段时间，家里装联通宽带了一个电视盒子 ZXV10B860AV2.1-B，emmmm，你懂的这个盒子无法安装你想要的app软件，所以就有了这篇文章。**\n\n------\n\n首先我先说一下原理：一般盒子本身会有一些你不想要的app可以安装的，我们的原理呢就是，通过这些软件中的任意一个来进行狸猫换太子，来安装当贝市场，装上这个以后就不用我多说了吧。（此方法理论上适合大多数盒子，由于我安装的时候没有截图所以，配图会很少，不是很适合小白）\n\n***\n\n\n\n#### 步骤\n\n- 下载我们需要的软件：\n\n  1. 当贝市场（找官网只需要下载链接就可以）;\n  2. 抓包软件Fiddle（官网下载）;\n\n- 设置盒子的网络连接的代理:\n\n  1. 确保安装Fiddle的电脑和盒子处于同一局域网内;\n  2. 开启Fiddler的远程连接，Fiddler 主菜单 Tools -> Fiddler Options…-> Connections页签，选中Allowremote computers to connect，并记住端口号为8888，等会设置手机代理时需要。设置好后重启fiddler保证设置生效。设置如下：![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3asufac1vj311y0kgtd6.jpg)\n  3. 普通https抓包设置(如果是https的链接就需要这一步，如果不是可以略过，因为我的不是https 所以如果是https的小伙伴可以参考:[Fiddler 如何抓取手机app包以及抓取https 响应](<https://blog.csdn.net/liujingqiu/article/details/79387909/>)进行设置即可）。\n  4. 设置盒子网络代理：网络设置-> 显示高级选项-> 代理设置 分别输入ip（你电脑开启Fiddle的ip地址），端口号是8888\n     ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3at8sbyxdj30fa08lq35.jpg)\n\n- 设置好代理后，电脑端开启Fiddle开始抓包，盒子上安装可以安装的软件，抓取对应的url后， 在Fiddle里面进行替换链接：\n  ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3atpd27loj31l00u0qh4.jpg)\n\n  \n\n  卸载之后再次下载之前点击的那个app软件，就可以把当贝市场安装上了，接下来你就可以随心所欲了。\n\n  ------\n\n  #### 总结\n\n  不同的盒子可能不同，有的盒子你在代理之后进入自带的下载界面的时候可能会有验证，可以在抓取到对应的url后先关闭AutoResponder，之后进入下载页面，再点击下载之前把它打开应该就可以了，理解了原理再来操作，就会容易多了，最后希望大家都可以成功。\n\n  \n\n  ","source":"_posts/联通电视盒子软破解安装应用.md","raw":"---\ntitle: 联通电视盒子软破解安装应用\ndate: 2019-09-01 22:20:33\ntags: [联通,电视盒子,破解,安装应用]\n---\n\n**前段时间，家里装联通宽带了一个电视盒子 ZXV10B860AV2.1-B，emmmm，你懂的这个盒子无法安装你想要的app软件，所以就有了这篇文章。**\n\n------\n\n首先我先说一下原理：一般盒子本身会有一些你不想要的app可以安装的，我们的原理呢就是，通过这些软件中的任意一个来进行狸猫换太子，来安装当贝市场，装上这个以后就不用我多说了吧。（此方法理论上适合大多数盒子，由于我安装的时候没有截图所以，配图会很少，不是很适合小白）\n\n***\n\n\n\n#### 步骤\n\n- 下载我们需要的软件：\n\n  1. 当贝市场（找官网只需要下载链接就可以）;\n  2. 抓包软件Fiddle（官网下载）;\n\n- 设置盒子的网络连接的代理:\n\n  1. 确保安装Fiddle的电脑和盒子处于同一局域网内;\n  2. 开启Fiddler的远程连接，Fiddler 主菜单 Tools -> Fiddler Options…-> Connections页签，选中Allowremote computers to connect，并记住端口号为8888，等会设置手机代理时需要。设置好后重启fiddler保证设置生效。设置如下：![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3asufac1vj311y0kgtd6.jpg)\n  3. 普通https抓包设置(如果是https的链接就需要这一步，如果不是可以略过，因为我的不是https 所以如果是https的小伙伴可以参考:[Fiddler 如何抓取手机app包以及抓取https 响应](<https://blog.csdn.net/liujingqiu/article/details/79387909/>)进行设置即可）。\n  4. 设置盒子网络代理：网络设置-> 显示高级选项-> 代理设置 分别输入ip（你电脑开启Fiddle的ip地址），端口号是8888\n     ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3at8sbyxdj30fa08lq35.jpg)\n\n- 设置好代理后，电脑端开启Fiddle开始抓包，盒子上安装可以安装的软件，抓取对应的url后， 在Fiddle里面进行替换链接：\n  ![](https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3atpd27loj31l00u0qh4.jpg)\n\n  \n\n  卸载之后再次下载之前点击的那个app软件，就可以把当贝市场安装上了，接下来你就可以随心所欲了。\n\n  ------\n\n  #### 总结\n\n  不同的盒子可能不同，有的盒子你在代理之后进入自带的下载界面的时候可能会有验证，可以在抓取到对应的url后先关闭AutoResponder，之后进入下载页面，再点击下载之前把它打开应该就可以了，理解了原理再来操作，就会容易多了，最后希望大家都可以成功。\n\n  \n\n  ","slug":"联通电视盒子软破解安装应用","published":1,"updated":"2021-03-24T15:03:18.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1cu001osi35sq5rfruu","content":"<p><strong>前段时间，家里装联通宽带了一个电视盒子 ZXV10B860AV2.1-B，emmmm，你懂的这个盒子无法安装你想要的app软件，所以就有了这篇文章。</strong></p>\n<hr>\n<p>首先我先说一下原理：一般盒子本身会有一些你不想要的app可以安装的，我们的原理呢就是，通过这些软件中的任意一个来进行狸猫换太子，来安装当贝市场，装上这个以后就不用我多说了吧。（此方法理论上适合大多数盒子，由于我安装的时候没有截图所以，配图会很少，不是很适合小白）</p>\n<hr>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li><p>下载我们需要的软件：</p>\n<ol>\n<li>当贝市场（找官网只需要下载链接就可以）;</li>\n<li>抓包软件Fiddle（官网下载）;</li>\n</ol>\n</li>\n<li><p>设置盒子的网络连接的代理:</p>\n<ol>\n<li>确保安装Fiddle的电脑和盒子处于同一局域网内;</li>\n<li>开启Fiddler的远程连接，Fiddler 主菜单 Tools -&gt; Fiddler Options…-&gt; Connections页签，选中Allowremote computers to connect，并记住端口号为8888，等会设置手机代理时需要。设置好后重启fiddler保证设置生效。设置如下：<img src=\"https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3asufac1vj311y0kgtd6.jpg\" alt></li>\n<li>普通https抓包设置(如果是https的链接就需要这一步，如果不是可以略过，因为我的不是https 所以如果是https的小伙伴可以参考:<a href=\"https://blog.csdn.net/liujingqiu/article/details/79387909/\" target=\"_blank\" rel=\"noopener\">Fiddler 如何抓取手机app包以及抓取https 响应</a>进行设置即可）。</li>\n<li>设置盒子网络代理：网络设置-&gt; 显示高级选项-&gt; 代理设置 分别输入ip（你电脑开启Fiddle的ip地址），端口号是8888<br><img src=\"https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3at8sbyxdj30fa08lq35.jpg\" alt></li>\n</ol>\n</li>\n<li><p>设置好代理后，电脑端开启Fiddle开始抓包，盒子上安装可以安装的软件，抓取对应的url后， 在Fiddle里面进行替换链接：<br><img src=\"https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3atpd27loj31l00u0qh4.jpg\" alt></p>\n</li>\n</ul>\n<p>  卸载之后再次下载之前点击的那个app软件，就可以把当贝市场安装上了，接下来你就可以随心所欲了。</p>\n<hr>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>  不同的盒子可能不同，有的盒子你在代理之后进入自带的下载界面的时候可能会有验证，可以在抓取到对应的url后先关闭AutoResponder，之后进入下载页面，再点击下载之前把它打开应该就可以了，理解了原理再来操作，就会容易多了，最后希望大家都可以成功。</p>\n","site":{"data":{}},"excerpt":"","more":"<p><strong>前段时间，家里装联通宽带了一个电视盒子 ZXV10B860AV2.1-B，emmmm，你懂的这个盒子无法安装你想要的app软件，所以就有了这篇文章。</strong></p>\n<hr>\n<p>首先我先说一下原理：一般盒子本身会有一些你不想要的app可以安装的，我们的原理呢就是，通过这些软件中的任意一个来进行狸猫换太子，来安装当贝市场，装上这个以后就不用我多说了吧。（此方法理论上适合大多数盒子，由于我安装的时候没有截图所以，配图会很少，不是很适合小白）</p>\n<hr>\n<h4 id=\"步骤\"><a href=\"#步骤\" class=\"headerlink\" title=\"步骤\"></a>步骤</h4><ul>\n<li><p>下载我们需要的软件：</p>\n<ol>\n<li>当贝市场（找官网只需要下载链接就可以）;</li>\n<li>抓包软件Fiddle（官网下载）;</li>\n</ol>\n</li>\n<li><p>设置盒子的网络连接的代理:</p>\n<ol>\n<li>确保安装Fiddle的电脑和盒子处于同一局域网内;</li>\n<li>开启Fiddler的远程连接，Fiddler 主菜单 Tools -&gt; Fiddler Options…-&gt; Connections页签，选中Allowremote computers to connect，并记住端口号为8888，等会设置手机代理时需要。设置好后重启fiddler保证设置生效。设置如下：<img src=\"https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3asufac1vj311y0kgtd6.jpg\" alt></li>\n<li>普通https抓包设置(如果是https的链接就需要这一步，如果不是可以略过，因为我的不是https 所以如果是https的小伙伴可以参考:<a href=\"https://blog.csdn.net/liujingqiu/article/details/79387909/\" target=\"_blank\" rel=\"noopener\">Fiddler 如何抓取手机app包以及抓取https 响应</a>进行设置即可）。</li>\n<li>设置盒子网络代理：网络设置-&gt; 显示高级选项-&gt; 代理设置 分别输入ip（你电脑开启Fiddle的ip地址），端口号是8888<br><img src=\"https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3at8sbyxdj30fa08lq35.jpg\" alt></li>\n</ol>\n</li>\n<li><p>设置好代理后，电脑端开启Fiddle开始抓包，盒子上安装可以安装的软件，抓取对应的url后， 在Fiddle里面进行替换链接：<br><img src=\"https://cdn.sinaimg.cn.52ecy.cn/large/005BYqpgly1g3atpd27loj31l00u0qh4.jpg\" alt></p>\n</li>\n</ul>\n<p>  卸载之后再次下载之前点击的那个app软件，就可以把当贝市场安装上了，接下来你就可以随心所欲了。</p>\n<hr>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h4><p>  不同的盒子可能不同，有的盒子你在代理之后进入自带的下载界面的时候可能会有验证，可以在抓取到对应的url后先关闭AutoResponder，之后进入下载页面，再点击下载之前把它打开应该就可以了，理解了原理再来操作，就会容易多了，最后希望大家都可以成功。</p>\n"},{"title":"通过Form.create创建的form域","date":"2019-10-26T08:23:20.000Z","_content":"\n详细看官网文档:\n\n\n\n被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:\n\n```js\nconst options = {\n\nvaluePropName: 'checked',\n\ninitalValue: true\n\n}\n\ngetFieldDecorator(id, options)\n```\n\n\n\n\n\n经过 `Form.create` 包装的组件将会自带 `this.props.form` 属性，`this.props.form` 提供的 API 如下：\n\n> 注意：使用 `getFieldsValue` `getFieldValue` `setFieldsValue` 等时，应确保对应的 field 已经用 `getFieldDecorator` 注册过了。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png)\n\n\n\n### this.props.form.getFieldDecorator(id, options)[#](https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options))\n\n经过 `getFieldDecorator` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1. 你**不再需要也不应该**用 `onChange` 来做同步，但还是可以继续监听 `onChange` 等事件。\n2. 你不能用控件的 `value` `defaultValue` 等属性来设置表单域的值，默认值可以用 `getFieldDecorator` 里的 `initialValue`。\n3. 你不应该用 `setState`，可以使用 `this.props.form.setFieldsValue` 来动态改变表单值。\n\n\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png)","source":"_posts/通过Form-create创建的form域.md","raw":"---\ntitle: 通过Form.create创建的form域\ndate: 2019-10-26 16:23:20\ntags: [antd, form, valuePropName]\n---\n\n详细看官网文档:\n\n\n\n被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:\n\n```js\nconst options = {\n\nvaluePropName: 'checked',\n\ninitalValue: true\n\n}\n\ngetFieldDecorator(id, options)\n```\n\n\n\n\n\n经过 `Form.create` 包装的组件将会自带 `this.props.form` 属性，`this.props.form` 提供的 API 如下：\n\n> 注意：使用 `getFieldsValue` `getFieldValue` `setFieldsValue` 等时，应确保对应的 field 已经用 `getFieldDecorator` 注册过了。\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png)\n\n\n\n### this.props.form.getFieldDecorator(id, options)[#](https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options))\n\n经过 `getFieldDecorator` 包装的控件，表单控件会自动添加 `value`（或 `valuePropName` 指定的其他属性） `onChange`（或 `trigger` 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：\n\n1. 你**不再需要也不应该**用 `onChange` 来做同步，但还是可以继续监听 `onChange` 等事件。\n2. 你不能用控件的 `value` `defaultValue` 等属性来设置表单域的值，默认值可以用 `getFieldDecorator` 里的 `initialValue`。\n3. 你不应该用 `setState`，可以使用 `this.props.form.setFieldsValue` 来动态改变表单值。\n\n\n\n![图片.png](https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png)","slug":"通过Form-create创建的form域","published":1,"updated":"2021-03-24T15:03:18.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckmnls1d1001qsi35xtik96fp","content":"<p>详细看官网文档:</p>\n<p>被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">valuePropName: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">initalValue: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getFieldDecorator(id, options)</span><br></pre></td></tr></table></figure>\n\n<p>经过 <code>Form.create</code> 包装的组件将会自带 <code>this.props.form</code> 属性，<code>this.props.form</code> 提供的 API 如下：</p>\n<blockquote>\n<p>注意：使用 <code>getFieldsValue</code> <code>getFieldValue</code> <code>setFieldsValue</code> 等时，应确保对应的 field 已经用 <code>getFieldDecorator</code> 注册过了。</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png\" alt=\"图片.png\"></p>\n<h3 id=\"this-props-form-getFieldDecorator-id-options\"><a href=\"#this-props-form-getFieldDecorator-id-options\" class=\"headerlink\" title=\"this.props.form.getFieldDecorator(id, options)#\"></a>this.props.form.getFieldDecorator(id, options)<a href=\"https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options)\" target=\"_blank\" rel=\"noopener\">#</a></h3><p>经过 <code>getFieldDecorator</code> 包装的控件，表单控件会自动添加 <code>value</code>（或 <code>valuePropName</code> 指定的其他属性） <code>onChange</code>（或 <code>trigger</code> 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：</p>\n<ol>\n<li>你<strong>不再需要也不应该</strong>用 <code>onChange</code> 来做同步，但还是可以继续监听 <code>onChange</code> 等事件。</li>\n<li>你不能用控件的 <code>value</code> <code>defaultValue</code> 等属性来设置表单域的值，默认值可以用 <code>getFieldDecorator</code> 里的 <code>initialValue</code>。</li>\n<li>你不应该用 <code>setState</code>，可以使用 <code>this.props.form.setFieldsValue</code> 来动态改变表单值。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png\" alt=\"图片.png\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>详细看官网文档:</p>\n<p>被getFieldDecorator包装的组件 想要设置默认值 只能设置initialValue 如果属性名称不为vlaue, 可以通过valuePropName属相来声明 例如switch:</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> options = &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">valuePropName: <span class=\"string\">'checked'</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">initalValue: <span class=\"literal\">true</span></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getFieldDecorator(id, options)</span><br></pre></td></tr></table></figure>\n\n<p>经过 <code>Form.create</code> 包装的组件将会自带 <code>this.props.form</code> 属性，<code>this.props.form</code> 提供的 API 如下：</p>\n<blockquote>\n<p>注意：使用 <code>getFieldsValue</code> <code>getFieldValue</code> <code>setFieldsValue</code> 等时，应确保对应的 field 已经用 <code>getFieldDecorator</code> 注册过了。</p>\n</blockquote>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1571898869834-ea0bf83a-21e4-48b2-8098-3337dc757f35.png\" alt=\"图片.png\"></p>\n<h3 id=\"this-props-form-getFieldDecorator-id-options\"><a href=\"#this-props-form-getFieldDecorator-id-options\" class=\"headerlink\" title=\"this.props.form.getFieldDecorator(id, options)#\"></a>this.props.form.getFieldDecorator(id, options)<a href=\"https://ant.design/components/form-cn/#thispropsformgetFieldDecorator(id,-options)\" target=\"_blank\" rel=\"noopener\">#</a></h3><p>经过 <code>getFieldDecorator</code> 包装的控件，表单控件会自动添加 <code>value</code>（或 <code>valuePropName</code> 指定的其他属性） <code>onChange</code>（或 <code>trigger</code> 指定的其他属性），数据同步将被 Form 接管，这会导致以下结果：</p>\n<ol>\n<li>你<strong>不再需要也不应该</strong>用 <code>onChange</code> 来做同步，但还是可以继续监听 <code>onChange</code> 等事件。</li>\n<li>你不能用控件的 <code>value</code> <code>defaultValue</code> 等属性来设置表单域的值，默认值可以用 <code>getFieldDecorator</code> 里的 <code>initialValue</code>。</li>\n<li>你不应该用 <code>setState</code>，可以使用 <code>this.props.form.setFieldsValue</code> 来动态改变表单值。</li>\n</ol>\n<p><img src=\"https://cdn.nlark.com/yuque/0/2019/png/206259/1571898916290-ba8f21cf-fbdc-42f2-b92e-186a778e7ab0.png\" alt=\"图片.png\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"ckmnls14u0000si356v7sumni","tag_id":"ckmnls15t0003si35nykha5an","_id":"ckmnls17x000fsi35hi66h2al"},{"post_id":"ckmnls14u0000si356v7sumni","tag_id":"ckmnls16m0007si35mq52g39i","_id":"ckmnls184000hsi35sa7zy9wq"},{"post_id":"ckmnls14u0000si356v7sumni","tag_id":"ckmnls173000asi35w27vyv78","_id":"ckmnls18c000ksi35yxclptlm"},{"post_id":"ckmnls15k0002si35dbgrxhpc","tag_id":"ckmnls17o000dsi35jq8m16zv","_id":"ckmnls18j000msi359ybf4lg0"},{"post_id":"ckmnls1630004si356y2eih62","tag_id":"ckmnls185000isi35sdz1pcff","_id":"ckmnls1a6000zsi354s567n0s"},{"post_id":"ckmnls1630004si356y2eih62","tag_id":"ckmnls18q000osi35dgu8ozue","_id":"ckmnls1ad0011si356jkx4ltu"},{"post_id":"ckmnls1630004si356y2eih62","tag_id":"ckmnls194000rsi35hvke89g0","_id":"ckmnls1ak0014si35ics3c1d7"},{"post_id":"ckmnls1630004si356y2eih62","tag_id":"ckmnls19h000usi35zbuz9vtj","_id":"ckmnls1ay0016si35bngfm6lq"},{"post_id":"ckmnls16h0006si35ektz89lx","tag_id":"ckmnls19y000xsi355i6dafxd","_id":"ckmnls1b50019si355bbpc6nw"},{"post_id":"ckmnls16p0008si35nl8fl9jo","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1c8001hsi357r40128b"},{"post_id":"ckmnls16p0008si35nl8fl9jo","tag_id":"ckmnls1b40018si35o64024h3","_id":"ckmnls1cf001jsi3513ff5hl6"},{"post_id":"ckmnls16p0008si35nl8fl9jo","tag_id":"ckmnls1bi001csi35ty137uon","_id":"ckmnls1cn001msi3524bevwj2"},{"post_id":"ckmnls16w0009si35va3s4a1u","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1da001ssi35nmvf3gn2"},{"post_id":"ckmnls16w0009si35va3s4a1u","tag_id":"ckmnls1cf001ksi35cxfk96wd","_id":"ckmnls1db001tsi35wlp059o8"},{"post_id":"ckmnls16w0009si35va3s4a1u","tag_id":"ckmnls1cy001psi35a17c2cvn","_id":"ckmnls1de001vsi35zuvbajqs"},{"post_id":"ckmnls174000bsi35omgkgr7n","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1dn001zsi35bmnpx5ro"},{"post_id":"ckmnls174000bsi35omgkgr7n","tag_id":"ckmnls1b40018si35o64024h3","_id":"ckmnls1do0020si3555nsjy93"},{"post_id":"ckmnls174000bsi35omgkgr7n","tag_id":"ckmnls1df001wsi35yd6g1684","_id":"ckmnls1dr0022si35ags0b4qj"},{"post_id":"ckmnls174000bsi35omgkgr7n","tag_id":"ckmnls1dh001xsi35urrqewsp","_id":"ckmnls1ds0023si35fwcu6hbn"},{"post_id":"ckmnls17b000csi351iad6lff","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1dz0027si359i0yfkfq"},{"post_id":"ckmnls17b000csi351iad6lff","tag_id":"ckmnls1b40018si35o64024h3","_id":"ckmnls1e00028si350axamgt4"},{"post_id":"ckmnls17b000csi351iad6lff","tag_id":"ckmnls1ds0024si35j7k5ye92","_id":"ckmnls1e2002asi35yrpimjpy"},{"post_id":"ckmnls17b000csi351iad6lff","tag_id":"ckmnls1du0025si35olgkfkbx","_id":"ckmnls1e3002bsi353ouelgwd"},{"post_id":"ckmnls17r000esi35wmmdlgsp","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1eb002fsi35rf5zp4ib"},{"post_id":"ckmnls17r000esi35wmmdlgsp","tag_id":"ckmnls1e10029si35bujxy96b","_id":"ckmnls1ec002gsi35sgbx6xnc"},{"post_id":"ckmnls17r000esi35wmmdlgsp","tag_id":"ckmnls1e4002csi35cs0qt2f8","_id":"ckmnls1ee002isi354k4873me"},{"post_id":"ckmnls17r000esi35wmmdlgsp","tag_id":"ckmnls1e6002dsi359ehnaerd","_id":"ckmnls1ee002jsi35lnkffsnm"},{"post_id":"ckmnls17y000gsi35be417hsu","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1el002lsi35kzsuw8cm"},{"post_id":"ckmnls17y000gsi35be417hsu","tag_id":"ckmnls1ec002hsi355jvoylix","_id":"ckmnls1em002msi35q6xm8b5m"},{"post_id":"ckmnls186000jsi35a7ngp3l0","tag_id":"ckmnls1ej002ksi35uvm4706z","_id":"ckmnls1ez002tsi354208k9qb"},{"post_id":"ckmnls186000jsi35a7ngp3l0","tag_id":"ckmnls1en002nsi35x75atmnc","_id":"ckmnls1f0002usi356h8z915z"},{"post_id":"ckmnls186000jsi35a7ngp3l0","tag_id":"ckmnls1ep002osi35552w9nw4","_id":"ckmnls1f1002wsi3515eiw3o5"},{"post_id":"ckmnls186000jsi35a7ngp3l0","tag_id":"ckmnls1eq002psi35dkorx4zd","_id":"ckmnls1f2002xsi35fh5grvbt"},{"post_id":"ckmnls186000jsi35a7ngp3l0","tag_id":"ckmnls1es002qsi35lydq8kia","_id":"ckmnls1f4002zsi35lwxkjxvc"},{"post_id":"ckmnls186000jsi35a7ngp3l0","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1f50030si35245afl3n"},{"post_id":"ckmnls18d000lsi35mo1xkkn4","tag_id":"ckmnls1ew002ssi35u2cnozvq","_id":"ckmnls1f70032si35zsayalzc"},{"post_id":"ckmnls18d000lsi35mo1xkkn4","tag_id":"ckmnls1f0002vsi35pmdkrvvb","_id":"ckmnls1f90033si35qll0296f"},{"post_id":"ckmnls18l000nsi35b0qq1o9s","tag_id":"ckmnls1f3002ysi35q6x0d46k","_id":"ckmnls1fd0036si3569lxc2ah"},{"post_id":"ckmnls18l000nsi35b0qq1o9s","tag_id":"ckmnls1f60031si35rhc6e3km","_id":"ckmnls1fe0037si35dh5gepdf"},{"post_id":"ckmnls18l000nsi35b0qq1o9s","tag_id":"ckmnls1fa0034si35z1psrqeb","_id":"ckmnls1fg0039si3576gs6eim"},{"post_id":"ckmnls18z000qsi35uxv6egvm","tag_id":"ckmnls1fb0035si35ihzpvk1o","_id":"ckmnls1fk003csi3578lne65c"},{"post_id":"ckmnls18z000qsi35uxv6egvm","tag_id":"ckmnls1fe0038si35zreoc8ru","_id":"ckmnls1fl003dsi350iufsxyd"},{"post_id":"ckmnls18z000qsi35uxv6egvm","tag_id":"ckmnls1fh003asi35sr3es81q","_id":"ckmnls1fn003fsi35nfoc989n"},{"post_id":"ckmnls196000ssi352h908yau","tag_id":"ckmnls1fi003bsi35u5espdi3","_id":"ckmnls1fo003gsi35p8mu9dzs"},{"post_id":"ckmnls19c000tsi35fwpkkfi1","tag_id":"ckmnls1fl003esi35qck1lm8p","_id":"ckmnls1fx003ksi35vjc3896q"},{"post_id":"ckmnls19c000tsi35fwpkkfi1","tag_id":"ckmnls1fo003hsi35ynpsrzvn","_id":"ckmnls1fy003lsi35e59zbazs"},{"post_id":"ckmnls19c000tsi35fwpkkfi1","tag_id":"ckmnls1fs003isi3552ks72lk","_id":"ckmnls1gd003nsi35vrx6vg9v"},{"post_id":"ckmnls19j000vsi35jzpt4b56","tag_id":"ckmnls1fu003jsi35br6vvj37","_id":"ckmnls1gk003rsi35brgh9sk4"},{"post_id":"ckmnls19j000vsi35jzpt4b56","tag_id":"ckmnls1fo003hsi35ynpsrzvn","_id":"ckmnls1gk003ssi35fmqle1g8"},{"post_id":"ckmnls19j000vsi35jzpt4b56","tag_id":"ckmnls1ge003osi35z9ee46lg","_id":"ckmnls1gm003usi3504ynpa9s"},{"post_id":"ckmnls19j000vsi35jzpt4b56","tag_id":"ckmnls1gg003psi35acd2av9t","_id":"ckmnls1gn003vsi35inepf9s2"},{"post_id":"ckmnls19p000wsi35k9at7v98","tag_id":"ckmnls1fo003hsi35ynpsrzvn","_id":"ckmnls1gr003ysi356fv7j8lx"},{"post_id":"ckmnls19p000wsi35k9at7v98","tag_id":"ckmnls1gl003tsi358meca23s","_id":"ckmnls1gr003zsi35n1p9m0mb"},{"post_id":"ckmnls19p000wsi35k9at7v98","tag_id":"ckmnls1gn003wsi356hdsgn47","_id":"ckmnls1gt0041si353lymia0w"},{"post_id":"ckmnls1a0000ysi35psnbdxpx","tag_id":"ckmnls1gp003xsi359bggczeg","_id":"ckmnls1h20046si35439mig3a"},{"post_id":"ckmnls1a0000ysi35psnbdxpx","tag_id":"ckmnls1gs0040si35lle9vn7v","_id":"ckmnls1h20047si35gg7gz7fk"},{"post_id":"ckmnls1a0000ysi35psnbdxpx","tag_id":"ckmnls1gu0042si35n3txjer5","_id":"ckmnls1h40049si35vrrxl4ei"},{"post_id":"ckmnls1a0000ysi35psnbdxpx","tag_id":"ckmnls1fl003esi35qck1lm8p","_id":"ckmnls1h4004asi357ly4w2uu"},{"post_id":"ckmnls1a0000ysi35psnbdxpx","tag_id":"ckmnls1gy0044si35n1mve7rz","_id":"ckmnls1h6004csi35fzjba32b"},{"post_id":"ckmnls1a70010si35xxh7t40q","tag_id":"ckmnls1gz0045si35a3xms4au","_id":"ckmnls1hg004esi35a7sq0241"},{"post_id":"ckmnls1a70010si35xxh7t40q","tag_id":"ckmnls1h30048si35ko753njl","_id":"ckmnls1hh004fsi35qr3if2r4"},{"post_id":"ckmnls1a70010si35xxh7t40q","tag_id":"ckmnls1h5004bsi35q8f18aha","_id":"ckmnls1hj004hsi35onjboooy"},{"post_id":"ckmnls1ae0012si35jf0lp6o6","tag_id":"ckmnls1gp003xsi359bggczeg","_id":"ckmnls1ho004ksi35lst831r3"},{"post_id":"ckmnls1ae0012si35jf0lp6o6","tag_id":"ckmnls1hh004gsi35kc58vff7","_id":"ckmnls1hp004lsi3576qnqxsa"},{"post_id":"ckmnls1ae0012si35jf0lp6o6","tag_id":"ckmnls1hk004isi35r7r0oyl1","_id":"ckmnls1hr004nsi35e9z78u8t"},{"post_id":"ckmnls1al0015si356mrmzhuz","tag_id":"ckmnls1gp003xsi359bggczeg","_id":"ckmnls1hv004psi35t5f0uu4g"},{"post_id":"ckmnls1al0015si356mrmzhuz","tag_id":"ckmnls1hp004msi3535d5nco2","_id":"ckmnls1hv004qsi35s439bunl"},{"post_id":"ckmnls1az0017si35pnbkfy5p","tag_id":"ckmnls1gp003xsi359bggczeg","_id":"ckmnls1hz004tsi35vm47gdvw"},{"post_id":"ckmnls1az0017si35pnbkfy5p","tag_id":"ckmnls1hw004rsi357he96wyj","_id":"ckmnls1i0004usi35ubkr4itq"},{"post_id":"ckmnls1b6001asi35n012q0ui","tag_id":"ckmnls1hy004ssi35r3qioyus","_id":"ckmnls1i8004zsi359co4fnal"},{"post_id":"ckmnls1b6001asi35n012q0ui","tag_id":"ckmnls1i1004vsi35bvy9mjx9","_id":"ckmnls1i90050si356sk9zawm"},{"post_id":"ckmnls1b6001asi35n012q0ui","tag_id":"ckmnls1i2004wsi35ax0u4owg","_id":"ckmnls1ib0052si3578rzojbx"},{"post_id":"ckmnls1b6001asi35n012q0ui","tag_id":"ckmnls1i4004xsi357ie6uy3c","_id":"ckmnls1ic0053si35juaor1xp"},{"post_id":"ckmnls1bd001bsi35zu6k84ji","tag_id":"ckmnls1gp003xsi359bggczeg","_id":"ckmnls1if0055si35c2osxa9w"},{"post_id":"ckmnls1bd001bsi35zu6k84ji","tag_id":"ckmnls1i90051si35eof7ya54","_id":"ckmnls1ih0056si35ovhxq1sm"},{"post_id":"ckmnls1bk001dsi35lr7147ua","tag_id":"ckmnls1ic0054si35ofu0edas","_id":"ckmnls1im0059si35qnzqwg6v"},{"post_id":"ckmnls1bk001dsi35lr7147ua","tag_id":"ckmnls1ih0057si35irfzu0ii","_id":"ckmnls1in005asi35fo3w7hk4"},{"post_id":"ckmnls1bq001esi35ajk67k7r","tag_id":"ckmnls1ic0054si35ofu0edas","_id":"ckmnls1iu005esi35mstz87g5"},{"post_id":"ckmnls1bq001esi35ajk67k7r","tag_id":"ckmnls1gp003xsi359bggczeg","_id":"ckmnls1iu005fsi35v20nwkul"},{"post_id":"ckmnls1bq001esi35ajk67k7r","tag_id":"ckmnls1iq005csi354btsaj33","_id":"ckmnls1iw005hsi35u8oksm8b"},{"post_id":"ckmnls1bx001gsi35kug1u28e","tag_id":"ckmnls1is005dsi35spmqurgz","_id":"ckmnls1j0005ksi35msuajxqj"},{"post_id":"ckmnls1bx001gsi35kug1u28e","tag_id":"ckmnls1iv005gsi359jw5jod0","_id":"ckmnls1j1005lsi3542wva3yn"},{"post_id":"ckmnls1bx001gsi35kug1u28e","tag_id":"ckmnls1ix005isi35a5wflirh","_id":"ckmnls1j2005nsi35xgqahc91"},{"post_id":"ckmnls1ca001isi35mvukp1ag","tag_id":"ckmnls1iy005jsi358cm8ji5f","_id":"ckmnls1j5005psi3593vr72fw"},{"post_id":"ckmnls1ca001isi35mvukp1ag","tag_id":"ckmnls1j1005msi35qd182u75","_id":"ckmnls1j6005qsi35uq7i9a2a"},{"post_id":"ckmnls1ch001lsi351r41h8at","tag_id":"ckmnls1j3005osi35tcb24xat","_id":"ckmnls1ja005tsi35a30rdn7w"},{"post_id":"ckmnls1ch001lsi351r41h8at","tag_id":"ckmnls1j6005rsi35b7govqto","_id":"ckmnls1ja005usi35fuut45v2"},{"post_id":"ckmnls1co001nsi35nxmsmgym","tag_id":"ckmnls15t0003si35nykha5an","_id":"ckmnls1jc005wsi35d3b7lele"},{"post_id":"ckmnls1co001nsi35nxmsmgym","tag_id":"ckmnls1j8005ssi35v37ylp8r","_id":"ckmnls1jd005xsi35ucklbcux"},{"post_id":"ckmnls1cu001osi35sq5rfruu","tag_id":"ckmnls1jb005vsi35hxllij7j","_id":"ckmnls1jl0062si35yyl9srmh"},{"post_id":"ckmnls1cu001osi35sq5rfruu","tag_id":"ckmnls1je005ysi3530dd5b2i","_id":"ckmnls1jl0063si35zhzm61iq"},{"post_id":"ckmnls1cu001osi35sq5rfruu","tag_id":"ckmnls1jg005zsi35zqg9mk3m","_id":"ckmnls1jn0065si352poqilrx"},{"post_id":"ckmnls1cu001osi35sq5rfruu","tag_id":"ckmnls1jh0060si352ngsvq00","_id":"ckmnls1jn0066si35oonb1meu"},{"post_id":"ckmnls1d1001qsi35xtik96fp","tag_id":"ckmnls1ai0013si35i0n6exmj","_id":"ckmnls1jp0067si35ddgphre9"},{"post_id":"ckmnls1d1001qsi35xtik96fp","tag_id":"ckmnls1ji0061si35jnn6ld1k","_id":"ckmnls1jq0068si35frjoxvjm"},{"post_id":"ckmnls1d1001qsi35xtik96fp","tag_id":"ckmnls1jm0064si3500ws1irb","_id":"ckmnls1jq0069si35sz0dx4sv"}],"Tag":[{"name":"css","_id":"ckmnls15t0003si35nykha5an"},{"name":"img","_id":"ckmnls16m0007si35mq52g39i"},{"name":"居中","_id":"ckmnls173000asi35w27vyv78"},{"name":"formData","_id":"ckmnls17o000dsi35jq8m16zv"},{"name":"html","_id":"ckmnls185000isi35sdz1pcff"},{"name":"多行","_id":"ckmnls18q000osi35dgu8ozue"},{"name":"三个点","_id":"ckmnls194000rsi35hvke89g0"},{"name":"...","_id":"ckmnls19h000usi35zbuz9vtj"},{"name":"moment","_id":"ckmnls19y000xsi355i6dafxd"},{"name":"antd","_id":"ckmnls1ai0013si35i0n6exmj"},{"name":"table","_id":"ckmnls1b40018si35o64024h3"},{"name":"分页","_id":"ckmnls1bi001csi35ty137uon"},{"name":"Alert","_id":"ckmnls1cf001ksi35cxfk96wd"},{"name":"链接","_id":"ckmnls1cy001psi35a17c2cvn"},{"name":"columns","_id":"ckmnls1df001wsi35yd6g1684"},{"name":"filter","_id":"ckmnls1dh001xsi35urrqewsp"},{"name":"sort","_id":"ckmnls1ds0024si35j7k5ye92"},{"name":"提示","_id":"ckmnls1du0025si35olgkfkbx"},{"name":"checkbox","_id":"ckmnls1e10029si35bujxy96b"},{"name":"冒泡","_id":"ckmnls1e4002csi35cs0qt2f8"},{"name":"捕获","_id":"ckmnls1e6002dsi359ehnaerd"},{"name":"menu","_id":"ckmnls1ec002hsi355jvoylix"},{"name":"走马灯","_id":"ckmnls1ej002ksi35uvm4706z"},{"name":"carousel","_id":"ckmnls1en002nsi35x75atmnc"},{"name":"next","_id":"ckmnls1ep002osi35552w9nw4"},{"name":"pro","_id":"ckmnls1eq002psi35dkorx4zd"},{"name":"go","_id":"ckmnls1es002qsi35lydq8kia"},{"name":"a","_id":"ckmnls1ew002ssi35u2cnozvq"},{"name":"下载","_id":"ckmnls1f0002vsi35pmdkrvvb"},{"name":"hash","_id":"ckmnls1f3002ysi35q6x0d46k"},{"name":"browser","_id":"ckmnls1f60031si35rhc6e3km"},{"name":"history","_id":"ckmnls1fa0034si35z1psrqeb"},{"name":"mac","_id":"ckmnls1fb0035si35ihzpvk1o"},{"name":"小红点","_id":"ckmnls1fe0038si35zreoc8ru"},{"name":"更新","_id":"ckmnls1fh003asi35sr3es81q"},{"name":"mysql","_id":"ckmnls1fi003bsi35u5espdi3"},{"name":"ios","_id":"ckmnls1fl003esi35qck1lm8p"},{"name":"react-native","_id":"ckmnls1fo003hsi35ynpsrzvn"},{"name":"保存到相册","_id":"ckmnls1fs003isi3552ks72lk"},{"name":"iOS","_id":"ckmnls1fu003jsi35br6vvj37"},{"name":"环境搭建","_id":"ckmnls1ge003osi35z9ee46lg"},{"name":"pod","_id":"ckmnls1gg003psi35acd2av9t"},{"name":"webview","_id":"ckmnls1gl003tsi358meca23s"},{"name":"RNCWKWebView\" was not found in the UIManager","_id":"ckmnls1gn003wsi356hdsgn47"},{"name":"react","_id":"ckmnls1gp003xsi359bggczeg"},{"name":"native","_id":"ckmnls1gs0040si35lle9vn7v"},{"name":"bar","_id":"ckmnls1gu0042si35n3txjer5"},{"name":"高度","_id":"ckmnls1gy0044si35n1mve7rz"},{"name":"router","_id":"ckmnls1gz0045si35a3xms4au"},{"name":"js","_id":"ckmnls1h30048si35ko753njl"},{"name":"导航","_id":"ckmnls1h5004bsi35q8f18aha"},{"name":"getDefaultProps","_id":"ckmnls1hh004gsi35kc58vff7"},{"name":"getInitIalState","_id":"ckmnls1hk004isi35r7r0oyl1"},{"name":"html字符串","_id":"ckmnls1hp004msi3535d5nco2"},{"name":"context","_id":"ckmnls1hw004rsi357he96wyj"},{"name":"displayName","_id":"ckmnls1hy004ssi35r3qioyus"},{"name":"defaultProps","_id":"ckmnls1i1004vsi35bvy9mjx9"},{"name":"prototype","_id":"ckmnls1i2004wsi35ax0u4owg"},{"name":"static","_id":"ckmnls1i4004xsi357ie6uy3c"},{"name":"高阶组件","_id":"ckmnls1i90051si35eof7ya54"},{"name":"webpack","_id":"ckmnls1ic0054si35ofu0edas"},{"name":"项目环境配置","_id":"ckmnls1ih0057si35irfzu0ii"},{"name":"开发环境","_id":"ckmnls1iq005csi354btsaj33"},{"name":"cover","_id":"ckmnls1is005dsi35spmqurgz"},{"name":"填充铺满","_id":"ckmnls1iv005gsi359jw5jod0"},{"name":"图片","_id":"ckmnls1ix005isi35a5wflirh"},{"name":"async","_id":"ckmnls1iy005jsi358cm8ji5f"},{"name":"await","_id":"ckmnls1j1005msi35qd182u75"},{"name":"数组对象","_id":"ckmnls1j3005osi35tcb24xat"},{"name":"去重","_id":"ckmnls1j6005rsi35b7govqto"},{"name":"图形","_id":"ckmnls1j8005ssi35v37ylp8r"},{"name":"联通","_id":"ckmnls1jb005vsi35hxllij7j"},{"name":"电视盒子","_id":"ckmnls1je005ysi3530dd5b2i"},{"name":"破解","_id":"ckmnls1jg005zsi35zqg9mk3m"},{"name":"安装应用","_id":"ckmnls1jh0060si352ngsvq00"},{"name":"form","_id":"ckmnls1ji0061si35jnn6ld1k"},{"name":"valuePropName","_id":"ckmnls1jm0064si3500ws1irb"}]}}